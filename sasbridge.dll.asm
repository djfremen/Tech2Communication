;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : B8B23E3239AB491B6829CA03D8F34DD49CF102D6497D8F5C1779D840F187A746
; Input MD5    : 00DC6CA7EEE098FA26ABFB2E709F6CEF
; Input CRC32  : 248E6A6D
; Compiler     : Visual C++

; File Name   : C:\Users\manfr\Desktop\decompile-jar\sas-nativelib\sasbridge.dll
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 10000000
; Timestamp   : 4AD33889 (Mon Oct 12 14:09:13 2009)
; Section 1. (virtual address 00001000)
; Virtual size                  : 0001922D ( 102957.)
; Section size in file          : 00019400 ( 103424.)
; Offset to raw data for section: 00000400
; Flags 60000020: Text Executable Readable
; Alignment     : default
; OS type         :  MS Windows
; Application type:  DLL 32bit

.686p
.mmx
.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use32
assume cs:_text
;org 10001000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing



sub_10001000 proc near
mov     eax, ecx
mov     byte ptr [eax+3], 68h ; 'h'
mov     byte ptr [eax], 61h ; 'a'
mov     byte ptr [eax+4], 61h ; 'a'
mov     byte ptr [eax+6], 32h ; '2'
mov     byte ptr [eax+2], 70h ; 'p'
mov     byte ptr [eax+1], 6Ch ; 'l'
mov     byte ptr [eax+7], 33h ; '3'
mov     byte ptr [eax+5], 31h ; '1'
retn
sub_10001000 endp




sub_10001022 proc near

arg_0= byte ptr  4
arg_4= dword ptr  8

movsx   eax, [esp+arg_0]
mov     ecx, [esp+arg_4]
lea     eax, [eax+ecx+80h]
and     eax, 800000FFh
jns     short loc_10001040
dec     eax
or      eax, 0FFFFFF00h
inc     eax

loc_10001040:
add     eax, 0FFFFFF80h
retn
sub_10001022 endp




sub_10001044 proc near

arg_0= byte ptr  4
arg_4= dword ptr  8

movsx   eax, [esp+arg_0]
sub     eax, [esp+arg_4]
mov     ecx, 80h
add     eax, ecx
and     eax, 800000FFh
jns     short loc_10001062
dec     eax
or      eax, 0FFFFFF00h
inc     eax

loc_10001062:
sub     eax, ecx
retn
sub_10001044 endp



; Attributes: bp-based frame

; int __stdcall sub_10001065(char *)
sub_10001065 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019284 SIZE 00000023 BYTES

; __unwind { // loc_1001928C
push    4
mov     eax, offset loc_1001928C
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
lea     eax, [ebp+arg_0]
push    eax             ; char **
call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
;   try {
and     [ebp+var_4], 0
mov     dword ptr [esi], offset off_1001B1A0
;   } // starts at 1000107F
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 10001065
sub_10001065 endp



; Attributes: bp-based frame

sub_10001097 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019284 SIZE 00000023 BYTES

; __unwind { // loc_1001928C
push    4
mov     eax, offset loc_1001928C
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_1001B1A0
or      [ebp+var_4], 0FFFFFFFFh
call    sub_1000B27B
call    __EH_epilog3
retn
; } // starts at 10001097
sub_10001097 endp


loc_100010BB:
push    esi
mov     esi, ecx
call    sub_10001097
test    byte ptr [esp+8], 1
jz      short loc_100010D1
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_100010D1:
mov     eax, esi
pop     esi
retn    4
; [0000001F BYTES: COLLAPSED FUNCTION _wmemcpy_s]
; [0000001F BYTES: COLLAPSED FUNCTION _wmemmove_s]
; [0000001C BYTES: COLLAPSED FUNCTION unknown_libname_8]


; Attributes: bp-based frame

; int __cdecl sub_10001131(wchar_t *S1, rsize_t N1, wchar_t *S2, rsize_t N)
sub_10001131 proc near

S1= dword ptr  8
N1= dword ptr  0Ch
S2= dword ptr  10h
N= dword ptr  14h

push    ebp
mov     ebp, esp
push    [ebp+N]         ; N
push    [ebp+S2]        ; S2
push    [ebp+N1]        ; N1
push    [ebp+S1]        ; S1
call    _wmemmove_s
mov     eax, [ebp+S1]
add     esp, 10h
pop     ebp
retn
sub_10001131 endp

; [0000001C BYTES: COLLAPSED FUNCTION std::char_traits<char>::_Copy_s(char *,uint,char const *,uint)]
; [0000001C BYTES: COLLAPSED FUNCTION std::char_traits<char>::_Move_s(char *,uint,char const *,uint)]
; [00000017 BYTES: COLLAPSED FUNCTION std::char_traits<char>::assign(char *,uint,char)]
; START OF FUNCTION CHUNK FOR sub_1000236D
;   ADDITIONAL PARENT FUNCTION sub_100011C0

loc_1000119C:
; __unwind { // loc_100192AF
mov     dword ptr [ecx], offset off_1001B1AC
retn
; } // starts at 1000119C
; END OF FUNCTION CHUNK FOR sub_1000236D
; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_1]


; Attributes: bp-based frame

sub_100011C0 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1000119C SIZE 00000007 BYTES
; FUNCTION CHUNK AT 100192A7 SIZE 00000023 BYTES

; __unwind { // loc_100192AF
push    4
mov     eax, offset loc_100192AF
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001B1C0
;   try {
and     [ebp+var_4], 0
lea     eax, [esi+4]
push    eax             ; lpCriticalSection
call    ds:DeleteCriticalSection
;   } // starts at 100011D7
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [esi], offset off_1001B1AC
call    __EH_epilog3
retn
; } // starts at 100011C0
sub_100011C0 endp




sub_100011F5 proc near
add     ecx, 4
push    ecx             ; lpCriticalSection
call    ds:EnterCriticalSection
retn
sub_100011F5 endp




sub_10001200 proc near
add     ecx, 4
push    ecx             ; lpCriticalSection
call    ds:TryEnterCriticalSection
retn
sub_10001200 endp




sub_1000120B proc near
add     ecx, 4
push    ecx             ; lpCriticalSection
call    ds:LeaveCriticalSection
retn
sub_1000120B endp


loc_10001216:
push    esi
mov     esi, ecx
call    sub_100011C0
test    byte ptr [esp+8], 1
jz      short loc_1000122C
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000122C:
mov     eax, esi
pop     esi
retn    4



sub_10001232 proc near

arg_0= dword ptr  4

cmp     [esp+arg_0], 0
push    esi
jz      short loc_10001267
mov     esi, [ecx+18h]
lea     eax, [ecx+4]
cmp     esi, 10h
jb      short loc_10001249
mov     edx, [eax]
jmp     short loc_1000124B

loc_10001249:
mov     edx, eax

loc_1000124B:
cmp     [esp+4+arg_0], edx
jb      short loc_10001267
cmp     esi, 10h
jb      short loc_10001258
mov     eax, [eax]

loc_10001258:
mov     ecx, [ecx+14h]
add     ecx, eax
cmp     ecx, [esp+4+arg_0]
jbe     short loc_10001267
mov     al, 1
jmp     short loc_10001269

loc_10001267:
xor     al, al

loc_10001269:
pop     esi
retn    4
sub_10001232 endp




sub_1000126D proc near

arg_0= dword ptr  4

cmp     [esp+arg_0], 0
push    esi
jz      short loc_100012A3
mov     esi, [ecx+18h]
lea     eax, [ecx+4]
cmp     esi, 8
jb      short loc_10001284
mov     edx, [eax]
jmp     short loc_10001286

loc_10001284:
mov     edx, eax

loc_10001286:
cmp     [esp+4+arg_0], edx
jb      short loc_100012A3
cmp     esi, 8
jb      short loc_10001293
mov     eax, [eax]

loc_10001293:
mov     ecx, [ecx+14h]
lea     eax, [eax+ecx*2]
cmp     eax, [esp+4+arg_0]
jbe     short loc_100012A3
mov     al, 1
jmp     short loc_100012A5

loc_100012A3:
xor     al, al

loc_100012A5:
pop     esi
retn    4
sub_1000126D endp



; Attributes: bp-based frame

sub_100012A9 proc near

pExceptionObject= byte ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
sub     esp, 0Ch
test    ecx, ecx
ja      short loc_100012C1
xor     ecx, ecx

loc_100012B8:           ; Size
push    ecx
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
leave
retn

loc_100012C1:
or      eax, 0FFFFFFFFh
xor     edx, edx
div     ecx
cmp     eax, 1
jnb     short loc_100012B8
push    0               ; char *
lea     ecx, [ebp+pExceptionObject]
call    sub_10001065
push    offset pThrowInfo ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_100012A9 endp

align 2


; Attributes: bp-based frame

sub_100012E6 proc near

pExceptionObject= byte ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
sub     esp, 0Ch
test    ecx, ecx
ja      short loc_10001301
xor     ecx, ecx

loc_100012F5:
lea     eax, [ecx+ecx]
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
leave
retn

loc_10001301:
or      eax, 0FFFFFFFFh
xor     edx, edx
div     ecx
cmp     eax, 2
jnb     short loc_100012F5
push    0               ; char *
lea     ecx, [ebp+pExceptionObject]
call    sub_10001065
push    offset pThrowInfo ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_100012E6 endp

align 2
; [00000031 BYTES: COLLAPSED FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; [0000005A BYTES: COLLAPSED FUNCTION sub_10001357]
; [00000048 BYTES: COLLAPSED FUNCTION std::string::_Chassign(uint,uint,char)]



sub_100013F9 proc near

arg_0= dword ptr  4

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
mov     edi, [esp+8+arg_0]
cmp     eax, 0FFFFFFFCh
jz      short loc_10001415
test    eax, eax
jz      short loc_10001410
cmp     eax, [edi]
jz      short loc_10001415

loc_10001410:
call    __invalid_parameter_noinfo

loc_10001415:
mov     eax, [esi+4]
sub     eax, [edi+4]
pop     edi
pop     esi
retn    4
sub_100013F9 endp




sub_10001420 proc near

arg_0= dword ptr  4

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
mov     edi, [esp+8+arg_0]
cmp     eax, 0FFFFFFFCh
jz      short loc_1000146F
test    eax, eax
jnz     short loc_10001438
call    __invalid_parameter_noinfo

loc_10001438:
mov     eax, [esi]
cmp     dword ptr [eax+18h], 10h
jb      short loc_10001445
mov     ecx, [eax+4]
jmp     short loc_10001448

loc_10001445:
lea     ecx, [eax+4]

loc_10001448:
mov     edx, [esi+4]
push    ebx
mov     ebx, [eax+14h]
add     ebx, ecx
add     edx, edi
cmp     edx, ebx
pop     ebx
ja      short loc_1000146A
cmp     dword ptr [eax+18h], 10h
jb      short loc_10001463
mov     eax, [eax+4]
jmp     short loc_10001466

loc_10001463:
add     eax, 4

loc_10001466:
cmp     edx, eax
jnb     short loc_1000146F

loc_1000146A:
call    __invalid_parameter_noinfo

loc_1000146F:
add     [esi+4], edi
pop     edi
mov     eax, esi
pop     esi
retn    4
sub_10001420 endp

; [00000028 BYTES: COLLAPSED FUNCTION std::string::operator[](uint)]
; [0000001C BYTES: COLLAPSED FUNCTION std::string::_Eos(uint)]



sub_100014BD proc near

arg_0= dword ptr  4

cmp     dword ptr [ecx+18h], 8
mov     eax, [esp+arg_0]
mov     [ecx+14h], eax
jb      short loc_100014CF
mov     ecx, [ecx+4]
jmp     short loc_100014D2

loc_100014CF:
add     ecx, 4

loc_100014D2:
xor     edx, edx
mov     [ecx+eax*2], dx
retn    4
sub_100014BD endp




sub_100014DB proc near

arg_0= byte ptr  4
arg_4= dword ptr  8
arg_8= byte ptr  0Ch

xor     eax, eax
cmp     [esp+arg_4], eax
jz      short locret_100014F1
lea     eax, [esp+arg_8]
push    eax
lea     ecx, [esp+4+arg_0]
call    sub_100013F9

locret_100014F1:
retn
sub_100014DB endp




sub_100014F2 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    ebx
mov     ebx, [esp+4+arg_0]
push    esi
mov     esi, [esp+8+arg_4]
push    edi
mov     edi, ecx
and     dword ptr [edi], 0
test    esi, esi
jz      short loc_1000152F
test    ebx, ebx
jz      short loc_1000152F
mov     edx, [esi+18h]
lea     eax, [esi+4]
cmp     edx, 10h
jb      short loc_10001519
mov     ecx, [eax]
jmp     short loc_1000151B

loc_10001519:
mov     ecx, eax

loc_1000151B:
cmp     ecx, ebx
ja      short loc_1000152F
cmp     edx, 10h
jb      short loc_10001526
mov     eax, [eax]

loc_10001526:
mov     ecx, [esi+14h]
add     ecx, eax
cmp     ebx, ecx
jbe     short loc_10001534

loc_1000152F:
call    __invalid_parameter_noinfo

loc_10001534:
mov     [edi], esi
mov     [edi+4], ebx
mov     eax, edi
pop     edi
pop     esi
pop     ebx
retn    8
sub_100014F2 endp

; [0000004B BYTES: COLLAPSED FUNCTION std::string::_Tidy(bool,uint)]
; [0000004B BYTES: COLLAPSED FUNCTION std::wstring::_Tidy(bool,uint)]


; Attributes: bp-based frame

sub_100015D7 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [esi+14h], edi
jnb     short loc_100015EB
call    sub_1000B15A

loc_100015EB:
mov     eax, [esi+14h]
sub     eax, edi
cmp     eax, [ebp+arg_4]
jnb     short loc_100015F8
mov     [ebp+arg_4], eax

loc_100015F8:
cmp     [ebp+arg_4], 0
jbe     short loc_1000163E
mov     ecx, [esi+18h]
push    ebx
lea     edx, [esi+4]
cmp     ecx, 10h
jb      short loc_1000160E
mov     ebx, [edx]
jmp     short loc_10001610

loc_1000160E:
mov     ebx, edx

loc_10001610:
cmp     ecx, 10h
jb      short loc_10001617
mov     edx, [edx]

loc_10001617:
sub     eax, [ebp+arg_4]
add     ebx, edi
add     ebx, [ebp+arg_4]
push    eax             ; SourceSize
push    ebx             ; Source
sub     ecx, edi
push    ecx             ; DestinationSize
add     edx, edi
push    edx             ; Destination
call    ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ; std::char_traits<char>::_Move_s(char *,uint,char const *,uint)
mov     eax, [esi+14h]
sub     eax, [ebp+arg_4]
add     esp, 10h
push    eax
mov     ecx, esi
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
pop     ebx

loc_1000163E:
pop     edi
mov     eax, esi
pop     esi
pop     ebp
retn    8
sub_100015D7 endp



; Attributes: bp-based frame

sub_10001646 proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [esi+14h], edi
jnb     short loc_1000165B
call    sub_1000B15A

loc_1000165B:
mov     eax, [esi+14h]
sub     eax, edi
cmp     eax, [ebp+arg_4]
jnb     short loc_10001668
mov     [ebp+arg_4], eax

loc_10001668:
cmp     [ebp+arg_4], 0
jbe     short loc_100016BE
mov     ecx, [esi+18h]
push    ebx
lea     edx, [esi+4]
cmp     ecx, 8
jb      short loc_10001681
mov     ebx, [edx]
mov     [ebp+arg_0], ebx
jmp     short loc_10001684

loc_10001681:
mov     [ebp+arg_0], edx

loc_10001684:
cmp     ecx, 8
jb      short loc_1000168B
mov     edx, [edx]

loc_1000168B:
mov     ebx, [ebp+arg_4]
sub     eax, ebx
push    eax             ; N
mov     [ebp+var_4], edx
mov     edx, [ebp+arg_0]
lea     eax, [edi+ebx]
lea     eax, [edx+eax*2]
push    eax             ; S2
mov     eax, [ebp+var_4]
sub     ecx, edi
push    ecx             ; N1
lea     eax, [eax+edi*2]
push    eax             ; S1
call    sub_10001131
mov     eax, [esi+14h]
add     esp, 10h
sub     eax, ebx
push    eax
mov     ecx, esi
call    sub_100014BD
pop     ebx

loc_100016BE:
pop     edi
mov     eax, esi
pop     esi
leave
retn    8
sub_10001646 endp



; Attributes: bp-based frame

; int __stdcall sub_100016C6(int, rsize_t SourceSize)
sub_100016C6 proc near

var_1C= dword ptr -1Ch
Destination= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
SourceSize= dword ptr  0Ch

; FUNCTION CHUNK AT 100192CA SIZE 0000001B BYTES

; __unwind { // loc_100192CA
push    10h
mov     eax, offset loc_100192CA
call    __EH_prolog3_catch
mov     edi, ecx
mov     [ebp+var_1C], edi
mov     esi, [ebp+arg_0]
or      esi, 0Fh
cmp     esi, 0FFFFFFFEh
jbe     short loc_100016E7
mov     esi, [ebp+arg_0]
jmp     short loc_1000170C

loc_100016E7:
mov     ecx, [edi+18h]
mov     [ebp+var_14], ecx
shr     [ebp+var_14], 1
mov     eax, esi
xor     edx, edx
push    3
pop     ebx
div     ebx
mov     edx, [ebp+var_14]
cmp     eax, edx
jnb     short loc_1000170C
push    0FFFFFFFEh
pop     eax
sub     eax, edx
cmp     ecx, eax
ja      short loc_1000170C
lea     esi, [edx+ecx]

loc_1000170C:
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
push    ebx
lea     eax, [esi+1]
push    eax
call    sub_100012A9
pop     ecx
pop     ecx
mov     [ebp+Destination], eax
;   } // starts at 1000170E
or      [ebp+var_4], 0FFFFFFFFh
jmp     short loc_10001756

loc_10001726:
;   catch(...) // owned by 1000170E
mov     [ebp+var_10], esp
mov     eax, [ebp+arg_0]
mov     [ebp+arg_0], eax
;   try {
mov     byte ptr [ebp+var_4], 2
push    0
inc     eax
push    eax
call    sub_100012A9
pop     ecx
pop     ecx
mov     [ebp+Destination], eax
;   } // starts at 1000172F
mov     [ebp+var_4], 1
mov     eax, offset loc_1000174E
retn

loc_1000174E:
xor     ebx, ebx
mov     edi, [ebp+var_1C]
mov     esi, [ebp+arg_0]

loc_10001756:
cmp     [ebp+SourceSize], ebx
jbe     short loc_1000177C
cmp     dword ptr [edi+18h], 10h
jb      short loc_10001766
mov     eax, [edi+4]
jmp     short loc_10001769

loc_10001766:
lea     eax, [edi+4]

loc_10001769:           ; SourceSize
push    [ebp+SourceSize]
push    eax             ; Source
lea     eax, [esi+1]
push    eax             ; DestinationSize
push    [ebp+Destination] ; Destination
call    ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ; std::char_traits<char>::_Copy_s(char *,uint,char const *,uint)
add     esp, 10h

loc_1000177C:           ; SourceSize
push    ebx
push    1               ; char
mov     ecx, edi
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     eax, [ebp+Destination]
mov     [edi+4], eax
mov     [edi+18h], esi
push    [ebp+SourceSize]
mov     ecx, edi
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
call    __EH_epilog3
retn    8

loc_100017A1:
;   catch(...) // owned by 1000172F
xor     ebx, ebx
push    ebx             ; SourceSize
push    1               ; char
mov     ecx, [ebp+var_1C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
push    ebx             ; pThrowInfo
push    ebx             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; } // starts at 100016C6
sub_100016C6 endp

align 2


; Attributes: bp-based frame

; int __stdcall sub_100017B6(int, rsize_t N)
sub_100017B6 proc near

var_1C= dword ptr -1Ch
S1= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
N= dword ptr  0Ch

; FUNCTION CHUNK AT 100192E5 SIZE 0000001B BYTES

; __unwind { // loc_100192E5
push    10h
mov     eax, offset loc_100192E5
call    __EH_prolog3_catch
mov     edi, ecx
mov     [ebp+var_1C], edi
mov     esi, [ebp+arg_0]
or      esi, 7
cmp     esi, 7FFFFFFEh
jbe     short loc_100017DA
mov     esi, [ebp+arg_0]
jmp     short loc_10001801

loc_100017DA:
mov     ecx, [edi+18h]
mov     [ebp+var_14], ecx
shr     [ebp+var_14], 1
mov     eax, esi
xor     edx, edx
push    3
pop     ebx
div     ebx
mov     edx, [ebp+var_14]
cmp     eax, edx
jnb     short loc_10001801
mov     eax, 7FFFFFFEh
sub     eax, edx
cmp     ecx, eax
ja      short loc_10001801
lea     esi, [edx+ecx]

loc_10001801:
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
push    ebx
lea     eax, [esi+1]
push    eax
call    sub_100012E6
pop     ecx
pop     ecx
mov     [ebp+S1], eax
;   } // starts at 10001803
or      [ebp+var_4], 0FFFFFFFFh
jmp     short loc_1000184B

loc_1000181B:
;   catch(...) // owned by 10001803
mov     [ebp+var_10], esp
mov     eax, [ebp+arg_0]
mov     [ebp+arg_0], eax
;   try {
mov     byte ptr [ebp+var_4], 2
push    0
inc     eax
push    eax
call    sub_100012E6
pop     ecx
pop     ecx
mov     [ebp+S1], eax
;   } // starts at 10001824
mov     [ebp+var_4], 1
mov     eax, offset loc_10001843
retn

loc_10001843:
xor     ebx, ebx
mov     edi, [ebp+var_1C]
mov     esi, [ebp+arg_0]

loc_1000184B:
cmp     [ebp+N], ebx
jbe     short loc_10001871
cmp     dword ptr [edi+18h], 8
jb      short loc_1000185B
mov     eax, [edi+4]
jmp     short loc_1000185E

loc_1000185B:
lea     eax, [edi+4]

loc_1000185E:           ; N
push    [ebp+N]
push    eax             ; S2
lea     eax, [esi+1]
push    eax             ; N1
push    [ebp+S1]        ; S1
call    unknown_libname_8 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h

loc_10001871:           ; N
push    ebx
push    1               ; char
mov     ecx, edi
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+S1]
mov     [edi+4], eax
mov     [edi+18h], esi
push    [ebp+N]
mov     ecx, edi
call    sub_100014BD
call    __EH_epilog3
retn    8

loc_10001896:
;   catch(...) // owned by 10001824
xor     ebx, ebx
push    ebx             ; N
push    1               ; char
mov     ecx, [ebp+var_1C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
push    ebx             ; pThrowInfo
push    ebx             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; } // starts at 100017B6
sub_100017B6 endp

db 0CCh
; [00000015 BYTES: COLLAPSED FUNCTION std::string::string(void)]
; [0000000A BYTES: COLLAPSED CHUNK OF FUNCTION sub_1000A4B5]
; [00000015 BYTES: COLLAPSED FUNCTION std::wstring::wstring(void)]
; [0000000A BYTES: COLLAPSED CHUNK OF FUNCTION sub_100089EB]



sub_100018E9 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
push    edi
mov     edi, [esp+8+arg_0]
mov     esi, ecx
cmp     edi, 0FFFFFFFEh
jbe     short loc_100018FB
call    sub_1000B122

loc_100018FB:
cmp     [esi+18h], edi
jnb     short loc_1000190D
push    dword ptr [esi+14h] ; SourceSize
mov     ecx, esi
push    edi             ; int
call    sub_100016C6
jmp     short loc_1000193A

loc_1000190D:
cmp     [esp+8+arg_4], 0
jz      short loc_1000192E
cmp     edi, 10h
jnb     short loc_1000192E
mov     eax, [esi+14h]
cmp     edi, eax
jnb     short loc_10001922
mov     eax, edi

loc_10001922:           ; SourceSize
push    eax
push    1               ; char
mov     ecx, esi
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
jmp     short loc_1000193A

loc_1000192E:
test    edi, edi
jnz     short loc_1000193A
push    edi
mov     ecx, esi
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)

loc_1000193A:
xor     eax, eax
cmp     eax, edi
sbb     eax, eax
pop     edi
neg     eax
pop     esi
retn    8
sub_100018E9 endp




sub_10001947 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
push    edi
mov     edi, [esp+8+arg_0]
mov     esi, ecx
cmp     edi, 7FFFFFFEh
jbe     short loc_1000195C
call    sub_1000B122

loc_1000195C:
cmp     [esi+18h], edi
jnb     short loc_1000196E
push    dword ptr [esi+14h] ; N
mov     ecx, esi
push    edi             ; int
call    sub_100017B6
jmp     short loc_1000199B

loc_1000196E:
cmp     [esp+8+arg_4], 0
jz      short loc_1000198F
cmp     edi, 8
jnb     short loc_1000198F
mov     eax, [esi+14h]
cmp     edi, eax
jnb     short loc_10001983
mov     eax, edi

loc_10001983:           ; N
push    eax
push    1               ; char
mov     ecx, esi
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_1000199B

loc_1000198F:
test    edi, edi
jnz     short loc_1000199B
push    edi
mov     ecx, esi
call    sub_100014BD

loc_1000199B:
xor     eax, eax
cmp     eax, edi
sbb     eax, eax
pop     edi
neg     eax
pop     esi
retn    8
sub_10001947 endp

; [00000020 BYTES: COLLAPSED FUNCTION std::string::begin(void)]
; [00000025 BYTES: COLLAPSED FUNCTION std::string::end(void)]


; Attributes: bp-based frame

sub_100019ED proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    ecx
mov     eax, [ecx]
mov     [ebp+var_8], eax
mov     eax, [ecx+4]
mov     [ebp+var_4], eax
mov     eax, [ebp+arg_4]
neg     eax
push    eax
lea     ecx, [ebp+var_8]
call    sub_10001420
mov     ecx, [ebp+var_8]
mov     eax, [ebp+arg_0]
mov     [eax], ecx
mov     ecx, [ebp+var_4]
mov     [eax+4], ecx
leave
retn    8
sub_100019ED endp




; int __stdcall sub_10001A1D(size_t Size, char)
sub_10001A1D proc near

Size= dword ptr  4
arg_4= byte ptr  8

push    ebx
mov     ebx, [esp+4+Size]
push    edi
or      eax, 0FFFFFFFFh
mov     edi, ecx
sub     eax, [edi+14h]
cmp     eax, ebx
ja      short loc_10001A34
call    sub_1000B122

loc_10001A34:
test    ebx, ebx
jbe     short loc_10001A64
push    esi
mov     esi, [edi+14h]
push    0
add     esi, ebx
push    esi
mov     ecx, edi
call    sub_100018E9
test    al, al
jz      short loc_10001A63
push    dword ptr [esp+0Ch+arg_4] ; char
mov     ecx, edi
push    ebx             ; Size
push    dword ptr [edi+14h] ; int
call    ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::string::_Chassign(uint,uint,char)
push    esi
mov     ecx, edi
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)

loc_10001A63:
pop     esi

loc_10001A64:
mov     eax, edi
pop     edi
pop     ebx
retn    8
sub_10001A1D endp



; Attributes: bp-based frame

; int __stdcall sub_10001A6B(int, int, rsize_t SourceSize)
sub_10001A6B proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
SourceSize= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_4]
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [edi+14h], ebx
jnb     short loc_10001A83
call    sub_1000B15A

loc_10001A83:
mov     eax, [edi+14h]
sub     eax, ebx
mov     ebx, [ebp+SourceSize]
cmp     eax, ebx
jnb     short loc_10001A94
mov     ebx, eax
mov     [ebp+SourceSize], ebx

loc_10001A94:
or      eax, 0FFFFFFFFh
sub     eax, [esi+14h]
cmp     eax, ebx
jbe     short loc_10001AA8
mov     eax, [esi+14h]
lea     ecx, [eax+ebx]
cmp     ecx, eax
jnb     short loc_10001AAD

loc_10001AA8:
call    sub_1000B122

loc_10001AAD:
test    ebx, ebx
jbe     short loc_10001B09
mov     eax, [esi+14h]
add     eax, ebx
push    0
push    eax
mov     ecx, esi
mov     [ebp+arg_0], eax
call    sub_100018E9
test    al, al
jz      short loc_10001B09
cmp     dword ptr [edi+18h], 10h
jb      short loc_10001AD2
mov     edi, [edi+4]
jmp     short loc_10001AD5

loc_10001AD2:
add     edi, 4

loc_10001AD5:
mov     eax, [esi+18h]
cmp     eax, 10h
jb      short loc_10001AE2
mov     edx, [esi+4]
jmp     short loc_10001AE5

loc_10001AE2:
lea     edx, [esi+4]

loc_10001AE5:           ; SourceSize
push    [ebp+SourceSize]
mov     ecx, [esi+14h]
mov     ebx, [ebp+arg_4]
add     edi, ebx
sub     eax, ecx
push    edi             ; Source
push    eax             ; DestinationSize
add     ecx, edx
push    ecx             ; Destination
call    ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ; std::char_traits<char>::_Copy_s(char *,uint,char const *,uint)
add     esp, 10h
push    [ebp+arg_0]
mov     ecx, esi
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)

loc_10001B09:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch
sub_10001A6B endp



; Attributes: bp-based frame

sub_10001B12 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_4]
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     ebx, ecx
cmp     [edi+14h], eax
jnb     short loc_10001B2A
call    sub_1000B15A

loc_10001B2A:
mov     esi, [edi+14h]
mov     eax, [ebp+arg_4]
sub     esi, eax
cmp     [ebp+arg_8], esi
jnb     short loc_10001B3A
mov     esi, [ebp+arg_8]

loc_10001B3A:
mov     ecx, ebx
cmp     ebx, edi
jnz     short loc_10001B58
push    0FFFFFFFFh
add     esi, eax
push    esi
call    sub_100015D7
push    [ebp+arg_4]
mov     ecx, ebx
push    0
call    sub_100015D7
jmp     short loc_10001B9B

loc_10001B58:
push    0
push    esi
call    sub_100018E9
test    al, al
jz      short loc_10001B9B
cmp     dword ptr [edi+18h], 10h
jb      short loc_10001B6F
mov     edi, [edi+4]
jmp     short loc_10001B72

loc_10001B6F:
add     edi, 4

loc_10001B72:
mov     ecx, [ebx+18h]
cmp     ecx, 10h
jb      short loc_10001B7F
mov     eax, [ebx+4]
jmp     short loc_10001B82

loc_10001B7F:
lea     eax, [ebx+4]

loc_10001B82:
mov     edx, [ebp+arg_4]
push    esi             ; SourceSize
add     edi, edx
push    edi             ; Source
push    ecx             ; DestinationSize
push    eax             ; Destination
call    ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ; std::char_traits<char>::_Copy_s(char *,uint,char const *,uint)
add     esp, 10h
push    esi
mov     ecx, ebx
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)

loc_10001B9B:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
pop     ebp
retn    0Ch
sub_10001B12 endp



; Attributes: bp-based frame

sub_10001BA4 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_4]
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     ebx, ecx
cmp     [edi+14h], eax
jnb     short loc_10001BBC
call    sub_1000B15A

loc_10001BBC:
mov     esi, [edi+14h]
mov     eax, [ebp+arg_4]
sub     esi, eax
cmp     [ebp+arg_8], esi
jnb     short loc_10001BCC
mov     esi, [ebp+arg_8]

loc_10001BCC:
mov     ecx, ebx
cmp     ebx, edi
jnz     short loc_10001BEA
push    0FFFFFFFFh
add     esi, eax
push    esi
call    sub_10001646
push    [ebp+arg_4]
mov     ecx, ebx
push    0
call    sub_10001646
jmp     short loc_10001C2E

loc_10001BEA:
push    0
push    esi
call    sub_10001947
test    al, al
jz      short loc_10001C2E
cmp     dword ptr [edi+18h], 8
jb      short loc_10001C01
mov     edi, [edi+4]
jmp     short loc_10001C04

loc_10001C01:
add     edi, 4

loc_10001C04:
mov     ecx, [ebx+18h]
cmp     ecx, 8
jb      short loc_10001C11
mov     eax, [ebx+4]
jmp     short loc_10001C14

loc_10001C11:
lea     eax, [ebx+4]

loc_10001C14:
mov     edx, [ebp+arg_4]
push    esi             ; N
lea     edx, [edi+edx*2]
push    edx             ; S2
push    ecx             ; N1
push    eax             ; S1
call    unknown_libname_8 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h
push    esi
mov     ecx, ebx
call    sub_100014BD

loc_10001C2E:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
pop     ebp
retn    0Ch
sub_10001BA4 endp



; Attributes: bp-based frame

; int __stdcall sub_10001C37(int, int, rsize_t N)
sub_10001C37 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
N= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_4]
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [edi+14h], ebx
jnb     short loc_10001C4F
call    sub_1000B15A

loc_10001C4F:
mov     eax, [edi+14h]
sub     eax, ebx
mov     ebx, [ebp+N]
cmp     eax, ebx
jnb     short loc_10001C60
mov     ebx, eax
mov     [ebp+N], ebx

loc_10001C60:
or      eax, 0FFFFFFFFh
sub     eax, [esi+14h]
cmp     eax, ebx
jbe     short loc_10001C74
mov     eax, [esi+14h]
lea     ecx, [eax+ebx]
cmp     ecx, eax
jnb     short loc_10001C79

loc_10001C74:
call    sub_1000B122

loc_10001C79:
test    ebx, ebx
jbe     short loc_10001CD7
mov     eax, [esi+14h]
add     eax, ebx
push    0
push    eax
mov     ecx, esi
mov     [ebp+arg_0], eax
call    sub_10001947
test    al, al
jz      short loc_10001CD7
cmp     dword ptr [edi+18h], 8
jb      short loc_10001C9E
mov     edi, [edi+4]
jmp     short loc_10001CA1

loc_10001C9E:
add     edi, 4

loc_10001CA1:
mov     eax, [esi+18h]
cmp     eax, 8
jb      short loc_10001CAE
mov     edx, [esi+4]
jmp     short loc_10001CB1

loc_10001CAE:
lea     edx, [esi+4]

loc_10001CB1:           ; N
push    [ebp+N]
mov     ecx, [esi+14h]
mov     ebx, [ebp+arg_4]
lea     edi, [edi+ebx*2]
sub     eax, ecx
push    edi             ; S2
push    eax             ; N1
lea     eax, [edx+ecx*2]
push    eax             ; S1
call    unknown_libname_8 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h
push    [ebp+arg_0]
mov     ecx, esi
call    sub_100014BD

loc_10001CD7:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch
sub_10001C37 endp



; Attributes: bp-based frame

; int __thiscall sub_10001CE0(int, wchar_t *S2, rsize_t N)
sub_10001CE0 proc near

S2= dword ptr  8
N= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+S2]
push    edi
mov     esi, ecx
call    sub_1000126D
test    al, al
jz      short loc_10001D14
cmp     dword ptr [esi+18h], 8
jb      short loc_10001CFF
mov     eax, [esi+4]
jmp     short loc_10001D02

loc_10001CFF:
lea     eax, [esi+4]

loc_10001D02:           ; N
push    [ebp+N]
sub     edi, eax
sar     edi, 1
push    edi             ; int
push    esi             ; int
mov     ecx, esi
call    sub_10001C37
jmp     short loc_10001D79

loc_10001D14:
or      eax, 0FFFFFFFFh
sub     eax, [esi+14h]
push    ebx
mov     ebx, [ebp+N]
cmp     eax, ebx
jbe     short loc_10001D2C
mov     eax, [esi+14h]
lea     ecx, [eax+ebx]
cmp     ecx, eax
jnb     short loc_10001D31

loc_10001D2C:
call    sub_1000B122

loc_10001D31:
test    ebx, ebx
jbe     short loc_10001D76
mov     edi, [esi+14h]
push    0
add     edi, ebx
push    edi
mov     ecx, esi
call    sub_10001947
test    al, al
jz      short loc_10001D76
mov     eax, [esi+18h]
cmp     eax, 8
jb      short loc_10001D55
mov     edx, [esi+4]
jmp     short loc_10001D58

loc_10001D55:
lea     edx, [esi+4]

loc_10001D58:
mov     ecx, [esi+14h]
push    ebx             ; N
push    [ebp+S2]        ; S2
sub     eax, ecx
push    eax             ; N1
lea     eax, [edx+ecx*2]
push    eax             ; S1
call    unknown_libname_8 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h
push    edi
mov     ecx, esi
call    sub_100014BD

loc_10001D76:
mov     eax, esi
pop     ebx

loc_10001D79:
pop     edi
pop     esi
pop     ebp
retn    8
sub_10001CE0 endp

; [00000074 BYTES: COLLAPSED FUNCTION std::wstring::assign(wchar_t const *,uint)]


; Attributes: bp-based frame

sub_10001DF3 proc near

var_8= byte ptr -8
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    esi
push    edi
lea     eax, [ebp+var_8]
push    eax
mov     esi, ecx
call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::string::begin(void)
push    dword ptr [eax+4]
push    dword ptr [eax]
push    [ebp+arg_8]
push    [ebp+arg_4]
call    sub_100014DB
add     esp, 10h
mov     edi, eax
push    1
push    edi
mov     ecx, esi
call    sub_100015D7
cmp     dword ptr [esi+18h], 10h
jb      short loc_10001E2F
mov     eax, [esi+4]
jmp     short loc_10001E32

loc_10001E2F:
lea     eax, [esi+4]

loc_10001E32:
mov     ecx, [ebp+arg_0]
push    esi
add     eax, edi
push    eax
call    sub_100014F2
mov     eax, [ebp+arg_0]
pop     edi
pop     esi
leave
retn    0Ch
sub_10001DF3 endp

; [0000009C BYTES: COLLAPSED FUNCTION std::string::append(char const *,uint)]
; [00000026 BYTES: COLLAPSED FUNCTION std::string::string(std::string const &)]
; [0000001D BYTES: COLLAPSED FUNCTION std::wstring::assign(wchar_t const *)]
; [0000001D BYTES: COLLAPSED FUNCTION std::wstring::assign(wchar_t const *)]


; Attributes: bp-based frame

sub_10001F43 proc near

var_20= byte ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019300 SIZE 00000034 BYTES

; __unwind { // loc_10019319
push    14h
mov     eax, offset loc_10019319
call    __EH_prolog3
mov     [ebp+var_1C], ecx
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
mov     ecx, [ebp+arg_0]
mov     edi, [ebp+arg_4]
mov     [ebp+var_10], ecx
mov     [ebp+var_18], ebx
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::string::string(void)
;   } // starts at 10001F54
;   try {
mov     [ebp+var_4], ebx
mov     eax, [edi+14h]
mov     [ebp+var_18], 1
cmp     eax, ebx
jz      short loc_10001FCD
mov     [ebp+var_14], 7
jbe     short loc_10001FCD

loc_10001F82:
mov     esi, ebx
push    ebx
mov     ecx, edi
and     esi, 7
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     ecx, [ebp+var_1C]
movsx   ecx, byte ptr [esi+ecx]
movzx   eax, byte ptr [eax]
add     ecx, ebx
imul    ecx, [ebp+var_14]
push    ecx
push    eax
call    sub_10001022
pop     ecx
pop     ecx
mov     ecx, [ebp+var_10]
mov     [ebp+var_20], al
push    dword ptr [ebp+var_20] ; char
push    1               ; Size
call    sub_10001A1D
mov     ecx, [ebp+var_10]
push    ebx
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
movsx   eax, byte ptr [eax]
inc     ebx
mov     [ebp+var_14], eax
cmp     ebx, [edi+14h]
jb      short loc_10001F82

loc_10001FCD:
mov     eax, [ebp+var_10]
call    __EH_epilog3
retn    8
;   } // starts at 10001F68
; } // starts at 10001F43
sub_10001F43 endp



; Attributes: bp-based frame

sub_10001FD8 proc near

var_20= byte ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019334 SIZE 00000034 BYTES

; __unwind { // loc_1001934D
push    14h
mov     eax, offset loc_1001934D
call    __EH_prolog3
mov     [ebp+var_1C], ecx
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
mov     ecx, [ebp+arg_0]
mov     edi, [ebp+arg_4]
mov     [ebp+var_14], ecx
mov     [ebp+var_18], ebx
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::string::string(void)
;   } // starts at 10001FE9
;   try {
mov     [ebp+var_4], ebx
mov     eax, [edi+14h]
mov     [ebp+var_18], 1
cmp     eax, ebx
jz      short loc_10002061
mov     [ebp+var_10], 7
jbe     short loc_10002061

loc_10002017:
mov     esi, ebx
push    ebx
mov     ecx, edi
and     esi, 7
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     ecx, [ebp+var_1C]
movsx   ecx, byte ptr [esi+ecx]
movzx   eax, byte ptr [eax]
add     ecx, ebx
imul    ecx, [ebp+var_10]
push    ecx
push    eax
call    sub_10001044
pop     ecx
pop     ecx
mov     ecx, [ebp+var_14]
mov     [ebp+var_20], al
push    dword ptr [ebp+var_20] ; char
push    1               ; Size
call    sub_10001A1D
push    ebx
mov     ecx, edi
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
movsx   eax, byte ptr [eax]
inc     ebx
mov     [ebp+var_10], eax
cmp     ebx, [edi+14h]
jb      short loc_10002017

loc_10002061:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn    8
;   } // starts at 10001FFD
; } // starts at 10001FD8
sub_10001FD8 endp



; Attributes: bp-based frame

sub_1000206C proc near

var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= byte ptr -14h
Buffer= byte ptr -10h
var_F= byte ptr -0Fh
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019368 SIZE 00000034 BYTES

; __unwind { // loc_10019381
push    10h
mov     eax, offset loc_10019381
call    __EH_prolog3
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
mov     ecx, [ebp+arg_0]
mov     esi, [ebp+arg_4]
mov     [ebp+var_18], ecx
mov     [ebp+var_1C], ebx
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::string::string(void)
;   } // starts at 1000207A
;   try {
mov     [ebp+var_4], ebx
mov     [ebp+var_1C], 1
cmp     [esi+14h], ebx
jz      short loc_10002102
push    3               ; Size
lea     eax, [ebp+Buffer]
push    ebx             ; Val
push    eax             ; void *
mov     dword ptr [ebp+var_14], ebx
call    _memset
add     esp, 0Ch
test    dword ptr [esi+14h], 0FFFFFFFEh
jbe     short loc_10002102

loc_100020B8:
lea     edi, [ebx+ebx]
push    edi
mov     ecx, esi
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     al, [eax]
inc     edi
push    edi
mov     ecx, esi
mov     [ebp+Buffer], al
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     al, [eax]
mov     [ebp+var_F], al
lea     eax, [ebp+var_14]
push    eax
lea     eax, [ebp+Buffer]
push    offset Format   ; "%02x"
push    eax             ; Buffer
call    _sscanf_s
mov     ecx, [ebp+var_18]
add     esp, 0Ch
push    dword ptr [ebp+var_14] ; char
push    1               ; Size
call    sub_10001A1D
mov     eax, [esi+14h]
inc     ebx
shr     eax, 1
cmp     ebx, eax
jb      short loc_100020B8

loc_10002102:
mov     eax, [ebp+var_18]
call    __EH_epilog3
retn    8
;   } // starts at 1000208E
; } // starts at 1000206C
sub_1000206C endp



; Attributes: bp-based frame

sub_1000210D proc near

var_10= byte ptr -10h
var_8= byte ptr -8
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 10h
push    esi
mov     esi, [ebp+arg_0]
xor     eax, eax
cmp     [esi+14h], eax
jz      short loc_10002152
jmp     short loc_10002141

loc_10002120:
cmp     dword ptr [esi+14h], 0
jz      short loc_1000214F
lea     eax, [ebp+var_8]
push    eax
mov     ecx, esi
call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::string::begin(void)
push    dword ptr [eax+4]
mov     ecx, esi
push    dword ptr [eax]
lea     eax, [ebp+var_10]
push    eax
call    sub_10001DF3

loc_10002141:
push    0
mov     ecx, esi
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
cmp     byte ptr [eax], 20h ; ' '
jz      short loc_10002120

loc_1000214F:
xor     eax, eax
inc     eax

loc_10002152:
pop     esi
leave
retn    4
sub_1000210D endp



; Attributes: bp-based frame

sub_10002157 proc near

var_18= byte ptr -18h
var_10= byte ptr -10h
var_8= byte ptr -8
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 18h
push    esi
mov     esi, [ebp+arg_0]
mov     ecx, [esi+14h]
xor     eax, eax
test    ecx, ecx
jz      short loc_100021B0
dec     ecx
push    ecx
jmp     short loc_100021A1

loc_1000216E:
cmp     dword ptr [esi+14h], 0
jz      short loc_100021AD
push    1
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_10]
push    eax
mov     ecx, esi
call    ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::string::end(void)
mov     ecx, eax
call    sub_100019ED
push    dword ptr [eax+4]
mov     ecx, esi
push    dword ptr [eax]
lea     eax, [ebp+var_18]
push    eax
call    sub_10001DF3
mov     eax, [esi+14h]
dec     eax
push    eax

loc_100021A1:
mov     ecx, esi
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
cmp     byte ptr [eax], 20h ; ' '
jz      short loc_1000216E

loc_100021AD:
xor     eax, eax
inc     eax

loc_100021B0:
pop     esi
leave
retn    4
sub_10002157 endp

; [0000001D BYTES: COLLAPSED FUNCTION std::string::assign(char const *)]



sub_100021D2 proc near

arg_0= dword ptr  4

push    esi
push    edi
push    [esp+8+arg_0]
mov     esi, ecx
xor     edi, edi
call    sub_1000210D
cmp     eax, 1
jnz     short loc_100021F7
push    [esp+8+arg_0]
mov     ecx, esi
call    sub_10002157
cmp     eax, 1
jnz     short loc_100021F7
inc     edi

loc_100021F7:
mov     eax, edi
pop     edi
pop     esi
retn    4
sub_100021D2 endp



; Attributes: bp-based frame

; int __stdcall sub_100021FE(int, int, int Value)
sub_100021FE proc near

var_5C= dword ptr -5Ch
var_58= dword ptr -58h
Buffer= word ptr -54h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
Value= dword ptr  10h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001939C SIZE 00000038 BYTES

; __unwind { // loc_100193AF
push    50h
mov     eax, offset loc_100193AF
call    __EH_prolog3_catch_GS
mov     edi, ecx
mov     [ebp+var_58], edi
mov     ebx, [ebp+arg_0]
mov     eax, [ebp+arg_4]
mov     [ebp+var_5C], eax
call    sub_1000B19D
;   try {
and     [ebp+var_4], 0
mov     dword ptr [edi], offset off_1001B29C
lea     esi, [edi+0Ch]
mov     ecx, esi
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 1000221D
;   try {
mov     byte ptr [ebp+var_4], 1
;   } // starts at 10002231
;   try {
mov     byte ptr [ebp+var_4], 2
push    offset aMessage ; "Message: "
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
mov     ebx, [ebx]
mov     ecx, esi        ; int
test    ebx, ebx
jz      short loc_10002250
push    ebx
jmp     short loc_10002255

loc_10002250:
push    offset aEmptyMessage ; "empty message"

loc_10002255:
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
mov     ebx, offset asc_1001B264 ; " "
push    ebx             ; String
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
push    offset aFile    ; "File: "
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
mov     eax, [ebp+var_5C]
mov     eax, [eax]
mov     ecx, esi        ; int
test    eax, eax
jz      short loc_10002281
push    eax
jmp     short loc_10002286

loc_10002281:
push    offset aUnknownFile ; "unknown file"

loc_10002286:
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
push    ebx             ; String
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
push    offset aLine    ; "Line: "
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
xor     eax, eax
mov     [ebp+Buffer], ax
push    0Ah             ; Radix
push    20h ; ' '       ; BufferCount
lea     eax, [ebp+Buffer]
push    eax             ; Buffer
push    [ebp+Value]     ; Value
call    __itow_s
add     esp, 10h
mov     ecx, esi        ; int
test    eax, eax
jnz     short loc_100022C4
lea     eax, [ebp+Buffer]
push    eax
jmp     short loc_100022C9

loc_100022C4:
push    offset aUnknownLine ; "unknown line"

loc_100022C9:
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
;   } // starts at 10002235
;   try {
mov     [ebp+var_4], 1
jmp     short loc_100022F7

loc_100022D7:
;   catch(...) // owned by 10002235
push    offset aExceptionInCon ; "Exception in constructor"
mov     ecx, [ebp+var_58]
add     ecx, 0Ch
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
;   } // starts at 100022CE
;   try {
mov     [ebp+var_4], 1
mov     eax, offset loc_100022F4
retn

loc_100022F4:
mov     edi, [ebp+var_58]
;   } // starts at 100022E7

loc_100022F7:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, edi
call    __EH_epilog3_catch_GS
retn    0Ch
; } // starts at 100021FE
sub_100021FE endp




sub_10002305 proc near
mov     eax, offset aPleaseUseWhatW ; "Please use \"what_w\" member function i"...
retn
sub_10002305 endp




sub_1000230B proc near
cmp     dword ptr [ecx+24h], 8
jb      short loc_10002315
mov     eax, [ecx+10h]
retn

loc_10002315:
lea     eax, [ecx+10h]
retn
sub_1000230B endp



; Attributes: bp-based frame

sub_10002319 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100193D4 SIZE 0000002E BYTES

; __unwind { // loc_100193E7
push    4
mov     eax, offset loc_100193E7
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001B29C
;   try {
and     [ebp+var_4], 0
push    0               ; N
push    1               ; char
lea     ecx, [esi+0Ch]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10002330
or      [ebp+var_4], 0FFFFFFFFh
mov     ecx, esi
call    sub_1000B27B
call    __EH_epilog3
retn
; } // starts at 10002319
sub_10002319 endp


loc_10002351:
push    esi
mov     esi, ecx
call    sub_10002319
test    byte ptr [esp+8], 1
jz      short loc_10002367
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10002367:
mov     eax, esi
pop     esi
retn    4


; Attributes: bp-based frame

sub_1000236D proc near

pExceptionObject= byte ptr -40h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1000119C SIZE 00000007 BYTES
; FUNCTION CHUNK AT 10019402 SIZE 00000023 BYTES

; __unwind { // loc_1001940A
push    34h
mov     eax, offset loc_1001940A
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_18], esi
mov     dword ptr [esi], offset off_1001B1AC
;   try {
and     [ebp+var_4], 0
push    0FA0h           ; dwSpinCount
lea     eax, [esi+4]
push    eax             ; lpCriticalSection
mov     dword ptr [esi], offset off_1001B1C0
call    ds:InitializeCriticalSectionAndSpinCount
test    eax, eax
jnz     short loc_100023CF
push    44h ; 'D'       ; Value
lea     eax, [ebp+var_10]
push    eax             ; int
lea     eax, [ebp+var_14]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+var_10], offset aCommonIncludeC ; "..\\..\\..\\..\\common\\include\\critse"...
mov     [ebp+var_14], offset aCouldNotCreate_5 ; "could not create critical section"
call    sub_100021FE
push    offset stru_1001FF54 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
;   } // starts at 10002384

loc_100023CF:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 1000236D
sub_1000236D endp




sub_100023DB proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
push    esi
mov     esi, ecx
cmp     esi, eax
jz      short loc_100023F6
push    0FFFFFFFFh
push    0
add     eax, 0Ch
push    eax
lea     ecx, [esi+0Ch]
call    sub_10001BA4

loc_100023F6:
mov     eax, esi
pop     esi
retn    4
sub_100023DB endp



; Attributes: bp-based frame

sub_100023FC proc near

var_50= byte ptr -50h
var_34= byte ptr -34h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019425 SIZE 00000044 BYTES

; __unwind { // loc_1001944E
push    44h
mov     eax, offset loc_1001944E
call    __EH_prolog3
xor     esi, esi
;   try {
mov     [ebp+var_4], esi
mov     edi, [ebp+arg_4]
mov     [ebp+var_10], ecx
mov     ecx, [ebp+arg_0]
mov     [ebp+var_14], ecx
mov     [ebp+var_18], esi
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::string::string(void)
;   } // starts at 1000240A
;   try {
mov     [ebp+var_4], esi
xor     ebx, ebx
inc     ebx
mov     [ebp+var_18], ebx
cmp     [edi+14h], esi
jz      short loc_10002482
mov     ecx, [ebp+var_10]
push    edi
lea     eax, [ebp+var_50]
push    eax
call    sub_1000206C
;   } // starts at 10002421
;   try {
mov     [ebp+var_4], ebx
mov     ecx, [ebp+var_10]
push    eax
lea     eax, [ebp+var_34]
push    eax
call    sub_10001FD8
;   } // starts at 1000243C
;   try {
mov     byte ptr [ebp+var_4], 2
mov     ecx, [ebp+var_14]
push    0FFFFFFFFh
push    esi
push    eax
call    sub_10001B12
;   } // starts at 1000244C
;   try {
mov     byte ptr [ebp+var_4], bl
push    esi             ; SourceSize
push    ebx             ; char
lea     ecx, [ebp+var_34]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
;   } // starts at 1000245C
;   try {
mov     byte ptr [ebp+var_4], 0
push    esi             ; SourceSize
push    ebx             ; char
lea     ecx, [ebp+var_50]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
push    [ebp+var_14]
mov     ecx, [ebp+var_10]
call    sub_100021D2

loc_10002482:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn    8
;   } // starts at 10002469
; } // starts at 100023FC
sub_100023FC endp



; Attributes: bp-based frame

sub_1000248D proc near

var_18= dword ptr -18h
var_14= dword ptr -14h
Buffer= byte ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019469 SIZE 00000034 BYTES

; __unwind { // loc_10019482
push    0Ch
mov     eax, offset loc_10019482
call    __EH_prolog3
xor     edi, edi
;   try {
mov     [ebp+var_4], edi
mov     ebx, [ebp+arg_0]
mov     esi, [ebp+arg_4]
mov     ecx, ebx
mov     [ebp+var_18], ebx
mov     [ebp+var_14], edi
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::string::string(void)
;   } // starts at 1000249B
;   try {
mov     [ebp+var_4], edi
mov     [ebp+var_14], 1
cmp     [esi+14h], edi
jz      short loc_10002504
push    3               ; Size
lea     eax, [ebp+Buffer]
push    edi             ; Val
push    eax             ; void *
call    _memset
add     esp, 0Ch
cmp     [esi+14h], edi
jbe     short loc_10002504

loc_100024D4:
push    edi
mov     ecx, esi
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
movzx   eax, byte ptr [eax]
push    eax
push    offset Format   ; "%02x"
lea     eax, [ebp+Buffer]
push    3               ; BufferCount
push    eax             ; Buffer
call    _sprintf_s
add     esp, 10h
lea     eax, [ebp+Buffer]
push    eax             ; Str
mov     ecx, ebx        ; int
call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::string::assign(char const *)
inc     edi
cmp     edi, [esi+14h]
jb      short loc_100024D4

loc_10002504:
mov     eax, ebx
call    __EH_epilog3
retn    8
;   } // starts at 100024B1
; } // starts at 1000248D
sub_1000248D endp



; Attributes: bp-based frame

sub_1000250E proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001949D SIZE 0000002E BYTES

; __unwind { // loc_100194B0
push    8
mov     eax, offset loc_100194B0
call    __EH_prolog3_catch
mov     esi, ecx
mov     [ebp+var_14], esi
call    sub_1000B19D
;   try {
and     [ebp+var_4], 0
mov     dword ptr [esi], offset off_1001B29C
lea     ecx, [esi+0Ch]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 10002524
;   try {
mov     byte ptr [ebp+var_4], 1
;   } // starts at 10002536
;   try {
mov     byte ptr [ebp+var_4], 2
push    [ebp+arg_0]
mov     ecx, esi
call    sub_100023DB
;   } // starts at 1000253A
;   try {
mov     [ebp+var_4], 1
jmp     short loc_10002571

loc_10002551:
;   catch(...) // owned by 1000253A
push    offset aExceptionInCon ; "Exception in constructor"
mov     ecx, [ebp+var_14]
add     ecx, 0Ch
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
;   } // starts at 10002548
;   try {
mov     [ebp+var_4], 1
mov     eax, offset loc_1000256E
retn

loc_1000256E:
mov     esi, [ebp+var_14]
;   } // starts at 10002561

loc_10002571:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 1000250E
sub_1000250E endp



; Attributes: bp-based frame

sub_1000257F proc near

var_70= byte ptr -70h
var_54= byte ptr -54h
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_18= dword ptr -18h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100194CB SIZE 00000066 BYTES

; __unwind { // loc_1001950C
push    64h
mov     eax, offset loc_1001950C
call    __EH_prolog3_GS
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
mov     edi, [ebp+arg_4]
mov     [ebp+var_30], ecx
mov     ecx, [ebp+arg_0]
mov     [ebp+var_34], ecx
mov     [ebp+var_38], ebx
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::string::string(void)
;   } // starts at 1000258D
;   try {
mov     [ebp+var_4], ebx
mov     eax, [edi+14h]
xor     esi, esi
inc     esi
mov     [ebp+var_38], esi
cmp     eax, ebx
jz      loc_1000267C
push    edi
cmp     eax, 10h
jnb     short loc_10002631
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
;   } // starts at 100025A4
;   try {
mov     [ebp+var_4], esi
jmp     short loc_100025D6

loc_100025CB:           ; char
push    20h ; ' '
push    esi             ; Size
lea     ecx, [ebp+var_2C]
call    sub_10001A1D

loc_100025D6:
cmp     [ebp+var_18], 10h
jb      short loc_100025CB
mov     ecx, [ebp+var_30]
lea     eax, [ebp+var_2C]
push    eax
lea     eax, [ebp+var_70]
push    eax
call    sub_10001F43
;   } // starts at 100025C6
;   try {
mov     byte ptr [ebp+var_4], 2
mov     ecx, [ebp+var_30]
push    eax
lea     eax, [ebp+var_54]
push    eax
call    sub_1000248D
;   } // starts at 100025EC
;   try {
mov     byte ptr [ebp+var_4], 3
mov     ecx, [ebp+var_34]
push    0FFFFFFFFh
push    ebx
push    eax
call    sub_10001B12
;   } // starts at 100025FD
;   try {
mov     byte ptr [ebp+var_4], 2
push    ebx             ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_54]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
;   } // starts at 1000260D
;   try {
mov     byte ptr [ebp+var_4], 1
push    ebx             ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_70]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
;   } // starts at 1000261B
;   try {
mov     byte ptr [ebp+var_4], bl
lea     ecx, [ebp+var_2C]
jmp     short loc_10002675

loc_10002631:
mov     ecx, [ebp+var_30]
lea     eax, [ebp+var_54]
push    eax
call    sub_10001F43
;   } // starts at 10002629
;   try {
mov     [ebp+var_4], 4
mov     ecx, [ebp+var_30]
push    eax
lea     eax, [ebp+var_70]
push    eax
call    sub_1000248D
;   } // starts at 1000263D
;   try {
mov     byte ptr [ebp+var_4], 5
mov     ecx, [ebp+var_34]
push    0FFFFFFFFh
push    ebx
push    eax
call    sub_10001B12
;   } // starts at 10002651
;   try {
mov     byte ptr [ebp+var_4], 4
push    ebx             ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_70]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
;   } // starts at 10002661
;   try {
mov     byte ptr [ebp+var_4], bl
lea     ecx, [ebp+var_54]

loc_10002675:           ; SourceSize
push    ebx
push    esi             ; char
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)

loc_1000267C:
mov     eax, [ebp+var_34]
call    __EH_epilog3_GS
retn    8
;   } // starts at 1000266F
; } // starts at 1000257F
sub_1000257F endp




sub_10002687 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
mov     esi, [esp+4+arg_0]
push    edi
shl     esi, 2
push    esi             ; cb
call    ds:CoTaskMemAlloc
mov     edi, eax
test    edi, edi
jz      short loc_100026B0
cmp     [esp+8+arg_4], 1
jnz     short loc_100026B0
push    esi             ; Size
push    0               ; Val
push    edi             ; void *
call    _memset
add     esp, 0Ch

loc_100026B0:
mov     eax, edi
pop     edi
pop     esi
retn
sub_10002687 endp




sub_100026B5 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+74h]
retn
sub_100026B5 endp




sub_100026CD proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+8Ch]
retn
sub_100026CD endp




sub_100026E8 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+98h]
retn
sub_100026E8 endp




sub_10002703 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+0A4h]
retn
sub_10002703 endp




sub_1000271E proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+0C8h]
retn
sub_1000271E endp




sub_10002739 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+0F8h]
retn
sub_10002739 endp




sub_10002754 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch
arg_C= byte ptr  10h

mov     eax, [esp+arg_0]
mov     ecx, [eax]
lea     edx, [esp+arg_C]
push    edx
push    [esp+4+arg_8]
push    [esp+8+arg_4]
push    eax
call    dword ptr [ecx+1CCh]
retn
sub_10002754 endp



; Attributes: bp-based frame

sub_1000276F proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019531 SIZE 00000026 BYTES

; __unwind { // loc_1001953C
push    4
mov     eax, offset loc_1001953C
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_1001B3A4
or      [ebp+var_4], 0FFFFFFFFh
add     ecx, 8
call    sub_100011C0
call    __EH_epilog3
retn
; } // starts at 1000276F
sub_1000276F endp



; Attributes: bp-based frame

; int __stdcall sub_10002796(LPCWCH lpWideCharStr)
sub_10002796 proc near

var_4= dword ptr -4
lpWideCharStr= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    ebx
xor     ebx, ebx
mov     [ebp+var_4], ecx
mov     [ecx], ebx
cmp     [ebp+lpWideCharStr], ebx
jz      short loc_100027E8
push    esi
mov     esi, ds:WideCharToMultiByte
push    edi
push    ebx             ; lpUsedDefaultChar
push    ebx             ; lpDefaultChar
push    ebx             ; cbMultiByte
push    ebx             ; lpMultiByteStr
push    0FFFFFFFFh      ; cchWideChar
push    [ebp+lpWideCharStr] ; lpWideCharStr
push    ebx             ; dwFlags
push    ebx             ; CodePage
call    esi ; WideCharToMultiByte
mov     edi, eax
lea     eax, [edi+1]
push    eax             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
pop     ecx
mov     ecx, [ebp+var_4]
mov     [ecx], eax
cmp     eax, ebx
jz      short loc_100027E6
push    ebx             ; lpUsedDefaultChar
push    ebx             ; lpDefaultChar
push    edi             ; cbMultiByte
push    eax             ; lpMultiByteStr
push    0FFFFFFFFh      ; cchWideChar
push    [ebp+lpWideCharStr] ; lpWideCharStr
push    ebx             ; dwFlags
push    ebx             ; CodePage
call    esi ; WideCharToMultiByte
mov     eax, [ebp+var_4]
mov     eax, [eax]
mov     [edi+eax], bl

loc_100027E6:
pop     edi
pop     esi

loc_100027E8:
mov     eax, [ebp+var_4]
pop     ebx
leave
retn    4
sub_10002796 endp

; START OF FUNCTION CHUNK FOR sub_10005292

loc_100027F0:
; __unwind { // loc_100196B4
mov     eax, [ecx]
test    eax, eax
jz      short locret_100027FD
push    eax             ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

locret_100027FD:
retn
; } // starts at 100027F0
; END OF FUNCTION CHUNK FOR sub_10005292

loc_100027FE:
push    esi
mov     esi, ecx
call    sub_1000276F
test    byte ptr [esp+8], 1
jz      short loc_10002814
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10002814:
mov     eax, esi
pop     esi
retn    4



sub_1000281A proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
test    eax, eax
jz      short loc_1000282C
mov     [ecx+4], eax
mov     eax, 10002h
jmp     short locret_10002833

loc_1000282C:
and     dword ptr [ecx+4], 0
or      eax, 0FFFFFFFFh

locret_10002833:
retn    4
sub_1000281A endp

; Exported entry   2. ??1CSecurity@@UAE@XZ



; void __thiscall CSecurity::~CSecurity(CSecurity *__hidden this)
public ??1CSecurity@@UAE@XZ
??1CSecurity@@UAE@XZ proc near
mov     dword ptr [ecx], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
retn
??1CSecurity@@UAE@XZ endp




; int __thiscall sub_1000283D(void *, char)
sub_1000283D proc near

arg_0= byte ptr  4

push    ebx
mov     bl, [esp+4+arg_0]
push    esi
mov     esi, ecx
test    bl, 2
jz      short loc_1000286E
push    edi
push    offset ??1CSecurity@@UAE@XZ ; void (__thiscall *)(void *)
lea     edi, [esi-4]
push    dword ptr [edi] ; int
push    4               ; unsigned int
push    esi             ; void *
call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
test    bl, 1
jz      short loc_10002869
push    edi             ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

loc_10002869:
mov     eax, edi
pop     edi
jmp     short loc_10002882

loc_1000286E:
mov     dword ptr [esi], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
test    bl, 1
jz      short loc_10002880
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10002880:
mov     eax, esi

loc_10002882:
pop     esi
pop     ebx
retn    4
sub_1000283D endp




; int __cdecl sub_10002887(LPVOID pv)
sub_10002887 proc near

pv= dword ptr  4

cmp     [esp+pv], 0
jz      short loc_10002898
push    [esp+pv]        ; pv
call    ds:CoTaskMemFree

loc_10002898:
xor     eax, eax
retn
sub_10002887 endp




sub_1000289B proc near
push    esi
mov     esi, ecx
mov     eax, [esi]
test    eax, eax
jnz     short loc_100028AF
call    __invalid_parameter_noinfo
mov     eax, [esi]
test    eax, eax
jz      short loc_100028B3

loc_100028AF:
mov     eax, [eax]
jmp     short loc_100028B5

loc_100028B3:
xor     eax, eax

loc_100028B5:
mov     ecx, [esi+4]
cmp     ecx, [eax+14h]
jnz     short loc_100028C2
call    __invalid_parameter_noinfo

loc_100028C2:
mov     eax, [esi+4]
mov     eax, [eax]
mov     [esi+4], eax
mov     eax, esi
pop     esi
retn
sub_1000289B endp




sub_100028CE proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
mov     esi, [esp+4+arg_0]
push    edi
add     esi, esi
push    esi             ; cb
call    ds:CoTaskMemAlloc
mov     edi, eax
test    edi, edi
jz      short loc_100028F6
cmp     [esp+8+arg_4], 1
jnz     short loc_100028F6
push    esi             ; Size
push    0               ; Val
push    edi             ; void *
call    _memset
add     esp, 0Ch

loc_100028F6:
mov     eax, edi
pop     edi
pop     esi
retn
sub_100028CE endp




sub_100028FB proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
mov     esi, [esp+4+arg_0]
imul    esi, 2CAh
push    edi
push    esi             ; cb
call    ds:CoTaskMemAlloc
mov     edi, eax
test    edi, edi
jz      short loc_10002927
cmp     [esp+8+arg_4], 1
jnz     short loc_10002927
push    esi             ; Size
push    0               ; Val
push    edi             ; void *
call    _memset
add     esp, 0Ch

loc_10002927:
mov     eax, edi
pop     edi
pop     esi
retn
sub_100028FB endp



; Attributes: bp-based frame

sub_1000292C proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019557 SIZE 00000023 BYTES

; __unwind { // loc_1001955F
push    4
mov     eax, offset loc_1001955F
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_1001B3F4
or      [ebp+var_4], 0FFFFFFFFh
call    sub_1000276F
call    __EH_epilog3
retn
; } // starts at 1000292C
sub_1000292C endp



; Attributes: thunk

sub_10002950 proc near
jmp     sub_1000281A
sub_10002950 endp




sub_10002955 proc near

arg_0= dword ptr  4

push    esi
push    edi
mov     edi, ecx
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [edi+24h]
test    eax, eax
jnz     short loc_1000298F
call    sub_1000687F
test    eax, eax
jz      short loc_10002988
push    offset aInvalidJavaCal ; "Invalid java callback object"
push    126h

loc_1000297A:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002988:
xor     eax, eax
jmp     loc_10002A92

loc_1000298F:
mov     ecx, [esi]
push    eax
push    esi
call    dword ptr [ecx+7Ch]
test    eax, eax
jnz     short loc_100029AF
call    sub_1000687F
test    eax, eax
jz      short loc_10002988
push    offset aInvalidClassOb ; "Invalid class object"
push    12Eh
jmp     short loc_1000297A

loc_100029AF:
mov     ecx, [esi]
push    ebp
push    offset aLjavaLangExcep ; "(Ljava/lang/Exception;)V"
push    offset aOnexception ; "onException"
push    eax
push    esi
call    dword ptr [ecx+84h]
mov     ebp, eax
test    ebp, ebp
jnz     short loc_100029F2
call    sub_1000687F
test    eax, eax
jz      short loc_100029EB
mov     edx, [eax]
push    offset aInvalidMethodI ; "Invalid method id"
push    136h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100029EB:
xor     eax, eax
jmp     loc_10002A91

loc_100029F2:
mov     eax, [esi]
push    ebx
push    [esp+10h+arg_0]
push    esi
call    dword ptr [eax+18h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10002A18
call    sub_1000687F
test    eax, eax
jz      short loc_10002A75
push    offset aInvalidClassOb ; "Invalid class object"
push    13Eh
jmp     short loc_10002A67

loc_10002A18:
mov     eax, [esi]
push    offset aV       ; "()V"
push    offset aInit    ; "<init>"
push    ebx
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_10002A45
call    sub_1000687F
test    eax, eax
jz      short loc_10002A75
push    offset aInvalidMethodI ; "Invalid method id"
push    146h
jmp     short loc_10002A67

loc_10002A45:
push    eax
push    ebx
push    esi
call    sub_100026B5
add     esp, 0Ch
test    eax, eax
jnz     short loc_10002A79
call    sub_1000687F
test    eax, eax
jz      short loc_10002A75
push    offset aInvalidObject ; "Invalid object"
push    14Eh

loc_10002A67:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002A75:
xor     eax, eax
jmp     short loc_10002A90

loc_10002A79:
push    eax
push    ebp
push    dword ptr [edi+24h]
push    esi
call    sub_100026E8
xor     ecx, ecx
add     esp, 10h
cmp     al, 1
setz    cl
mov     eax, ecx

loc_10002A90:
pop     ebx

loc_10002A91:
pop     ebp

loc_10002A92:
pop     edi
pop     esi
retn    4
sub_10002955 endp




sub_10002A97 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002AD6
call    sub_1000687F
test    eax, eax
jz      short loc_10002ACF
push    offset aInvalidMethodI ; "Invalid method id"
push    1BCh

loc_10002AC1:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002ACF:
xor     eax, eax
jmp     loc_10002BA3

loc_10002AD6:
mov     ecx, [esi]
push    offset aLjavaLangByte ; "()Ljava/lang/Byte;"
push    offset aGetidbyte ; "getIDByte"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002B03
call    sub_1000687F
test    eax, eax
jz      short loc_10002ACF
push    offset aInvalidMethodI ; "Invalid method id"
push    1C4h
jmp     short loc_10002AC1

loc_10002B03:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_10002B2D
call    sub_1000687F
test    eax, eax
jz      short loc_10002B8A
push    offset aInvalidObject ; "Invalid object"
push    1CCh
jmp     short loc_10002B7C

loc_10002B2D:
mov     eax, [esi]
push    offset aJavaLangByte ; "java/lang/Byte"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002B51
call    sub_1000687F
test    eax, eax
jz      short loc_10002B8A
push    offset aInvalidClassOb ; "Invalid class object"
push    1D4h
jmp     short loc_10002B7C

loc_10002B51:
mov     ecx, [esi]
push    offset aB       ; "()B"
push    offset aBytevalue ; "byteValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002B8E
call    sub_1000687F
test    eax, eax
jz      short loc_10002B8A
push    offset aInvalidMethodI ; "Invalid method id"
push    1DCh

loc_10002B7C:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002B8A:
xor     eax, eax
jmp     short loc_10002BA2

loc_10002B8E:
push    eax
push    edi
push    esi
call    sub_10002703
mov     ecx, [esp+14h+arg_4]
mov     [ecx], al
xor     eax, eax
add     esp, 0Ch
inc     eax

loc_10002BA2:
pop     edi

loc_10002BA3:
pop     esi
retn    8
sub_10002A97 endp




sub_10002BA7 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002BE6
call    sub_1000687F
test    eax, eax
jz      short loc_10002BDF
push    offset aInvalidMethodI ; "Invalid method id"
push    1EDh

loc_10002BD1:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002BDF:
xor     eax, eax
jmp     loc_10002CB5

loc_10002BE6:
mov     ecx, [esi]
push    offset aLjavaLangByte ; "()Ljava/lang/Byte;"
push    offset aGetstatus ; "getStatus"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002C13
call    sub_1000687F
test    eax, eax
jz      short loc_10002BDF
push    offset aInvalidMethodI ; "Invalid method id"
push    1F5h
jmp     short loc_10002BD1

loc_10002C13:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_10002C3D
call    sub_1000687F
test    eax, eax
jz      short loc_10002C9A
push    offset aInvalidObject ; "Invalid object"
push    1FDh
jmp     short loc_10002C8C

loc_10002C3D:
mov     eax, [esi]
push    offset aJavaLangByte ; "java/lang/Byte"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002C61
call    sub_1000687F
test    eax, eax
jz      short loc_10002C9A
push    offset aInvalidClassOb ; "Invalid class object"
push    205h
jmp     short loc_10002C8C

loc_10002C61:
mov     ecx, [esi]
push    offset aB       ; "()B"
push    offset aBytevalue ; "byteValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002C9E
call    sub_1000687F
test    eax, eax
jz      short loc_10002C9A
push    offset aInvalidMethodI ; "Invalid method id"
push    20Dh

loc_10002C8C:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002C9A:
xor     eax, eax
jmp     short loc_10002CB4

loc_10002C9E:
push    eax
push    edi
push    esi
call    sub_10002703
mov     eax, [esp+14h+arg_4]
mov     byte ptr [eax+1], 0
xor     eax, eax
add     esp, 0Ch
inc     eax

loc_10002CB4:
pop     edi

loc_10002CB5:
pop     esi
retn    8
sub_10002BA7 endp




sub_10002CB9 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002CF8
call    sub_1000687F
test    eax, eax
jz      short loc_10002CF1
push    offset aInvalidMethodI ; "Invalid method id"
push    26Bh

loc_10002CE3:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002CF1:
xor     eax, eax
jmp     loc_10002DCE

loc_10002CF8:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGetversion ; "getVersion"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002D25
call    sub_1000687F
test    eax, eax
jz      short loc_10002CF1
push    offset aInvalidMethodI ; "Invalid method id"
push    273h
jmp     short loc_10002CE3

loc_10002D25:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_10002D4F
call    sub_1000687F
test    eax, eax
jz      short loc_10002DAC
push    offset aInvalidObject ; "Invalid object"
push    27Bh
jmp     short loc_10002D9E

loc_10002D4F:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002D73
call    sub_1000687F
test    eax, eax
jz      short loc_10002DAC
push    offset aInvalidClassOb ; "Invalid class object"
push    283h
jmp     short loc_10002D9E

loc_10002D73:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002DB0
call    sub_1000687F
test    eax, eax
jz      short loc_10002DAC
push    offset aInvalidMethodI ; "Invalid method id"
push    28Bh

loc_10002D9E:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002DAC:
xor     eax, eax
jmp     short loc_10002DCD

loc_10002DB0:
push    eax
push    edi
push    esi
call    sub_1000271E
mov     ecx, [esp+14h+arg_4]
mov     edx, eax
mov     [ecx+0Dh], al
shr     edx, 8
xor     eax, eax
add     esp, 0Ch
mov     [ecx+0Ch], dl
inc     eax

loc_10002DCD:
pop     edi

loc_10002DCE:
pop     esi
retn    8
sub_10002CB9 endp




sub_10002DD2 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002E11
call    sub_1000687F
test    eax, eax
jz      short loc_10002E0A
push    offset aInvalidMethodI ; "Invalid method id"
push    29Fh

loc_10002DFC:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002E0A:
xor     eax, eax
jmp     loc_10002EF9

loc_10002E11:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGetfreeshots ; "getFreeShots"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002E3E
call    sub_1000687F
test    eax, eax
jz      short loc_10002E0A
push    offset aInvalidMethodI ; "Invalid method id"
push    2A7h
jmp     short loc_10002DFC

loc_10002E3E:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_10002E68
call    sub_1000687F
test    eax, eax
jz      short loc_10002EC5
push    offset aInvalidObject ; "Invalid object"
push    2AFh
jmp     short loc_10002EB7

loc_10002E68:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002E8C
call    sub_1000687F
test    eax, eax
jz      short loc_10002EC5
push    offset aInvalidClassOb ; "Invalid class object"
push    2B7h
jmp     short loc_10002EB7

loc_10002E8C:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002EC9
call    sub_1000687F
test    eax, eax
jz      short loc_10002EC5
push    offset aInvalidMethodI ; "Invalid method id"
push    2BFh

loc_10002EB7:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002EC5:
xor     eax, eax
jmp     short loc_10002EF8

loc_10002EC9:
push    ebx
push    eax
push    edi
push    esi
call    sub_1000271E
mov     ecx, [esp+18h+arg_4]
mov     edx, eax
shr     edx, 10h
mov     ebx, edx
mov     [ecx+0Fh], dl
mov     edx, eax
shr     ebx, 8
mov     [ecx+11h], al
add     esp, 0Ch
shr     edx, 8
xor     eax, eax
mov     [ecx+0Eh], bl
mov     [ecx+10h], dl
inc     eax
pop     ebx

loc_10002EF8:
pop     edi

loc_10002EF9:
pop     esi
retn    8
sub_10002DD2 endp




sub_10002EFD proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002F3C
call    sub_1000687F
test    eax, eax
jz      short loc_10002F35
push    offset aInvalidMethodI ; "Invalid method id"
push    2D5h

loc_10002F27:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002F35:
xor     eax, eax
jmp     loc_10003012

loc_10002F3C:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGethardwaregro ; "getHardwareGroupID"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002F69
call    sub_1000687F
test    eax, eax
jz      short loc_10002F35
push    offset aInvalidMethodI ; "Invalid method id"
push    2DDh
jmp     short loc_10002F27

loc_10002F69:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_10002F93
call    sub_1000687F
test    eax, eax
jz      short loc_10002FF0
push    offset aInvalidObject ; "Invalid object"
push    2E5h
jmp     short loc_10002FE2

loc_10002F93:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10002FB7
call    sub_1000687F
test    eax, eax
jz      short loc_10002FF0
push    offset aInvalidClassOb ; "Invalid class object"
push    2EDh
jmp     short loc_10002FE2

loc_10002FB7:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10002FF4
call    sub_1000687F
test    eax, eax
jz      short loc_10002FF0
push    offset aInvalidMethodI ; "Invalid method id"
push    2F5h

loc_10002FE2:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002FF0:
xor     eax, eax
jmp     short loc_10003011

loc_10002FF4:
push    eax
push    edi
push    esi
call    sub_1000271E
mov     ecx, [esp+14h+arg_4]
mov     edx, eax
mov     [ecx+13h], al
shr     edx, 8
xor     eax, eax
add     esp, 0Ch
mov     [ecx+12h], dl
inc     eax

loc_10003011:
pop     edi

loc_10003012:
pop     esi
retn    8
sub_10002EFD endp




sub_10003016 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_0 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003055
call    sub_1000687F
test    eax, eax
jz      short loc_1000304E
push    offset aInvalidMethodI ; "Invalid method id"
push    45Fh

loc_10003040:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000304E:
xor     eax, eax
jmp     loc_1000312A

loc_10003055:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGetseedstatus ; "getSeedStatus"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10003082
call    sub_1000687F
test    eax, eax
jz      short loc_1000304E
push    offset aInvalidMethodI ; "Invalid method id"
push    467h
jmp     short loc_10003040

loc_10003082:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_100030AC
call    sub_1000687F
test    eax, eax
jz      short loc_10003109
push    offset aInvalidObject ; "Invalid object"
push    46Fh
jmp     short loc_100030FB

loc_100030AC:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100030D0
call    sub_1000687F
test    eax, eax
jz      short loc_10003109
push    offset aInvalidClassOb ; "Invalid class object"
push    477h
jmp     short loc_100030FB

loc_100030D0:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_1000310D
call    sub_1000687F
test    eax, eax
jz      short loc_10003109
push    offset aInvalidMethodI ; "Invalid method id"
push    47Fh

loc_100030FB:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003109:
xor     eax, eax
jmp     short loc_10003129

loc_1000310D:
push    eax
push    edi
push    esi
call    sub_1000271E
mov     ecx, [esp+14h+arg_4]
mov     edx, eax
mov     [ecx+1], al
shr     edx, 8
xor     eax, eax
add     esp, 0Ch
mov     [ecx], dl
inc     eax

loc_10003129:
pop     edi

loc_1000312A:
pop     esi
retn    8
sub_10003016 endp




sub_1000312E proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_0 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_1000316D
call    sub_1000687F
test    eax, eax
jz      short loc_10003166
push    offset aInvalidMethodI ; "Invalid method id"
push    493h

loc_10003158:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003166:
xor     eax, eax
jmp     loc_10003243

loc_1000316D:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGetalgorithm ; "getAlgorithm"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_1000319A
call    sub_1000687F
test    eax, eax
jz      short loc_10003166
push    offset aInvalidMethodI ; "Invalid method id"
push    49Bh
jmp     short loc_10003158

loc_1000319A:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_100031C4
call    sub_1000687F
test    eax, eax
jz      short loc_10003221
push    offset aInvalidObject ; "Invalid object"
push    4A3h
jmp     short loc_10003213

loc_100031C4:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100031E8
call    sub_1000687F
test    eax, eax
jz      short loc_10003221
push    offset aInvalidClassOb ; "Invalid class object"
push    4ABh
jmp     short loc_10003213

loc_100031E8:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10003225
call    sub_1000687F
test    eax, eax
jz      short loc_10003221
push    offset aInvalidMethodI ; "Invalid method id"
push    4B3h

loc_10003213:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003221:
xor     eax, eax
jmp     short loc_10003242

loc_10003225:
push    eax
push    edi
push    esi
call    sub_1000271E
mov     ecx, [esp+14h+arg_4]
mov     edx, eax
mov     [ecx+3], al
shr     edx, 8
xor     eax, eax
add     esp, 0Ch
mov     [ecx+2], dl
inc     eax

loc_10003242:
pop     edi

loc_10003243:
pop     esi
retn    8
sub_1000312E endp




sub_10003247 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_0 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003286
call    sub_1000687F
test    eax, eax
jz      short loc_1000327F
push    offset aInvalidMethodI ; "Invalid method id"
push    4C9h

loc_10003271:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000327F:
xor     eax, eax
jmp     loc_1000335C

loc_10003286:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGetseed ; "getSeed"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100032B3
call    sub_1000687F
test    eax, eax
jz      short loc_1000327F
push    offset aInvalidMethodI ; "Invalid method id"
push    4D1h
jmp     short loc_10003271

loc_100032B3:
push    edi
push    eax
push    [esp+0Ch+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_100032DD
call    sub_1000687F
test    eax, eax
jz      short loc_1000333A
push    offset aInvalidObject ; "Invalid object"
push    4D9h
jmp     short loc_1000332C

loc_100032DD:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003301
call    sub_1000687F
test    eax, eax
jz      short loc_1000333A
push    offset aInvalidClassOb ; "Invalid class object"
push    4E1h
jmp     short loc_1000332C

loc_10003301:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_1000333E
call    sub_1000687F
test    eax, eax
jz      short loc_1000333A
push    offset aInvalidMethodI ; "Invalid method id"
push    4E9h

loc_1000332C:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000333A:
xor     eax, eax
jmp     short loc_1000335B

loc_1000333E:
push    eax
push    edi
push    esi
call    sub_1000271E
mov     ecx, [esp+14h+arg_4]
mov     edx, eax
mov     [ecx+5], al
shr     edx, 8
xor     eax, eax
add     esp, 0Ch
mov     [ecx+4], dl
inc     eax

loc_1000335B:
pop     edi

loc_1000335C:
pop     esi
retn    8
sub_10003247 endp



; Attributes: bp-based frame

sub_10003360 proc near

var_14= dword ptr -14h
var_10= word ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001957A SIZE 00000023 BYTES

; __unwind { // loc_10019582
push    8
mov     eax, offset loc_10019582
call    __EH_prolog3
mov     ebx, ecx
mov     eax, [ebx]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_0 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100033AC
call    sub_1000687F
test    eax, eax
jz      short loc_100033A5
push    offset aInvalidMethodI ; "Invalid method id"
push    4FDh

loc_10003397:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100033A5:
xor     eax, eax
jmp     loc_100034EA

loc_100033AC:
mov     ecx, [esi]
push    offset aLjavaLangInteg ; "()Ljava/lang/Integer;"
push    offset aGetkey  ; "getKey"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100033D9
call    sub_1000687F
test    eax, eax
jz      short loc_100033A5
push    offset aInvalidMethodI ; "Invalid method id"
push    505h
jmp     short loc_10003397

loc_100033D9:
push    eax
push    [ebp+arg_0]
push    esi
call    sub_100026CD
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jnz     short loc_10003401
call    sub_1000687F
test    eax, eax
jz      short loc_100033A5
push    offset aInvalidObject ; "Invalid object"
push    50Dh
jmp     short loc_10003397

loc_10003401:
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003428
call    sub_1000687F
test    eax, eax
jz      short loc_100033A5
push    offset aInvalidClassOb ; "Invalid class object"
push    515h
jmp     loc_10003397

loc_10003428:
mov     ecx, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_1000345C
call    sub_1000687F
test    eax, eax
jz      loc_100033A5
push    offset aInvalidMethodI ; "Invalid method id"
push    51Dh
jmp     loc_10003397

loc_1000345C:
push    eax
push    edi
push    esi
call    sub_1000271E
add     esp, 0Ch
lea     ecx, [ebp+var_14] ; this
call    ??0CSecurity@@QAE@XZ ; CSecurity::CSecurity(void)
xor     edi, edi
;   try {
mov     [ebp+var_4], edi
mov     esi, [ebp+arg_4]
movzx   ax, byte ptr [esi+4]
movzx   cx, byte ptr [esi+5]
movzx   dx, byte ptr [esi+3]
shl     ax, 8
or      ax, cx
movzx   cx, byte ptr [esi+2]
shl     cx, 8
or      cx, dx
movzx   ecx, cx
lea     edx, [ebp+var_10]
push    edx             ; unsigned __int16 *
movzx   eax, ax
push    ecx             ; unsigned __int16
push    eax             ; unsigned __int16
lea     ecx, [ebp+var_14] ; this
mov     dword ptr [ebp+var_10], edi
call    ?SetSeedAndGetKey@CSecurity@@QAEJGGPAG@Z ; CSecurity::SetSeedAndGetKey(ushort,ushort,ushort *)
test    eax, eax
jz      short loc_100034CC
push    offset aComEoosGmTis2w_1 ; "com/eoos/gm/tis2web/sas/server/implemen"...
mov     ecx, ebx
mov     byte ptr [esi], 0F0h
mov     byte ptr [esi+1], 0F0h
call    sub_10002955
cmp     eax, 1
jnz     short loc_100034CF

loc_100034CC:
xor     edi, edi
inc     edi

loc_100034CF:
mov     eax, dword ptr [ebp+var_10]
mov     ecx, eax
shr     ecx, 8
mov     [esi+6], cl
mov     [esi+7], al
;   } // starts at 10003471
or      [ebp+var_4], 0FFFFFFFFh
mov     [ebp+var_14], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
mov     eax, edi

loc_100034EA:
call    __EH_epilog3
retn    8
; } // starts at 10003360
sub_10003360 endp




sub_100034F2 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
push    edi
mov     edi, ecx
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003531
call    sub_1000687F
test    eax, eax
jz      short loc_1000352D
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    59Ah
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000352D:
xor     eax, eax
jmp     short loc_100035AC

loc_10003531:
mov     ecx, [esi]
push    ebx
push    offset aLjavaLangByteV ; "(Ljava/lang/Byte;)V"
push    offset aSetidbyte ; "setIDByte"
push    eax
push    esi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003561
call    sub_1000687F
test    eax, eax
jz      short loc_10003595
push    offset aInvalidMethodI ; "Invalid method id"
push    5A2h
jmp     short loc_10003587

loc_10003561:
mov     ecx, [esp+0Ch+arg_0]
movzx   ecx, byte ptr [ecx]
mov     eax, [edi]
push    ecx
mov     ecx, edi
call    dword ptr [eax+24h]
test    eax, eax
jnz     short loc_10003599
call    sub_1000687F
test    eax, eax
jz      short loc_10003595
push    offset aInvalidObject ; "Invalid object"
push    5AAh

loc_10003587:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003595:
xor     eax, eax
jmp     short loc_100035AB

loc_10003599:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    esi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_100035AB:
pop     ebx

loc_100035AC:
pop     edi
pop     esi
retn    8
sub_100034F2 endp




sub_100035B1 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
push    edi
mov     edi, ecx
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100035F0
call    sub_1000687F
test    eax, eax
jz      short loc_100035EC
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    5BBh
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100035EC:
xor     eax, eax
jmp     short loc_1000366B

loc_100035F0:
mov     ecx, [esi]
push    ebx
push    offset aLjavaLangByteV ; "(Ljava/lang/Byte;)V"
push    offset aSetstatus ; "setStatus"
push    eax
push    esi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003620
call    sub_1000687F
test    eax, eax
jz      short loc_10003654
push    offset aInvalidMethodI ; "Invalid method id"
push    5C3h
jmp     short loc_10003646

loc_10003620:
mov     ecx, [esp+0Ch+arg_0]
movzx   ecx, byte ptr [ecx]
mov     eax, [edi]
push    ecx
mov     ecx, edi
call    dword ptr [eax+24h]
test    eax, eax
jnz     short loc_10003658
call    sub_1000687F
test    eax, eax
jz      short loc_10003654
push    offset aInvalidObject ; "Invalid object"
push    5CBh

loc_10003646:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003654:
xor     eax, eax
jmp     short loc_1000366A

loc_10003658:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    esi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_1000366A:
pop     ebx

loc_1000366B:
pop     edi
pop     esi
retn    8
sub_100035B1 endp




sub_10003670 proc near

arg_4= dword ptr  8

mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100036AC
call    sub_1000687F
test    eax, eax
jz      short loc_100036A8
push    offset aClassNotFound ; "Class not found"
push    5DCh

loc_1000369A:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100036A8:
xor     eax, eax
jmp     short loc_100036EC

loc_100036AC:
mov     ecx, [esi]
push    offset aLcomEoosGmTis2_6 ; "(Lcom/eoos/gm/tis2web/sas/common/model/"...
push    offset aSethardwarekey ; "setHardwareKey"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100036D9
call    sub_1000687F
test    eax, eax
jz      short loc_100036A8
push    offset aInvalidMethodI ; "Invalid method id"
push    5E4h
jmp     short loc_1000369A

loc_100036D9:
push    0
push    eax
push    [esp+0Ch+arg_4]
push    esi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_100036EC:
pop     esi
retn    8
sub_10003670 endp




sub_100036F0 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003732
call    sub_1000687F
test    eax, eax
jz      short loc_1000372B
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    5F5h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000372B:
xor     eax, eax
jmp     loc_100037BC

loc_10003732:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSetversion ; "setVersion"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003762
call    sub_1000687F
test    eax, eax
jz      short loc_100037A5
push    offset aInvalidMethodI ; "Invalid method id"
push    5FDh
jmp     short loc_10003797

loc_10003762:
mov     ecx, [esp+0Ch+arg_0]
movzx   ax, byte ptr [ecx+0Ch]
movzx   ecx, byte ptr [ecx+0Dh]
mov     edx, [esi]
shl     ax, 8
movzx   eax, ax
or      eax, ecx
push    eax
mov     ecx, esi
call    dword ptr [edx+20h]
test    eax, eax
jnz     short loc_100037A9
call    sub_1000687F
test    eax, eax
jz      short loc_100037A5
push    offset aInvalidObject ; "Invalid object"
push    607h

loc_10003797:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100037A5:
xor     eax, eax
jmp     short loc_100037BB

loc_100037A9:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_100037BB:
pop     ebx

loc_100037BC:
pop     edi
pop     esi
retn    8
sub_100036F0 endp




sub_100037C1 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003803
call    sub_1000687F
test    eax, eax
jz      short loc_100037FC
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    618h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100037FC:
xor     eax, eax
jmp     loc_100038A4

loc_10003803:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSetfreeshots ; "setFreeShots"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003833
call    sub_1000687F
test    eax, eax
jz      short loc_1000388D
push    offset aInvalidMethodI ; "Invalid method id"
push    620h
jmp     short loc_1000387F

loc_10003833:
mov     eax, [esp+0Ch+arg_0]
movzx   cx, byte ptr [eax+0Eh]
movzx   edx, byte ptr [eax+0Fh]
shl     cx, 8
movzx   ecx, cx
or      ecx, edx
movzx   dx, byte ptr [eax+10h]
movzx   eax, byte ptr [eax+11h]
shl     dx, 8
movzx   edx, dx
shl     ecx, 10h
or      edx, eax
mov     eax, [esi]
or      ecx, edx
push    ecx
mov     ecx, esi
call    dword ptr [eax+20h]
test    eax, eax
jnz     short loc_10003891
call    sub_1000687F
test    eax, eax
jz      short loc_1000388D
push    offset aInvalidObject ; "Invalid object"
push    62Bh

loc_1000387F:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000388D:
xor     eax, eax
jmp     short loc_100038A3

loc_10003891:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_100038A3:
pop     ebx

loc_100038A4:
pop     edi
pop     esi
retn    8
sub_100037C1 endp




sub_100038A9 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100038EB
call    sub_1000687F
test    eax, eax
jz      short loc_100038E4
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    63Ch
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100038E4:
xor     eax, eax
jmp     loc_10003975

loc_100038EB:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSethardwaregro ; "setHardwareGroupID"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_1000391B
call    sub_1000687F
test    eax, eax
jz      short loc_1000395E
push    offset aInvalidMethodI ; "Invalid method id"
push    644h
jmp     short loc_10003950

loc_1000391B:
mov     ecx, [esp+0Ch+arg_0]
movzx   ax, byte ptr [ecx+12h]
movzx   ecx, byte ptr [ecx+13h]
mov     edx, [esi]
shl     ax, 8
movzx   eax, ax
or      eax, ecx
push    eax
mov     ecx, esi
call    dword ptr [edx+20h]
test    eax, eax
jnz     short loc_10003962
call    sub_1000687F
test    eax, eax
jz      short loc_1000395E
push    offset aInvalidObject ; "Invalid object"
push    64Eh

loc_10003950:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000395E:
xor     eax, eax
jmp     short loc_10003974

loc_10003962:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_10003974:
pop     ebx

loc_10003975:
pop     edi
pop     esi
retn    8
sub_100038A9 endp




sub_1000397A proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_5 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100039BC
call    sub_1000687F
test    eax, eax
jz      short loc_100039B5
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    782h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100039B5:
xor     eax, eax
jmp     loc_10003A45

loc_100039BC:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSetseedstatus ; "setSeedStatus"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_100039EC
call    sub_1000687F
test    eax, eax
jz      short loc_10003A2E
push    offset aInvalidMethodI ; "Invalid method id"
push    78Ah
jmp     short loc_10003A20

loc_100039EC:
mov     ecx, [esp+0Ch+arg_0]
movzx   ax, byte ptr [ecx]
movzx   ecx, byte ptr [ecx+1]
mov     edx, [esi]
shl     ax, 8
movzx   eax, ax
or      eax, ecx
push    eax
mov     ecx, esi
call    dword ptr [edx+20h]
test    eax, eax
jnz     short loc_10003A32
call    sub_1000687F
test    eax, eax
jz      short loc_10003A2E
push    offset aInvalidObject ; "Invalid object"
push    794h

loc_10003A20:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003A2E:
xor     eax, eax
jmp     short loc_10003A44

loc_10003A32:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_10003A44:
pop     ebx

loc_10003A45:
pop     edi
pop     esi
retn    8
sub_1000397A endp




sub_10003A4A proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_5 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003A8C
call    sub_1000687F
test    eax, eax
jz      short loc_10003A85
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    7A5h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003A85:
xor     eax, eax
jmp     loc_10003B16

loc_10003A8C:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSetalgorithm ; "setAlgorithm"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003ABC
call    sub_1000687F
test    eax, eax
jz      short loc_10003AFF
push    offset aInvalidMethodI ; "Invalid method id"
push    7ADh
jmp     short loc_10003AF1

loc_10003ABC:
mov     ecx, [esp+0Ch+arg_0]
movzx   ax, byte ptr [ecx+2]
movzx   ecx, byte ptr [ecx+3]
mov     edx, [esi]
shl     ax, 8
movzx   eax, ax
or      eax, ecx
push    eax
mov     ecx, esi
call    dword ptr [edx+20h]
test    eax, eax
jnz     short loc_10003B03
call    sub_1000687F
test    eax, eax
jz      short loc_10003AFF
push    offset aInvalidObject ; "Invalid object"
push    7B7h

loc_10003AF1:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003AFF:
xor     eax, eax
jmp     short loc_10003B15

loc_10003B03:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_10003B15:
pop     ebx

loc_10003B16:
pop     edi
pop     esi
retn    8
sub_10003A4A endp




sub_10003B1B proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_5 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003B5D
call    sub_1000687F
test    eax, eax
jz      short loc_10003B56
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    7C8h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003B56:
xor     eax, eax
jmp     loc_10003BE7

loc_10003B5D:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSetseed ; "setSeed"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003B8D
call    sub_1000687F
test    eax, eax
jz      short loc_10003BD0
push    offset aInvalidMethodI ; "Invalid method id"
push    7D0h
jmp     short loc_10003BC2

loc_10003B8D:
mov     ecx, [esp+0Ch+arg_0]
movzx   ax, byte ptr [ecx+4]
movzx   ecx, byte ptr [ecx+5]
mov     edx, [esi]
shl     ax, 8
movzx   eax, ax
or      eax, ecx
push    eax
mov     ecx, esi
call    dword ptr [edx+20h]
test    eax, eax
jnz     short loc_10003BD4
call    sub_1000687F
test    eax, eax
jz      short loc_10003BD0
push    offset aInvalidObject ; "Invalid object"
push    7DAh

loc_10003BC2:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003BD0:
xor     eax, eax
jmp     short loc_10003BE6

loc_10003BD4:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_10003BE6:
pop     ebx

loc_10003BE7:
pop     edi
pop     esi
retn    8
sub_10003B1B endp




sub_10003BEC proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_5 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003C2E
call    sub_1000687F
test    eax, eax
jz      short loc_10003C27
mov     edx, [eax]
push    offset aClassNotFound ; "Class not found"
push    7EBh
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003C27:
xor     eax, eax
jmp     loc_10003CB8

loc_10003C2E:
mov     ecx, [edi]
push    ebx
push    offset aLjavaLangInteg_0 ; "(Ljava/lang/Integer;)V"
push    offset aSetkey  ; "setKey"
push    eax
push    edi
call    dword ptr [ecx+84h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10003C5E
call    sub_1000687F
test    eax, eax
jz      short loc_10003CA1
push    offset aInvalidMethodI ; "Invalid method id"
push    7F3h
jmp     short loc_10003C93

loc_10003C5E:
mov     ecx, [esp+0Ch+arg_0]
movzx   ax, byte ptr [ecx+6]
movzx   ecx, byte ptr [ecx+7]
mov     edx, [esi]
shl     ax, 8
movzx   eax, ax
or      eax, ecx
push    eax
mov     ecx, esi
call    dword ptr [edx+20h]
test    eax, eax
jnz     short loc_10003CA5
call    sub_1000687F
test    eax, eax
jz      short loc_10003CA1
push    offset aInvalidObject ; "Invalid object"
push    7FDh

loc_10003C93:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003CA1:
xor     eax, eax
jmp     short loc_10003CB7

loc_10003CA5:
push    eax
push    ebx
push    [esp+14h+arg_4]
push    edi
call    sub_10002739
xor     eax, eax
add     esp, 10h
inc     eax

loc_10003CB7:
pop     ebx

loc_10003CB8:
pop     edi
pop     esi
retn    8
sub_10003BEC endp




sub_10003CBD proc near

var_4= dword ptr -4
arg_0= dword ptr  4

push    ecx
mov     eax, [ecx]
and     [esp+4+var_4], 0
push    ebx
push    ebp
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_8 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
mov     ebp, eax
test    ebp, ebp
jz      loc_10003E1D
mov     eax, [esi]
push    offset aV       ; "()V"
push    offset aInit    ; "<init>"
push    ebp
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jz      loc_10003E08
push    eax
push    ebp
push    esi
call    sub_100026B5
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jz      loc_10003DF3
mov     eax, [esi]
push    offset aZV      ; "(Z)V"
push    offset aSetstatussca ; "setStatusSCA"
push    ebp
push    esi
call    dword ptr [eax+84h]
push    offset aZV      ; "(Z)V"
push    offset aSetstatusska ; "setStatusSKA"
push    ebp
mov     ebx, eax
mov     eax, [esi]
push    esi
call    dword ptr [eax+84h]
mov     ebp, eax
xor     eax, eax
cmp     ebx, eax
jz      loc_10003DDE
cmp     ebp, eax
jz      loc_10003DDE
mov     ecx, [esp+14h+arg_0]
cmp     ecx, 80040267h
jnz     short loc_10003D61
push    1
jmp     short loc_10003D6A

loc_10003D61:
cmp     ecx, 80040265h
jnz     short loc_10003D76
push    eax

loc_10003D6A:
push    ebx
push    edi
push    esi
call    sub_10002739
push    1
jmp     short loc_10003D98

loc_10003D76:
cmp     ecx, 80040266h
jnz     short loc_10003D85
push    1
push    ebx
push    edi
push    esi
jmp     short loc_10003D91

loc_10003D85:
push    eax
push    ebx
push    edi
push    esi
cmp     ecx, 80040268h
jnz     short loc_10003DA5

loc_10003D91:
call    sub_10002739
push    0

loc_10003D98:
push    ebp
push    edi
push    esi
call    sub_10002739
add     esp, 20h
jmp     short loc_10003DD8

loc_10003DA5:
call    sub_10002739
push    0
push    ebp
push    edi
push    esi
call    sub_10002739
add     esp, 20h
call    sub_1000687F
test    eax, eax
jz      short loc_10003DD8
mov     edx, [eax]
push    offset aUnknownResultC ; "Unknown result code"
push    836h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003DD8:
mov     [esp+14h+var_4], edi
jmp     short loc_10003E3E

loc_10003DDE:
call    sub_1000687F
test    eax, eax
jz      short loc_10003E3E
push    offset aInvalidMethodI ; "Invalid method id"
push    83Dh
jmp     short loc_10003E30

loc_10003DF3:
call    sub_1000687F
test    eax, eax
jz      short loc_10003E3E
push    offset aCouldNotCreate_0 ; "Could not create object"
push    842h
jmp     short loc_10003E30

loc_10003E08:
call    sub_1000687F
test    eax, eax
jz      short loc_10003E3E
push    offset aInvalidMethodI_0 ; "Invalid method ID"
push    847h
jmp     short loc_10003E30

loc_10003E1D:
call    sub_1000687F
test    eax, eax
jz      short loc_10003E3E
push    offset aClassNotFound ; "Class not found"
push    84Ch

loc_10003E30:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003E3E:
mov     eax, [esp+14h+var_4]
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn    4
sub_10003CBD endp




; int __cdecl sub_10003E4A(wchar_t *String)
sub_10003E4A proc near

String= dword ptr  4

push    ebx
mov     ebx, [esp+4+String]
push    edi
xor     edi, edi
test    ebx, ebx
jz      short loc_10003E7C
push    esi
push    ebx             ; String
call    _wcslen
mov     esi, eax
inc     esi
push    edi
push    esi
call    sub_100028CE
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jz      short loc_10003E7B
push    ebx             ; Source
push    esi             ; SizeInWords
push    edi             ; Destination
call    _wcscpy_s
add     esp, 0Ch

loc_10003E7B:
pop     esi

loc_10003E7C:
mov     eax, edi
pop     edi
pop     ebx
retn
sub_10003E4A endp




sub_10003E81 proc near
push    esi
xor     esi, esi
push    esi
push    1
call    sub_100028FB
pop     ecx
pop     ecx
cmp     eax, esi
jz      short loc_10003E96
mov     esi, eax
jmp     short loc_10003EB4

loc_10003E96:
call    sub_1000687F
cmp     eax, esi
jz      short loc_10003EB4
mov     edx, [eax]
push    offset aNotEnoughMemor ; "Not enough memory"
push    42h ; 'B'
push    offset aFProjectsJavaG ; "f:\\projects_java\\gm\\tis2web\\deliver"...
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003EB4:
mov     eax, esi
pop     esi
retn
sub_10003E81 endp




sub_10003EB8 proc near
push    esi
mov     esi, ecx
mov     eax, [esi]
test    eax, eax
jnz     short loc_10003ECC
call    __invalid_parameter_noinfo
mov     eax, [esi]
test    eax, eax
jz      short loc_10003ED0

loc_10003ECC:
mov     eax, [eax]
jmp     short loc_10003ED2

loc_10003ED0:
xor     eax, eax

loc_10003ED2:
mov     ecx, [esi+4]
cmp     ecx, [eax+14h]
jnz     short loc_10003EDF
call    __invalid_parameter_noinfo

loc_10003EDF:
mov     eax, [esi+4]
add     eax, 8
pop     esi
retn
sub_10003EB8 endp




; int __thiscall sub_10003EE7(void *, char)
sub_10003EE7 proc near

arg_0= byte ptr  4

push    esi
mov     esi, ecx
call    sub_1000292C
test    [esp+4+arg_0], 1
jz      short loc_10003EFD
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10003EFD:
mov     eax, esi
pop     esi
retn    4
sub_10003EE7 endp



; Attributes: bp-based frame

sub_10003F03 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 10h
and     [ebp+var_4], 0
push    ebx
push    edi
mov     edi, ecx
mov     eax, [edi]
mov     [ebp+var_C], edi
call    dword ptr [eax+8]
mov     ebx, eax
mov     eax, [ebx]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    ebx
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10003F52
call    sub_1000687F
test    eax, eax
jz      short loc_10003F4B
push    offset aClassNotFound ; "Class not found"
push    404h

loc_10003F3D:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003F4B:
xor     eax, eax
jmp     loc_1000404E

loc_10003F52:
mov     ecx, [ebx]
push    offset aLcomEoosGmTis2 ; "()[Lcom/eoos/gm/tis2web/sas/server/impl"...
push    offset aGetseedtuples ; "getSeedTuples"
push    eax
push    ebx
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10003F7F
call    sub_1000687F
test    eax, eax
jz      short loc_10003F4B
push    offset aInvalidMethodI ; "Invalid method id"
push    40Ch
jmp     short loc_10003F3D

loc_10003F7F:
push    eax
push    [ebp+arg_0]
push    ebx
call    sub_100026CD
add     esp, 0Ch
mov     [ebp+var_8], eax
test    eax, eax
jnz     short loc_10003FA8
call    sub_1000687F
test    eax, eax
jz      short loc_10003F4B
push    offset aInvalidObject ; "Invalid object"
push    414h
jmp     short loc_10003F3D

loc_10003FA8:
mov     edx, [edi]
push    eax
mov     ecx, edi
call    dword ptr [edx+38h]
and     [ebp+arg_0], 0
mov     [ebp+var_10], eax
test    eax, eax
jbe     loc_1000404B
push    esi
mov     esi, [ebp+arg_4]
add     esi, 132h

loc_10003FC9:
push    [ebp+arg_0]
mov     eax, [ebx]
push    [ebp+var_8]
push    ebx
call    dword ptr [eax+2B4h]
mov     [ebp+arg_4], eax
test    eax, eax
jz      short loc_10004054
push    esi
push    eax
mov     ecx, edi
call    sub_10003016
test    eax, eax
jz      loc_10004088
push    esi
push    [ebp+arg_4]
mov     ecx, edi
call    sub_1000312E
test    eax, eax
jz      loc_1000409D
push    esi
push    [ebp+arg_4]
mov     ecx, edi
call    sub_10003247
test    eax, eax
jz      loc_100040B2
push    esi
push    [ebp+arg_4]
mov     ecx, edi
call    sub_10003360
test    eax, eax
jnz     short loc_1000406D
call    sub_1000687F
test    eax, eax
jz      short loc_10004046
push    offset aFunctionFailed ; "Function failed"
push    434h

loc_10004038:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004046:
and     [ebp+var_4], 0

loc_1000404A:
pop     esi

loc_1000404B:
mov     eax, [ebp+var_4]

loc_1000404E:
pop     edi
pop     ebx
leave
retn    8

loc_10004054:
or      eax, 0FFFFFFFFh
mov     edi, esi
stosw
lea     edi, [esi+2]
stosw
lea     edi, [esi+4]
stosw
lea     edi, [esi+6]
stosw
mov     edi, [ebp+var_C]

loc_1000406D:
inc     [ebp+arg_0]
mov     eax, [ebp+arg_0]
add     esi, 8
mov     [ebp+var_4], 1
cmp     eax, [ebp+var_10]
jb      loc_10003FC9
jmp     short loc_1000404A

loc_10004088:
call    sub_1000687F
test    eax, eax
jz      short loc_10004046
push    offset aFunctionFailed ; "Function failed"
push    422h
jmp     short loc_10004038

loc_1000409D:
call    sub_1000687F
test    eax, eax
jz      short loc_10004046
push    offset aFunctionFailed ; "Function failed"
push    428h
jmp     short loc_10004038

loc_100040B2:
call    sub_1000687F
test    eax, eax
jz      short loc_10004046
push    offset aFunctionFailed ; "Function failed"
push    42Eh
jmp     loc_10004038
sub_10003F03 endp




sub_100040CA proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [esp+arg_0]
push    esi
mov     esi, ecx
and     dword ptr [esi], 0
push    edi
mov     edi, [esp+8+arg_4]
mov     [esi+4], eax
test    edi, edi
jnz     short loc_100040E5
call    __invalid_parameter_noinfo

loc_100040E5:
mov     eax, [edi]
mov     [esi], eax
pop     edi
mov     eax, esi
pop     esi
retn    8
sub_100040CA endp



; Attributes: bp-based frame

sub_100040F0 proc near

var_4C= byte ptr -4Ch
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001959D SIZE 00000023 BYTES

; __unwind { // loc_100195A5
push    40h
mov     eax, offset loc_100195A5
call    __EH_prolog3
mov     [ebp+var_20], ecx
xor     edi, edi
cmp     [ebp+arg_4], edi
jnz     short loc_1000412B
call    sub_1000687F
cmp     eax, edi
jz      short loc_10004124
push    offset aInvalidInputPo ; "Invalid input pointer"
push    61h ; 'a'

loc_10004116:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004124:
xor     eax, eax
jmp     loc_100043CE

loc_1000412B:
cmp     [ebp+arg_8], edi
jnz     short loc_10004142
call    sub_1000687F
cmp     eax, edi
jz      short loc_10004124
push    offset aInvalidInputPo ; "Invalid input pointer"
push    67h ; 'g'
jmp     short loc_10004116

loc_10004142:
cmp     [ebp+arg_C], edi
jnz     short loc_10004159
call    sub_1000687F
cmp     eax, edi
jz      short loc_10004124
push    offset aInvalidInputPo ; "Invalid input pointer"
push    6Dh ; 'm'
jmp     short loc_10004116

loc_10004159:
mov     eax, [ecx]
call    dword ptr [eax+8]
mov     esi, eax
cmp     esi, edi
jnz     short loc_10004176
call    sub_1000687F
cmp     eax, edi
jz      short loc_10004124
push    offset aCouldNotGetEnv ; "Could not get environment"
push    75h ; 'u'
jmp     short loc_10004116

loc_10004176:
push    [ebp+arg_0]
mov     eax, [esi]
push    esi
call    dword ptr [eax+2ACh]
mov     ebx, eax
push    edi
push    ebx
mov     [ebp+var_28], ebx
call    sub_10002687
mov     edi, eax
push    0
push    ebx
mov     [ebp+var_2C], edi
call    sub_10002687
and     [ebp+var_14], 0
add     esp, 10h
mov     [ebp+var_30], eax
test    ebx, ebx
jbe     loc_100043B9
mov     [ebp+var_18], eax
sub     [ebp+var_18], edi
mov     [ebp+var_10], edi
mov     edi, offset aJnihelperCpp ; ".\\JNIHelper.cpp"

loc_100041BB:
push    [ebp+var_14]
mov     eax, [esi]
push    [ebp+arg_0]
push    esi
call    dword ptr [eax+2B4h]
mov     ebx, eax
mov     [ebp+var_24], ebx
test    ebx, ebx
jz      loc_10004386
mov     eax, [esi]
push    ebx
push    esi
call    dword ptr [eax+7Ch]
mov     ecx, [esi]
push    offset aLjavaLangObjec ; "Ljava/lang/Object;"
push    offset aFirst   ; "first"
push    eax
push    esi
mov     [ebp+var_1C], eax
call    dword ptr [ecx+178h]
test    eax, eax
jz      loc_10004293
mov     ecx, [esi]
push    eax
push    ebx
push    esi
call    dword ptr [ecx+17Ch]
push    offset aJavaLangString ; "java/lang/String"
mov     ebx, eax
mov     eax, [esi]
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jz      short loc_1000427E
mov     ecx, [esi]
push    eax
push    ebx
push    esi
call    dword ptr [ecx+80h]
cmp     al, 1
jnz     short loc_10004269
mov     ecx, [ebp+var_20]
mov     eax, [ecx]
push    ebx
lea     edx, [ebp+var_4C]
push    edx
call    dword ptr [eax+0Ch]
;   try {
and     [ebp+var_4], 0
cmp     dword ptr [eax+18h], 8
jb      short loc_10004244
mov     eax, [eax+4]
jmp     short loc_10004247

loc_10004244:
add     eax, 4

loc_10004247:           ; String
push    eax
call    sub_10003E4A
mov     edx, [ebp+var_10]
pop     ecx
mov     ecx, [ebp+var_18]
mov     [ecx+edx], eax
;   } // starts at 10004235
or      [ebp+var_4], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_100042B0

loc_10004269:
call    sub_1000687F
test    eax, eax
jz      short loc_100042B0
push    offset aInvalidInstanc ; "Invalid instance type"
push    90h
jmp     short loc_100042A6

loc_1000427E:
call    sub_1000687F
test    eax, eax
jz      short loc_100042B0
push    offset aCouldNotFindCl ; "Could not find class"
push    95h
jmp     short loc_100042A6

loc_10004293:
call    sub_1000687F
test    eax, eax
jz      short loc_100042B0
push    offset aCouldNotGetFie ; "Could not get field id"
push    9Ah

loc_100042A6:
mov     edx, [eax]
push    edi
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100042B0:
mov     eax, [esi]
push    offset aLjavaLangObjec ; "Ljava/lang/Object;"
push    offset aSecond  ; "second"
push    [ebp+var_1C]
push    esi
call    dword ptr [eax+178h]
test    eax, eax
jz      loc_10004371
mov     ecx, [esi]
push    eax
push    [ebp+var_24]
push    esi
call    dword ptr [ecx+17Ch]
push    offset aJavaLangIntege ; "java/lang/Integer"
mov     [ebp+var_1C], eax
mov     eax, [esi]
push    esi
call    dword ptr [eax+18h]
mov     ebx, eax
test    ebx, ebx
jz      short loc_1000435C
mov     eax, [esi]
push    ebx
push    [ebp+var_1C]
push    esi
call    dword ptr [eax+80h]
cmp     al, 1
jnz     short loc_10004347
mov     eax, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    ebx
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jz      short loc_1000432C
push    eax
push    [ebp+var_1C]
push    esi
call    sub_1000271E
mov     ecx, [ebp+var_10]
add     esp, 0Ch
mov     [ecx], eax
jmp     short loc_100043A3

loc_1000432C:
mov     eax, [ebp+var_10]
or      dword ptr [eax], 0FFFFFFFFh
call    sub_1000687F
test    eax, eax
jz      short loc_100043A3
push    offset aCouldNotGetMet_0 ; "Could not get method id"
push    0ADh
jmp     short loc_10004399

loc_10004347:
call    sub_1000687F
test    eax, eax
jz      short loc_100043A3
push    offset aInvalidInstanc ; "Invalid instance type"
push    0B2h
jmp     short loc_10004399

loc_1000435C:
call    sub_1000687F
test    eax, eax
jz      short loc_100043A3
push    offset aCouldNotFindCl ; "Could not find class"
push    0B7h
jmp     short loc_10004399

loc_10004371:
call    sub_1000687F
test    eax, eax
jz      short loc_100043A3
push    offset aCouldNotGetFie ; "Could not get field id"
push    0BCh
jmp     short loc_10004399

loc_10004386:
call    sub_1000687F
test    eax, eax
jz      short loc_100043A3
push    offset aCouldNotGetArr ; "Could not get array element"
push    0C1h

loc_10004399:
mov     edx, [eax]
push    edi
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100043A3:
inc     [ebp+var_14]
mov     ebx, [ebp+var_28]
add     [ebp+var_10], 4
cmp     [ebp+var_14], ebx
jb      loc_100041BB
mov     edi, [ebp+var_2C]

loc_100043B9:
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+var_30]
mov     [eax], ebx
mov     eax, [ebp+arg_8]
mov     [eax], edi
mov     eax, [ebp+arg_C]
mov     [eax], ecx
xor     eax, eax
inc     eax

loc_100043CE:
call    __EH_epilog3
retn    10h
; } // starts at 100040F0
sub_100040F0 endp



; Attributes: bp-based frame

sub_100043D6 proc near

var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_18= dword ptr -18h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100195C0 SIZE 0000002D BYTES

; __unwind { // loc_100195C8
push    24h
mov     eax, offset loc_100195C8
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     ebx, [ebp+arg_0]
mov     edi, ecx
mov     [ebp+var_30], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_1000442E
call    sub_1000687F
test    eax, eax
jz      short loc_10004424
push    offset aInvalidMethodI ; "Invalid method id"
push    220h

loc_10004416:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004424:
xor     eax, eax

loc_10004426:
call    __EH_epilog3_GS
retn    8

loc_1000442E:
mov     ecx, [esi]
push    offset aLcomEoosGmTis2_5 ; "()Lcom/eoos/gm/tis2web/sas/common/model"...
push    offset aGethardwarekey ; "getHardwareKey"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_1000445B
call    sub_1000687F
test    eax, eax
jz      short loc_10004424
push    offset aInvalidMethodI ; "Invalid method id"
push    228h
jmp     short loc_10004416

loc_1000445B:
push    eax
push    ebx
push    esi
call    sub_100026CD
mov     ebx, eax
add     esp, 0Ch
test    ebx, ebx
jnz     short loc_10004481
call    sub_1000687F
test    eax, eax
jz      short loc_10004424
push    offset aInvalidObject ; "Invalid object"
push    230h
jmp     short loc_10004416

loc_10004481:
mov     eax, [esi]
push    offset aComEoosGmTis2w_6 ; "com/eoos/gm/tis2web/sas/common/model/Ha"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100044A8
call    sub_1000687F
test    eax, eax
jz      short loc_10004424
push    offset aInvalidClassOb ; "Invalid class object"
push    238h
jmp     loc_10004416

loc_100044A8:
mov     ecx, [esi]
push    offset aLjavaLangStrin ; "()Ljava/lang/String;"
push    offset aGetdecoded ; "getDecoded"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100044DC
call    sub_1000687F
test    eax, eax
jz      loc_10004424
push    offset aInvalidMethodI ; "Invalid method id"
push    240h
jmp     loc_10004416

loc_100044DC:
push    eax
push    ebx
push    esi
call    sub_100026CD
xor     ebx, ebx
add     esp, 0Ch
cmp     eax, ebx
jnz     short loc_10004509
call    sub_1000687F
cmp     eax, ebx
jz      loc_10004424
push    offset aInvalidObject ; "Invalid object"
push    248h
jmp     loc_10004416

loc_10004509:
mov     edx, [edi]
push    eax
lea     eax, [ebp+var_2C]
push    eax
mov     ecx, edi
call    dword ptr [edx+10h]
;   try {
mov     [ebp+var_4], ebx
cmp     [ebp+var_18], ebx
jnz     short loc_10004556
call    sub_1000687F
cmp     eax, ebx
jz      short loc_1000453E
mov     edx, [eax]
push    offset aObjectIsEmpty ; "Object is empty"
push    250h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000453E:
xor     esi, esi
;   } // starts at 10004515

loc_10004540:
or      [ebp+var_4], 0FFFFFFFFh
push    ebx             ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     eax, esi
jmp     loc_10004426

loc_10004556:
xor     esi, esi

loc_10004558:
cmp     esi, [ebp+var_18]
jnb     short loc_10004571
push    esi
lea     ecx, [ebp+var_2C]
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     al, [eax]
mov     ecx, [ebp+var_30]
mov     [ecx+esi+2], al
jmp     short loc_10004579

loc_10004571:
mov     eax, [ebp+var_30]
mov     byte ptr [eax+esi+2], 0

loc_10004579:
inc     esi
cmp     esi, 0Ah
jb      short loc_10004558
xor     esi, esi
inc     esi
jmp     short loc_10004540
; } // starts at 100043D6
sub_100043D6 endp



; Attributes: bp-based frame

sub_10004584 proc near

var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_18= dword ptr -18h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100195C0 SIZE 0000002D BYTES

; __unwind { // loc_100195C8
push    24h
mov     eax, offset loc_100195C8
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     ebx, [ebp+arg_0]
mov     edi, ecx
mov     [ebp+var_30], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_2 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100045DC
call    sub_1000687F
test    eax, eax
jz      short loc_100045D2
push    offset aInvalidMethodI ; "Invalid method id"
push    363h

loc_100045C4:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100045D2:
xor     eax, eax

loc_100045D4:
call    __EH_epilog3_GS
retn    8

loc_100045DC:
mov     ecx, [esi]
push    offset aLcomEoosGmTis2_1 ; "()Lcom/eoos/gm/tis2web/sas/common/model"...
push    offset aGetvin  ; "getVIN"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10004609
call    sub_1000687F
test    eax, eax
jz      short loc_100045D2
push    offset aInvalidMethodI ; "Invalid method id"
push    36Bh
jmp     short loc_100045C4

loc_10004609:
push    eax
push    ebx
push    esi
call    sub_100026CD
mov     ebx, eax
add     esp, 0Ch
test    ebx, ebx
jnz     short loc_1000462F
call    sub_1000687F
test    eax, eax
jz      short loc_100045D2
push    offset aInvalidObject ; "Invalid object"
push    373h
jmp     short loc_100045C4

loc_1000462F:
mov     eax, [esi]
push    offset aComEoosGmTis2w_3 ; "com/eoos/gm/tis2web/sas/common/model/VI"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10004656
call    sub_1000687F
test    eax, eax
jz      short loc_100045D2
push    offset aInvalidClassOb ; "Invalid class object"
push    37Bh
jmp     loc_100045C4

loc_10004656:
mov     ecx, [esi]
push    offset aLjavaLangStrin ; "()Ljava/lang/String;"
push    offset aTostring ; "toString"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_1000468A
call    sub_1000687F
test    eax, eax
jz      loc_100045D2
push    offset aInvalidMethodI ; "Invalid method id"
push    383h
jmp     loc_100045C4

loc_1000468A:
push    eax
push    ebx
push    esi
call    sub_100026CD
xor     ebx, ebx
add     esp, 0Ch
cmp     eax, ebx
jnz     short loc_100046B7
call    sub_1000687F
cmp     eax, ebx
jz      loc_100045D2
push    offset aInvalidObject ; "Invalid object"
push    38Bh
jmp     loc_100045C4

loc_100046B7:
mov     edx, [edi]
push    eax
lea     eax, [ebp+var_2C]
push    eax
mov     ecx, edi
call    dword ptr [edx+10h]
;   try {
mov     [ebp+var_4], ebx
cmp     [ebp+var_18], ebx
jnz     short loc_10004704
call    sub_1000687F
cmp     eax, ebx
jz      short loc_100046EC
mov     edx, [eax]
push    offset aObjectIsEmpty ; "Object is empty"
push    393h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100046EC:
xor     esi, esi
;   } // starts at 100046C3

loc_100046EE:
or      [ebp+var_4], 0FFFFFFFFh
push    ebx             ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     eax, esi
jmp     loc_100045D4

loc_10004704:
xor     esi, esi

loc_10004706:
cmp     esi, [ebp+var_18]
jnb     short loc_1000471E
push    esi
lea     ecx, [ebp+var_2C]
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     al, [eax]
mov     ecx, [ebp+var_30]
mov     [ecx+esi], al
jmp     short loc_10004725

loc_1000471E:
mov     eax, [ebp+var_30]
mov     byte ptr [eax+esi], 0

loc_10004725:
inc     esi
cmp     esi, 12h
jb      short loc_10004706
xor     esi, esi
inc     esi
jmp     short loc_100046EE
; } // starts at 10004584
sub_10004584 endp



; Attributes: bp-based frame

sub_10004730 proc near

var_4C= byte ptr -4Ch
var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100195ED SIZE 00000035 BYTES

; __unwind { // loc_100195FD
push    40h
mov     eax, offset loc_100195FD
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     ebx, [ebp+arg_0]
mov     edi, ecx
mov     [ebp+var_30], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_2 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10004785
call    sub_1000687F
test    eax, eax
jz      short loc_1000477E
push    offset aInvalidMethodI ; "Invalid method id"
push    3AEh

loc_10004770:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000477E:
xor     eax, eax
jmp     loc_1000482A

loc_10004785:
mov     ecx, [esi]
push    offset aLjavaLangStrin ; "()Ljava/lang/String;"
push    offset aGetimmobilizer ; "getImmobilizerSecurityCode"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100047B2
call    sub_1000687F
test    eax, eax
jz      short loc_1000477E
push    offset aInvalidMethodI ; "Invalid method id"
push    3B6h
jmp     short loc_10004770

loc_100047B2:
push    eax
push    ebx
push    esi
call    sub_100026CD
xor     ebx, ebx
add     esp, 0Ch
cmp     eax, ebx
jz      short loc_1000481D
mov     edx, [edi]
push    eax
lea     eax, [ebp+var_4C]
push    eax
mov     ecx, edi
call    dword ptr [edx+10h]
;   try {
mov     [ebp+var_4], ebx
push    eax
lea     eax, [ebp+var_2C]
push    eax
call    sub_10001357
mov     ecx, eax
call    sub_100023FC
;   } // starts at 100047CF
;   try {
mov     byte ptr [ebp+var_4], 2
push    ebx             ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
xor     esi, esi

loc_100047F4:
push    esi
lea     ecx, [ebp+var_2C]
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     al, [eax]
mov     ecx, [ebp+var_30]
mov     [ecx+esi+12h], al
inc     esi
cmp     esi, 4
jb      short loc_100047F4
;   } // starts at 100047E3
or      [ebp+var_4], 0FFFFFFFFh
push    ebx             ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
jmp     short loc_10004827

loc_1000481D:
mov     edi, [ebp+var_30]
add     edi, 12h
or      eax, 0FFFFFFFFh
stosd

loc_10004827:
xor     eax, eax
inc     eax

loc_1000482A:
call    __EH_epilog3_GS
retn    8
; } // starts at 10004730
sub_10004730 endp



; Attributes: bp-based frame

sub_10004832 proc near

var_4C= byte ptr -4Ch
var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100195ED SIZE 00000035 BYTES

; __unwind { // loc_100195FD
push    40h
mov     eax, offset loc_100195FD
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     ebx, [ebp+arg_0]
mov     edi, ecx
mov     [ebp+var_30], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_2 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10004887
call    sub_1000687F
test    eax, eax
jz      short loc_10004880
push    offset aInvalidMethodI ; "Invalid method id"
push    3D8h

loc_10004872:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004880:
xor     eax, eax
jmp     loc_1000492C

loc_10004887:
mov     ecx, [esi]
push    offset aLjavaLangStrin ; "()Ljava/lang/String;"
push    offset aGetinfotainmen ; "getInfotainmentSecurityCode"
push    eax
push    esi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100048B4
call    sub_1000687F
test    eax, eax
jz      short loc_10004880
push    offset aInvalidMethodI ; "Invalid method id"
push    3E0h
jmp     short loc_10004872

loc_100048B4:
push    eax
push    ebx
push    esi
call    sub_100026CD
xor     ebx, ebx
add     esp, 0Ch
cmp     eax, ebx
jz      short loc_1000491F
mov     edx, [edi]
push    eax
lea     eax, [ebp+var_4C]
push    eax
mov     ecx, edi
call    dword ptr [edx+10h]
;   try {
mov     [ebp+var_4], ebx
push    eax
lea     eax, [ebp+var_2C]
push    eax
call    sub_10001357
mov     ecx, eax
call    sub_100023FC
;   } // starts at 100048D1
;   try {
mov     byte ptr [ebp+var_4], 2
push    ebx             ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
xor     esi, esi

loc_100048F6:
push    esi
lea     ecx, [ebp+var_2C]
call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::string::operator[](uint)
mov     al, [eax]
mov     ecx, [ebp+var_30]
mov     [ecx+esi+16h], al
inc     esi
cmp     esi, 4
jb      short loc_100048F6
;   } // starts at 100048E5
or      [ebp+var_4], 0FFFFFFFFh
push    ebx             ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
jmp     short loc_10004929

loc_1000491F:
mov     edi, [ebp+var_30]
add     edi, 16h
or      eax, 0FFFFFFFFh
stosd

loc_10004929:
xor     eax, eax
inc     eax

loc_1000492C:
call    __EH_epilog3_GS
retn    8
; } // starts at 10004832
sub_10004832 endp

; [00000072 BYTES: COLLAPSED FUNCTION std::string::assign(char const *,uint)]


; Attributes: bp-based frame

sub_100049A6 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 10h
and     [ebp+var_4], 0
push    ebx
push    esi
push    edi
mov     edi, ecx
mov     eax, [edi]
mov     [ebp+var_C], edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_100049F8
call    sub_1000687F
test    eax, eax
jz      short loc_100049F1
push    offset aInvalidMethodI ; "Invalid method id"
push    30Bh

loc_100049E3:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100049F1:
xor     eax, eax
jmp     loc_10004AFF

loc_100049F8:
mov     eax, [esi]
push    offset aComEoosGmTis2w_2 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10004A1C
call    sub_1000687F
test    eax, eax
jz      short loc_100049F1
push    offset aInvalidMethodI ; "Invalid method id"
push    313h
jmp     short loc_100049E3

loc_10004A1C:
mov     eax, [esi]
push    offset aLcomEoosGmTis2_0 ; "()[Lcom/eoos/gm/tis2web/sas/server/impl"...
push    offset aGetvintuples ; "getVINTuples"
push    ebx
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_10004A49
call    sub_1000687F
test    eax, eax
jz      short loc_100049F1
push    offset aInvalidMethodI ; "Invalid method id"
push    31Bh
jmp     short loc_100049E3

loc_10004A49:
push    eax
push    [ebp+arg_0]
push    esi
call    sub_100026CD
add     esp, 0Ch
mov     [ebp+var_8], eax
test    eax, eax
jnz     short loc_10004A75
call    sub_1000687F
test    eax, eax
jz      short loc_100049F1
push    offset aInvalidObject ; "Invalid object"
push    323h
jmp     loc_100049E3

loc_10004A75:
mov     edx, [edi]
push    eax
mov     ecx, edi
call    dword ptr [edx+38h]
and     [ebp+arg_0], 0
mov     [ebp+var_10], eax
test    eax, eax
jbe     short loc_10004AFC
mov     ebx, [ebp+arg_4]
add     ebx, 14h

loc_10004A8E:
push    [ebp+arg_0]
mov     eax, [esi]
push    [ebp+var_8]
push    esi
call    dword ptr [eax+2B4h]
mov     [ebp+arg_4], eax
test    eax, eax
jz      short loc_10004B06
push    ebx
push    eax
mov     ecx, edi
call    sub_10004584
test    eax, eax
jz      loc_10004B3C
push    ebx
push    [ebp+arg_4]
mov     ecx, edi
call    sub_10004730
test    eax, eax
jz      loc_10004B51
push    ebx
push    [ebp+arg_4]
mov     ecx, edi
call    sub_10004832
test    eax, eax
jnz     short loc_10004B21
call    sub_1000687F
test    eax, eax
jz      short loc_10004AF8
push    offset aFunctionFailed ; "Function failed"
push    33Dh

loc_10004AEA:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004AF8:
and     [ebp+var_4], 0

loc_10004AFC:
mov     eax, [ebp+var_4]

loc_10004AFF:
pop     edi
pop     esi
pop     ebx
leave
retn    8

loc_10004B06:
or      eax, 0FFFFFFFFh
mov     edi, ebx
stosd
stosd
stosd
stosd
stosw
or      eax, 0FFFFFFFFh
lea     edi, [ebx+12h]
stosd
or      eax, eax
lea     edi, [ebx+16h]
stosd
mov     edi, [ebp+var_C]

loc_10004B21:
inc     [ebp+arg_0]
mov     eax, [ebp+arg_0]
add     ebx, 1Ah
mov     [ebp+var_4], 1
cmp     eax, [ebp+var_10]
jb      loc_10004A8E
jmp     short loc_10004AFC

loc_10004B3C:
call    sub_1000687F
test    eax, eax
jz      short loc_10004AF8
push    offset aFunctionFailed ; "Function failed"
push    331h
jmp     short loc_10004AEA

loc_10004B51:
call    sub_1000687F
test    eax, eax
jz      short loc_10004AF8
push    offset aFunctionFailed ; "Function failed"
push    337h
jmp     short loc_10004AEA
sub_100049A6 endp

; [00000026 BYTES: COLLAPSED FUNCTION std::wstring::wstring(std::wstring const &)]
; [0000001D BYTES: COLLAPSED FUNCTION std::string::assign(char const *)]



sub_10004BA9 proc near

arg_0= dword ptr  4

push    ebx
push    ebp
push    esi
push    edi
mov     esi, ecx
call    sub_10003E81
mov     ebp, eax
test    ebp, ebp
jz      loc_10004D64
mov     eax, [esi]
mov     ecx, esi
call    dword ptr [eax+8]
mov     ebx, eax
mov     eax, [ebx]
push    offset aComEoosGmTis2w ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    ebx
call    dword ptr [eax+18h]
test    eax, eax
jz      loc_10004D4F
mov     edi, [esp+10h+arg_0]
mov     ecx, [ebx]
push    eax
push    edi
push    ebx
call    dword ptr [ecx+80h]
cmp     al, 1
jnz     loc_10004D3A
push    ebp
push    edi
mov     ecx, esi
call    sub_10002A97
test    eax, eax
jnz     short loc_10004C2D
call    sub_1000687F
test    eax, eax
jz      short loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    16Ch

loc_10004C11:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004C1F:           ; pv
push    ebp
call    sub_10002887
pop     ecx
xor     eax, eax
jmp     loc_10004D87

loc_10004C2D:
push    ebp
push    edi
mov     ecx, esi
call    sub_10002BA7
test    eax, eax
jnz     short loc_10004C4F
call    sub_1000687F
test    eax, eax
jz      short loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    173h
jmp     short loc_10004C11

loc_10004C4F:
push    ebp
push    edi
mov     ecx, esi
call    sub_100043D6
test    eax, eax
jnz     short loc_10004C71
call    sub_1000687F
test    eax, eax
jz      short loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    17Ah
jmp     short loc_10004C11

loc_10004C71:
push    ebp
push    edi
mov     ecx, esi
call    sub_10002CB9
test    eax, eax
jnz     short loc_10004C96
call    sub_1000687F
test    eax, eax
jz      short loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    181h
jmp     loc_10004C11

loc_10004C96:
push    ebp
push    edi
mov     ecx, esi
call    sub_10002DD2
test    eax, eax
jnz     short loc_10004CBF
call    sub_1000687F
test    eax, eax
jz      loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    188h
jmp     loc_10004C11

loc_10004CBF:
push    ebp
push    edi
mov     ecx, esi
call    sub_10002EFD
test    eax, eax
jnz     short loc_10004CE8
call    sub_1000687F
test    eax, eax
jz      loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    18Fh
jmp     loc_10004C11

loc_10004CE8:
push    ebp
push    edi
mov     ecx, esi
call    sub_100049A6
test    eax, eax
jnz     short loc_10004D11
call    sub_1000687F
test    eax, eax
jz      loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    196h
jmp     loc_10004C11

loc_10004D11:
push    ebp
push    edi
mov     ecx, esi
call    sub_10003F03
test    eax, eax
jnz     short loc_10004D85
call    sub_1000687F
test    eax, eax
jz      loc_10004C1F
push    offset aFunctionFailed ; "Function failed"
push    19Dh
jmp     loc_10004C11

loc_10004D3A:
call    sub_1000687F
test    eax, eax
jz      short loc_10004D85
push    offset aInvalidObjectT ; "Invalid object type"
push    1A4h
jmp     short loc_10004D77

loc_10004D4F:
call    sub_1000687F
test    eax, eax
jz      short loc_10004D85
push    offset aInvalidClassOb ; "Invalid class object"
push    1A9h
jmp     short loc_10004D77

loc_10004D64:
call    sub_1000687F
test    eax, eax
jz      short loc_10004D85
push    offset aInvalidPointer ; "Invalid pointer"
push    1AEh

loc_10004D77:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004D85:
mov     eax, ebp

loc_10004D87:
pop     edi
pop     esi
pop     ebp
pop     ebx
retn    4
sub_10004BA9 endp



; Attributes: bp-based frame

sub_10004D8E proc near

var_54= byte ptr -54h
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= byte ptr -30h
var_2C= byte ptr -2Ch
var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019622 SIZE 00000035 BYTES

; __unwind { // loc_10019632
push    48h
mov     eax, offset loc_10019632
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     edi, ecx
mov     [ebp+var_34], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     ebx, eax
mov     eax, [ebx]
push    offset aComEoosGmTis2w_4 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    ebx
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10004DE3
call    sub_1000687F
test    eax, eax
jz      short loc_10004DD9
push    offset aClassNotFound ; "Class not found"
push    6D8h

loc_10004DCB:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004DD9:
xor     eax, eax

loc_10004DDB:
call    __EH_epilog3_GS
retn    8

loc_10004DE3:
mov     ecx, [ebx]
push    offset aLjavaLangStrin_1 ; "(Ljava/lang/String;)V"
push    offset aSetimmobilizer ; "setImmobilizerSecurityCode"
push    eax
push    ebx
call    dword ptr [ecx+84h]
mov     [ebp+var_38], eax
test    eax, eax
jnz     short loc_10004E13
call    sub_1000687F
test    eax, eax
jz      short loc_10004DD9
push    offset aInvalidMethodI ; "Invalid method id"
push    6E0h
jmp     short loc_10004DCB

loc_10004E13:
push    0
lea     ecx, [ebp+var_2C]
mov     [ebp+var_14], 0Fh
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
;   try {
and     [ebp+var_4], 0
mov     esi, [ebp+arg_0]
mov     al, [esi+12h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
mov     al, [esi+13h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
mov     al, [esi+14h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
mov     al, [esi+15h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
xor     esi, esi
inc     esi
push    esi             ; Size
lea     ecx, [ebp+var_2C]
call    sub_10001A1D
lea     eax, [ebp+var_2C]
push    eax
lea     eax, [ebp+var_54]
push    eax
call    sub_10001357
mov     ecx, eax
call    sub_1000257F
;   } // starts at 10004E24
;   try {
mov     byte ptr [ebp+var_4], 1
mov     edx, [edi]
push    eax
mov     ecx, edi
call    dword ptr [edx+14h]
mov     edi, eax
;   } // starts at 10004E8D
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_54]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
test    edi, edi
jnz     short loc_10004EE7
call    sub_1000687F
test    eax, eax
jz      short loc_10004ECF
mov     edx, [eax]
push    offset aInvalidObject ; "Invalid object"
push    6EFh
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004ECF:
xor     edi, edi
;   } // starts at 10004E9B

loc_10004ED1:
or      [ebp+var_4], 0FFFFFFFFh
push    0               ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     eax, edi
jmp     loc_10004DDB

loc_10004EE7:
push    edi
push    [ebp+var_38]
push    [ebp+var_34]
push    ebx
call    sub_10002739
add     esp, 10h
mov     edi, esi
jmp     short loc_10004ED1
; } // starts at 10004D8E
sub_10004D8E endp



; Attributes: bp-based frame

sub_10004EFB proc near

var_54= byte ptr -54h
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= byte ptr -30h
var_2C= byte ptr -2Ch
var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019622 SIZE 00000035 BYTES

; __unwind { // loc_10019632
push    48h
mov     eax, offset loc_10019632
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     edi, ecx
mov     [ebp+var_34], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     ebx, eax
mov     eax, [ebx]
push    offset aComEoosGmTis2w_4 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    ebx
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10004F50
call    sub_1000687F
test    eax, eax
jz      short loc_10004F46
push    offset aClassNotFound ; "Class not found"
push    700h

loc_10004F38:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10004F46:
xor     eax, eax

loc_10004F48:
call    __EH_epilog3_GS
retn    8

loc_10004F50:
mov     ecx, [ebx]
push    offset aLjavaLangStrin_1 ; "(Ljava/lang/String;)V"
push    offset aSetinfotainmen ; "setInfotainmentSecurityCode"
push    eax
push    ebx
call    dword ptr [ecx+84h]
mov     [ebp+var_38], eax
test    eax, eax
jnz     short loc_10004F80
call    sub_1000687F
test    eax, eax
jz      short loc_10004F46
push    offset aInvalidMethodI ; "Invalid method id"
push    708h
jmp     short loc_10004F38

loc_10004F80:
push    0
lea     ecx, [ebp+var_2C]
mov     [ebp+var_14], 0Fh
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
;   try {
and     [ebp+var_4], 0
mov     esi, [ebp+arg_0]
mov     al, [esi+16h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
mov     al, [esi+17h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
mov     al, [esi+18h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
mov     al, [esi+19h]
mov     [ebp+var_30], al
push    dword ptr [ebp+var_30] ; char
xor     esi, esi
inc     esi
push    esi             ; Size
lea     ecx, [ebp+var_2C]
call    sub_10001A1D
lea     eax, [ebp+var_2C]
push    eax
lea     eax, [ebp+var_54]
push    eax
call    sub_10001357
mov     ecx, eax
call    sub_1000257F
;   } // starts at 10004F91
;   try {
mov     byte ptr [ebp+var_4], 1
mov     edx, [edi]
push    eax
mov     ecx, edi
call    dword ptr [edx+14h]
mov     edi, eax
;   } // starts at 10004FFA
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_54]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
test    edi, edi
jnz     short loc_10005054
call    sub_1000687F
test    eax, eax
jz      short loc_1000503C
mov     edx, [eax]
push    offset aInvalidObject ; "Invalid object"
push    717h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000503C:
xor     edi, edi
;   } // starts at 10005008

loc_1000503E:
or      [ebp+var_4], 0FFFFFFFFh
push    0               ; SourceSize
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     eax, edi
jmp     loc_10004F48

loc_10005054:
push    edi
push    [ebp+var_38]
push    [ebp+var_34]
push    ebx
call    sub_10002739
add     esp, 10h
mov     edi, esi
jmp     short loc_1000503E
; } // starts at 10004EFB
sub_10004EFB endp

; [00000022 BYTES: COLLAPSED FUNCTION std::string::string(char const *)]
; [00000022 BYTES: COLLAPSED FUNCTION std::wstring::wstring(wchar_t const *)]


; Attributes: bp-based frame

; int __stdcall sub_100050AC(int, int, int Value)
sub_100050AC proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
Value= dword ptr  10h

; FUNCTION CHUNK AT 100196F2 SIZE 00000023 BYTES

; __unwind { // loc_100196FA
push    4
mov     eax, offset loc_100196FA
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
push    [ebp+Value]     ; Value
push    [ebp+arg_4]     ; int
push    [ebp+arg_0]     ; int
call    sub_100021FE
;   try {
and     [ebp+var_4], 0
mov     dword ptr [esi], offset off_1001C034
;   } // starts at 100050CB
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    0Ch
; } // starts at 100050AC
sub_100050AC endp



; Attributes: bp-based frame

sub_100050E3 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 100196F2 SIZE 00000023 BYTES

; __unwind { // loc_100196FA
push    4
mov     eax, offset loc_100196FA
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
call    sub_10002319
call    __EH_epilog3
retn
; } // starts at 100050E3
sub_100050E3 endp


loc_10005101:
push    esi
mov     esi, ecx
call    sub_100050E3
test    byte ptr [esp+8], 1
jz      short loc_10005117
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10005117:
mov     eax, esi
pop     esi
retn    4


; Attributes: bp-based frame

sub_1000511D proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019531 SIZE 00000026 BYTES

; __unwind { // loc_1001953C
push    4
mov     eax, offset loc_1001953C
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
lea     ecx, [esi+8]
mov     dword ptr [esi], offset off_1001B3A4
call    sub_1000236D
;   try {
and     [ebp+var_4], 0
and     dword ptr [esi+4], 0
;   } // starts at 1000513C
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 1000511D
sub_1000511D endp



; Attributes: bp-based frame

sub_10005150 proc near

pExceptionObject= byte ptr -34h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 34h
and     [ebp+var_4], 0
push    edi
mov     edi, ecx
cmp     dword ptr [edi+4], 0
jz      short loc_100051BD
push    esi
lea     esi, [edi+8]
mov     eax, [esi]
mov     ecx, esi
call    dword ptr [eax+4]
mov     edi, [edi+4]
mov     eax, [edi]
push    10002h
lea     ecx, [ebp+var_4]
push    ecx
push    edi
call    dword ptr [eax+18h]
test    eax, eax
mov     eax, [esi]
mov     ecx, esi
jz      short loc_100051B9
call    dword ptr [eax+0Ch]
push    73h ; 's'       ; Value
lea     eax, [ebp+var_8]
push    eax             ; int
lea     eax, [ebp+var_C]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+var_8], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_C], offset aCouldNotGetJni ; "Could not get JNI environment"
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100051B9:
call    dword ptr [eax+0Ch]
pop     esi

loc_100051BD:
mov     eax, [ebp+var_4]
pop     edi
leave
retn
sub_10005150 endp




sub_100051C3 proc near

arg_0= dword ptr  4

push    esi
mov     esi, ecx
cmp     esi, [esp+4+arg_0]
jz      short loc_100051D5
push    [esp+4+arg_0]
call    sub_100023DB

loc_100051D5:
mov     eax, esi
pop     esi
retn    4
sub_100051C3 endp



; Attributes: bp-based frame

sub_100051DB proc near

pExceptionObject= byte ptr -48h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_D= byte ptr -0Dh
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019657 SIZE 00000034 BYTES

; __unwind { // loc_10019670
push    3Ch
mov     eax, offset loc_10019670
call    __EH_prolog3
;   try {
and     [ebp+var_4], 0
mov     edi, [ebp+arg_4]
mov     eax, [ebp+arg_0]
and     [ebp+var_20], 0
mov     [ebp+var_1C], eax
test    edi, edi
jnz     short loc_1000522D
lea     eax, [ebp+var_14]
push    81h             ; Value
push    eax             ; int
mov     [ebp+var_14], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_18], offset aInvalidInputPo ; "Invalid input pointer"
lea     eax, [ebp+var_18]

loc_10005216:           ; int
push    eax
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_1000522D:
mov     eax, [ecx]
call    dword ptr [eax+8]
lea     ecx, [ebp+var_D]
push    ecx
mov     esi, eax
push    edi
mov     [ebp+var_D], 0
mov     eax, [esi]
push    esi
call    dword ptr [eax+294h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10005268
lea     eax, [ebp+var_18]
push    8Ch
push    eax
mov     [ebp+var_18], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_14], offset aCouldNotCreate ; "Could not create string object"
lea     eax, [ebp+var_14]
jmp     short loc_10005216

loc_10005268:
mov     ecx, [ebp+var_1C]
push    ebx             ; String
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100051E7
;   try {
and     [ebp+var_4], 0
mov     eax, [esi]
push    ebx
push    edi
push    esi
mov     [ebp+var_20], 1
call    dword ptr [eax+298h]
mov     eax, [ebp+var_1C]
call    __EH_epilog3
retn    8
;   } // starts at 10005271
; } // starts at 100051DB
sub_100051DB endp



; Attributes: bp-based frame

; int __stdcall sub_10005292(int, void *)
sub_10005292 proc near

var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100027F0 SIZE 0000000E BYTES
; FUNCTION CHUNK AT 1001968B SIZE 00000044 BYTES

; __unwind { // loc_100196B4
push    20h
mov     eax, offset loc_100196B4
call    __EH_prolog3
and     [ebp+var_10], 0
push    [ebp+arg_4]
mov     eax, [ecx]
lea     edx, [ebp+var_2C]
push    edx
call    dword ptr [eax+0Ch]
xor     ebx, ebx
inc     ebx
;   try {
mov     [ebp+var_4], ebx
cmp     dword ptr [eax+18h], 8
jb      short loc_100052BF
mov     eax, [eax+4]
jmp     short loc_100052C2

loc_100052BF:
add     eax, 4

loc_100052C2:           ; lpWideCharStr
push    eax
lea     ecx, [ebp+arg_4]
call    sub_10002796
;   } // starts at 100052B1
;   try {
mov     byte ptr [ebp+var_4], 2
push    dword ptr [eax] ; Str
mov     ecx, [ebp+arg_0]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
mov     [ebp+var_10], ebx
;   } // starts at 100052CB
;   try {
mov     byte ptr [ebp+var_4], bl
cmp     [ebp+arg_4], 0
jz      short loc_100052EE
push    [ebp+arg_4]     ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx
;   } // starts at 100052DC

loc_100052EE:
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; N
push    ebx             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn    8
;   } // starts at 100052EE
; } // starts at 10005292
sub_10005292 endp



; Attributes: bp-based frame

sub_10005308 proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 2Ch
call    dword ptr [eax+8]
mov     ecx, [ebp+arg_0]
cmp     dword ptr [ecx+18h], 8
mov     edx, [ecx+14h]
jb      short loc_10005324
mov     ecx, [ecx+4]
jmp     short loc_10005327

loc_10005324:
add     ecx, 4

loc_10005327:
push    esi
mov     esi, [eax]
push    edx
push    ecx
push    eax
call    dword ptr [esi+28Ch]
pop     esi
test    eax, eax
jnz     short locret_10005369
push    0A4h            ; Value
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotCreate ; "Could not create string object"
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

locret_10005369:
leave
retn    4
sub_10005308 endp



; Attributes: bp-based frame

sub_1000536D proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 2Ch
call    dword ptr [eax+8]
mov     ecx, [ebp+arg_0]
cmp     dword ptr [ecx+18h], 10h
jb      short loc_10005386
mov     ecx, [ecx+4]
jmp     short loc_10005389

loc_10005386:
add     ecx, 4

loc_10005389:
mov     edx, [eax]
push    ecx
push    eax
call    dword ptr [edx+29Ch]
test    eax, eax
jnz     short locret_100053C8
push    0B3h            ; Value
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotCreate ; "Could not create string object"
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

locret_100053C8:
leave
retn    4
sub_1000536D endp



; Attributes: bp-based frame

sub_100053CC proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 2Ch
cmp     [ebp+arg_0], 0
jnz     short loc_10005409
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aInvalidInputPo ; "Invalid input pointer"
push    0BEh            ; Value

loc_100053EB:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10005409:
mov     eax, [ecx]
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
mov     edi, eax
test    edi, edi
jnz     short loc_10005438
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotFindCl ; "Could not find class"
push    0C7h
jmp     short loc_100053EB

loc_10005438:
mov     eax, [esi]
push    edi
push    [ebp+arg_0]
push    esi
call    dword ptr [eax+80h]
test    al, al
jnz     short loc_1000545E
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aInvalidObjectT ; "Invalid object type"
push    0CCh
jmp     short loc_100053EB

loc_1000545E:
mov     eax, [esi]
push    offset aI       ; "()I"
push    offset aIntvalue ; "intValue"
push    edi
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_1000548E
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aInvalidMethod ; "Invalid method"
push    0D3h
jmp     loc_100053EB

loc_1000548E:
push    eax
push    [ebp+arg_0]
push    esi
call    sub_1000271E
add     esp, 0Ch
pop     edi
pop     esi
leave
retn    4
sub_100053CC endp



; Attributes: bp-based frame

sub_100054A1 proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 2Ch
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aJavaLangIntege ; "java/lang/Integer"
push    esi
call    dword ptr [eax+18h]
mov     edi, eax
test    edi, edi
jnz     short loc_100054F2
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotFindCl ; "Could not find class"
push    0E2h            ; Value

loc_100054D4:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100054F2:
mov     eax, [esi]
push    offset aIV      ; "(I)V"
push    offset aInit    ; "<init>"
push    edi
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_1000551F
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aInvalidMethod ; "Invalid method"
push    0E9h
jmp     short loc_100054D4

loc_1000551F:
push    [ebp+arg_0]
push    eax
push    edi
push    esi
call    sub_100026B5
add     esp, 10h
pop     edi
pop     esi
test    eax, eax
jnz     short locret_10005548
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotCreate_0 ; "Could not create object"
push    0F0h
jmp     short loc_100054D4

locret_10005548:
leave
retn    4
sub_100054A1 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_1000554C proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 2Ch
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aJavaLangByte ; "java/lang/Byte"
push    esi
call    dword ptr [eax+18h]
mov     edi, eax
test    edi, edi
jnz     short loc_1000559D
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotFindCl ; "Could not find class"
push    0FEh            ; Value

loc_1000557F:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_1000559D:
mov     eax, [esi]
push    offset aBV      ; "(B)V"
push    offset aInit    ; "<init>"
push    edi
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_100055CA
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aInvalidMethod ; "Invalid method"
push    105h
jmp     short loc_1000557F

loc_100055CA:
movzx   ecx, byte ptr [ebp+arg_0]
push    ecx
push    eax
push    edi
push    esi
call    sub_100026B5
add     esp, 10h
pop     edi
pop     esi
test    eax, eax
jnz     short locret_100055F5
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotCreate_0 ; "Could not create object"
push    10Ch
jmp     short loc_1000557F

locret_100055F5:
leave
retn    4
sub_1000554C endp ; sp-analysis failed



; Attributes: bp-based frame

sub_100055F9 proc near

pExceptionObject= byte ptr -28h
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 28h
cmp     [ebp+arg_4], 0
jnz     short loc_10005636
mov     [ebp+arg_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_8], offset aInvalidInputPo ; "Invalid input pointer"
push    119h            ; Value

loc_10005618:
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     eax, [ebp+arg_8]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10005636:
mov     eax, [ecx]
push    esi
call    dword ptr [eax+8]
push    [ebp+arg_4]
mov     esi, eax
mov     eax, [esi]
push    esi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10005660
mov     [ebp+arg_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_8], offset aCouldNotFindCl ; "Could not find class"
push    122h
jmp     short loc_10005618

loc_10005660:
push    [ebp+arg_8]
mov     ecx, [esi]
push    eax
push    [ebp+arg_0]
push    esi
call    dword ptr [ecx+2B0h]
pop     esi
test    eax, eax
jnz     short locret_1000568A
mov     [ebp+arg_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_8], offset aCouldNotCreate_1 ; "Could not create array object"
push    129h
jmp     short loc_10005618

locret_1000568A:
leave
retn    0Ch
sub_100055F9 endp



; Attributes: bp-based frame

sub_1000568E proc near

pExceptionObject= byte ptr -38h
var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100196CF SIZE 00000023 BYTES

; __unwind { // loc_100196D7
push    2Ch
mov     eax, offset loc_100196D7
call    __EH_prolog3
mov     ebx, ecx
xor     edi, edi
cmp     [ebp+arg_4], edi
jnz     short loc_100056D4
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_4], offset aInvalidInputPo ; "Invalid input pointer"
push    135h            ; Value

loc_100056B6:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100056D4:
mov     eax, [ebx]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aJavaLangString ; "java/lang/String"
push    esi
call    dword ptr [eax+18h]
cmp     eax, edi
jnz     short loc_100056FF
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_4], offset aCouldNotFindCl ; "Could not find class"
push    13Eh
jmp     short loc_100056B6

loc_100056FF:
mov     ecx, [esi]
push    edi
push    eax
push    [ebp+arg_0]
push    esi
call    dword ptr [ecx+2B0h]
mov     [ebp+var_10], eax
cmp     eax, edi
jnz     short loc_10005729
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_4], offset aCouldNotCreate_1 ; "Could not create array object"
push    145h
jmp     short loc_100056B6

loc_10005729:
cmp     [ebp+arg_0], edi
jbe     short loc_10005785

loc_1000572E:
mov     eax, [ebp+arg_4]
mov     eax, [eax+edi*4]
test    eax, eax
jz      short loc_10005770
push    eax             ; String
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
and     [ebp+var_4], 0
mov     eax, [ebx]
lea     ecx, [ebp+var_2C]
push    ecx
mov     ecx, ebx
call    dword ptr [eax+18h]
mov     ecx, [esi]
push    eax
push    edi
push    [ebp+var_10]
push    esi
call    dword ptr [ecx+2B8h]
;   } // starts at 10005741
or      [ebp+var_4], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_1000577F

loc_10005770:
mov     eax, [esi]
push    0
push    edi
push    [ebp+var_10]
push    esi
call    dword ptr [eax+2B8h]

loc_1000577F:
inc     edi
cmp     edi, [ebp+arg_0]
jb      short loc_1000572E

loc_10005785:
mov     eax, [ebp+var_10]
call    __EH_epilog3
retn    8
; } // starts at 1000568E
sub_1000568E endp



; Attributes: bp-based frame

sub_10005790 proc near

pExceptionObject= byte ptr -3Ch
var_14= byte ptr -14h
var_C= byte ptr -0Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 3Ch
push    ebx
push    esi
mov     ebx, ecx
mov     eax, [ebx]
push    edi
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aJavaLangString ; "java/lang/String"
push    edi
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_100057E2
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotFindCl ; "Could not find class"
push    160h            ; Value

loc_100057C4:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100057E2:
mov     esi, [ebp+arg_0]
mov     ecx, [esi+18h]
mov     edx, [edi]
push    0
push    eax
push    ecx
push    edi
call    dword ptr [edx+2B0h]
mov     [ebp+var_4], eax
test    eax, eax
jnz     short loc_10005811
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aCouldNotCreate_1 ; "Could not create array object"
push    167h
jmp     short loc_100057C4

loc_10005811:
mov     eax, [esi+14h]
push    esi
push    dword ptr [eax]
lea     ecx, [ebp+var_C]
call    sub_100040CA
push    esi
push    dword ptr [esi+14h]
lea     ecx, [ebp+var_14]
call    sub_100040CA
and     [ebp+arg_0], 0
jmp     short loc_1000585E

loc_10005831:
mov     esi, [ebx]
lea     ecx, [ebp+var_C]
add     esi, 18h
call    sub_10003EB8
push    eax
mov     ecx, ebx
call    dword ptr [esi]
mov     ecx, [edi]
push    eax
push    [ebp+arg_0]
push    [ebp+var_4]
push    edi
call    dword ptr [ecx+2B8h]
lea     ecx, [ebp+var_C]
call    sub_1000289B
inc     [ebp+arg_0]

loc_1000585E:
lea     eax, [ebp+var_14]
push    eax
lea     ecx, [ebp+var_C]
call    sub_10009C9D
test    al, al
jz      short loc_10005831
mov     eax, [ebp+var_4]
pop     edi
pop     esi
pop     ebx
leave
retn    4
sub_10005790 endp



; Attributes: bp-based frame

sub_10005878 proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 2Ch
cmp     [ebp+arg_0], 0
jnz     short loc_100058B5
push    17Ah            ; Value
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_4], offset aInvalidInputPo ; "Invalid input pointer"
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100058B5:
mov     eax, [ecx]
call    dword ptr [eax+8]
push    [ebp+arg_0]
mov     ecx, [eax]
push    eax
call    dword ptr [ecx+2ACh]
leave
retn    4
sub_10005878 endp



; Attributes: bp-based frame

sub_100058CA proc near

pExceptionObject= byte ptr -28h
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 28h
cmp     [ebp+arg_0], 0
jnz     short loc_10005907
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_4], offset aInvalidInputPo ; "Invalid input pointer"
push    187h            ; Value

loc_100058E9:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10005907:
cmp     [ebp+arg_4], 0
jnz     short loc_10005922
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_4], offset aInvalidInputPo ; "Invalid input pointer"
push    18Ch
jmp     short loc_100058E9

loc_10005922:
mov     eax, [ecx]
push    esi
push    edi
call    dword ptr [eax+8]
push    [ebp+arg_0]
mov     esi, eax
mov     eax, [esi]
push    esi
call    dword ptr [eax+18h]
mov     edi, eax
test    edi, edi
jnz     short loc_1000594F
mov     [ebp+arg_0], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_4], offset aCouldNotFindCl ; "Could not find class"
push    195h
jmp     short loc_100058E9

loc_1000594F:
push    [ebp+arg_4]
mov     eax, [esi]
push    edi
push    esi
call    dword ptr [eax+38h]
mov     eax, [esi]
push    edi
push    esi
call    dword ptr [eax+5Ch]
pop     edi
pop     esi
leave
retn    8
sub_100058CA endp



; Attributes: bp-based frame

sub_10005966 proc near

pExceptionObject= byte ptr -30h
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 30h
push    esi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    esi
call    dword ptr [eax+3Ch]
test    eax, eax
jz      short loc_100059B5
mov     eax, [esi]
push    esi
call    dword ptr [eax+40h]
push    1A4h            ; Value
lea     eax, [ebp+var_4]
push    eax             ; int
lea     eax, [ebp+var_8]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+var_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+var_8], offset aAJavaException ; "A java exception was thrown"
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100059B5:
pop     esi
leave
retn
sub_10005966 endp



; Attributes: bp-based frame

sub_100059B8 proc near

pExceptionObject= byte ptr -28h
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 28h
cmp     [ebp+arg_4], 0
jnz     short loc_100059F5
mov     [ebp+arg_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_0], offset aInvalidInputPo ; "Invalid input pointer"
push    1ADh            ; Value

loc_100059D7:
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_100059F5:
mov     eax, [ecx]
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
test    esi, esi
jnz     short loc_10005A17
mov     [ebp+arg_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_0], offset aInvalidEnviron ; "Invalid environment pointer"
push    1B4h
jmp     short loc_100059D7

loc_10005A17:
push    [ebp+arg_0]
mov     eax, [esi]
push    esi
call    dword ptr [eax+2C0h]
mov     edi, eax
test    edi, edi
jnz     short loc_10005A3E
mov     [ebp+arg_4], offset aCommonIncludeJ ; "..\\..\\..\\..\\common\\include\\jni\\j"...
mov     [ebp+arg_0], offset aCouldNotCreate_0 ; "Could not create object"
push    1BBh
jmp     short loc_100059D7

loc_10005A3E:
push    [ebp+arg_4]
mov     eax, [esi]
push    [ebp+arg_0]
push    0
push    edi
push    esi
call    dword ptr [eax+340h]
mov     eax, edi
pop     edi
pop     esi
leave
retn    8
sub_100059B8 endp



; Attributes: bp-based frame

sub_10005A58 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019557 SIZE 00000023 BYTES

; __unwind { // loc_1001955F
push    4
mov     eax, offset loc_1001955F
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
call    sub_1000511D
;   try {
and     [ebp+var_4], 0
mov     dword ptr [esi], offset off_1001B3F4
;   } // starts at 10005A6E
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 10005A58
sub_10005A58 endp



; Attributes: bp-based frame

sub_10005A84 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019738 SIZE 00000025 BYTES

; __unwind { // loc_10019742
push    4
mov     eax, offset loc_10019742
call    __EH_prolog3
mov     esi, offset stru_10024388
push    esi             ; lpCriticalSection
call    ds:EnterCriticalSection
cmp     dword_10024380, 0
jnz     short loc_10005ACC
push    28h ; '('       ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
mov     ecx, eax
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
test    ecx, ecx
jz      short loc_10005AC1
call    sub_10005A58
jmp     short loc_10005AC3

loc_10005AC1:
xor     eax, eax
;   } // starts at 10005AB2

loc_10005AC3:
or      [ebp+var_4], 0FFFFFFFFh
mov     dword_10024380, eax

loc_10005ACC:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
mov     eax, dword_10024380
call    __EH_epilog3
retn
; } // starts at 10005A84
sub_10005A84 endp



; Attributes: thunk

sub_10005ADE proc near
jmp     sub_10005150
sub_10005ADE endp



; Attributes: bp-based frame

sub_10005AE3 proc near

pExceptionObject= byte ptr -2Ch
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 2Ch
push    ebx
push    esi
push    edi
mov     edi, ecx
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_3 ; "com/eoos/gm/tis2web/sas/common/model/VI"...
push    esi
call    dword ptr [eax+18h]
mov     ebx, eax
test    ebx, ebx
jnz     short loc_10005B37
mov     [ebp+arg_0], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotFindCl ; "Could not find class"
push    0D4h            ; Value

loc_10005B19:
lea     eax, [ebp+arg_0]
push    eax             ; int
lea     eax, [ebp+var_4]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10005B37:
mov     eax, [esi]
push    offset aLjavaLangStrin_0 ; "(Ljava/lang/String;)Lcom/eoos/gm/tis2we"...
push    offset aGetinstance ; "getInstance"
push    ebx
push    esi
call    dword ptr [eax+1C4h]
mov     [ebp+var_4], eax
test    eax, eax
jnz     short loc_10005B67
mov     [ebp+arg_0], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotGetMet ; "Could not get method"
push    0DBh
jmp     short loc_10005B19

loc_10005B67:
push    [ebp+arg_0]
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+14h]
push    eax
push    [ebp+var_4]
push    ebx
push    esi
call    sub_10002754
add     esp, 10h
pop     edi
pop     esi
pop     ebx
test    eax, eax
jnz     short locret_10005B9E
mov     [ebp+arg_0], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotCreate_2 ; "Could not create VIN object"
push    0E2h
jmp     loc_10005B19

locret_10005B9E:
leave
retn    4
sub_10005AE3 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_10005BA2 proc near

pExceptionObject= byte ptr -30h
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 30h
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_4 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
mov     edi, eax
test    edi, edi
jnz     short loc_10005BF3
lea     eax, [ebp+var_4]
push    0F0h            ; Value
push    eax             ; int
mov     [ebp+var_4], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_8], offset aCouldNotFindCl ; "Could not find class"
lea     eax, [ebp+var_8]

loc_10005BDC:           ; int
push    eax
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10005BF3:
mov     eax, [esi]
push    offset aV       ; "()V"
push    offset aInit    ; "<init>"
push    edi
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_10005C27
mov     [ebp+var_8], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotGetMet ; "Could not get method"
push    0F7h

loc_10005C1E:
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_4]
jmp     short loc_10005BDC

loc_10005C27:
push    eax
push    edi
push    esi
call    sub_100026B5
add     esp, 0Ch
pop     edi
pop     esi
test    eax, eax
jnz     short locret_10005C4D
mov     [ebp+var_8], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotCreate_3 ; "Could not create VIN tuple"
push    0FEh
jmp     short loc_10005C1E

locret_10005C4D:
leave
retn
sub_10005BA2 endp ; sp-analysis failed



; Attributes: bp-based frame

sub_10005C4F proc near

pExceptionObject= byte ptr -30h
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
mov     eax, [ecx]
sub     esp, 30h
push    esi
push    edi
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_5 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
mov     edi, eax
test    edi, edi
jnz     short loc_10005CA0
lea     eax, [ebp+var_4]
push    10Ch            ; Value
push    eax             ; int
mov     [ebp+var_4], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_8], offset aCouldNotFindCl ; "Could not find class"
lea     eax, [ebp+var_8]

loc_10005C89:           ; int
push    eax
lea     ecx, [ebp+pExceptionObject]
call    sub_100050AC
push    offset stru_10020228 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10005CA0:
mov     eax, [esi]
push    offset aV       ; "()V"
push    offset aInit    ; "<init>"
push    edi
push    esi
call    dword ptr [eax+84h]
test    eax, eax
jnz     short loc_10005CD4
mov     [ebp+var_8], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotGetMet ; "Could not get method"
push    113h

loc_10005CCB:
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_4]
jmp     short loc_10005C89

loc_10005CD4:
push    eax
push    edi
push    esi
call    sub_100026B5
add     esp, 0Ch
pop     edi
pop     esi
test    eax, eax
jnz     short locret_10005CFA
mov     [ebp+var_8], offset aJnihelperCpp ; ".\\JNIHelper.cpp"
mov     [ebp+var_4], offset aCouldNotCreate_4 ; "Could not create Seed tuple"
push    11Ah
jmp     short loc_10005CCB

locret_10005CFA:
leave
retn
sub_10005C4F endp ; sp-analysis failed



; Attributes: bp-based frame

sub_10005CFC proc near

var_54= byte ptr -54h
var_38= byte ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= byte ptr -2Ch
Str= dword ptr -28h
var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019622 SIZE 00000035 BYTES

; __unwind { // loc_10019632
push    48h
mov     eax, offset loc_10019632
call    __EH_prolog3_GS
mov     eax, [ebp+arg_4]
mov     edi, ecx
mov     [ebp+var_30], eax
mov     eax, [edi]
call    dword ptr [eax+8]
mov     esi, eax
mov     eax, [esi]
push    offset aComEoosGmTis2w_4 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    esi
call    dword ptr [eax+18h]
xor     ebx, ebx
cmp     eax, ebx
jnz     short loc_10005D53
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10005D49
push    offset aClassNotFound ; "Class not found"
push    6B0h

loc_10005D3B:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10005D49:
xor     eax, eax

loc_10005D4B:
call    __EH_epilog3_GS
retn    8

loc_10005D53:
mov     ecx, [esi]
push    offset aLcomEoosGmTis2_3 ; "(Lcom/eoos/gm/tis2web/sas/common/model/"...
push    offset aSetvin  ; "setVIN"
push    eax
push    esi
call    dword ptr [ecx+84h]
mov     [ebp+var_34], eax
cmp     eax, ebx
jnz     short loc_10005D83
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10005D49
push    offset aInvalidMethodI ; "Invalid method id"
push    6B8h
jmp     short loc_10005D3B

loc_10005D83:
push    ebx
lea     ecx, [ebp+var_2C]
mov     [ebp+var_14], 0Fh
call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
;   try {
mov     [ebp+var_4], ebx

loc_10005D96:
mov     eax, [ebp+arg_0]
mov     al, [ebx+eax]
mov     [ebp+var_38], al
push    dword ptr [ebp+var_38] ; char
lea     ecx, [ebp+var_2C]
push    1               ; Size
call    sub_10001A1D
inc     ebx
cmp     ebx, 11h
jb      short loc_10005D96
cmp     [ebp+var_14], 10h
mov     eax, [ebp+Str]
jnb     short loc_10005DBE
lea     eax, [ebp+Str]

loc_10005DBE:           ; Str
push    eax
lea     ecx, [ebp+var_54]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   } // starts at 10005D93
;   try {
mov     byte ptr [ebp+var_4], 1
lea     eax, [ebp+var_54]
push    eax
mov     ecx, edi
call    sub_10005AE3
mov     edi, eax
;   } // starts at 10005DC7
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_54]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
test    edi, edi
jnz     short loc_10005E26
call    sub_1000687F
test    eax, eax
jz      short loc_10005E0D
mov     edx, [eax]
push    offset aInvalidObject ; "Invalid object"
push    6C7h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10005E0D:
xor     esi, esi
;   } // starts at 10005DD8

loc_10005E0F:
or      [ebp+var_4], 0FFFFFFFFh
push    0               ; SourceSize
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     eax, esi
jmp     loc_10005D4B

loc_10005E26:
push    edi
push    [ebp+var_34]
push    [ebp+var_30]
push    esi
call    sub_10002739
xor     esi, esi
add     esp, 10h
inc     esi
jmp     short loc_10005E0F
; } // starts at 10005CFC
sub_10005CFC endp



; Attributes: bp-based frame

sub_10005E3B proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 0Ch
push    ebx
push    esi
push    edi
xor     esi, esi
push    esi
mov     edi, ecx
mov     eax, [edi]
push    offset aComEoosGmTis2w_5 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    33h ; '3'
mov     [ebp+var_4], esi
call    dword ptr [eax+28h]
mov     [ebp+var_C], eax
cmp     eax, esi
jz      loc_1000600F
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+8]
mov     [ebp+var_8], esi
mov     esi, [ebp+arg_0]
mov     ebx, eax
add     esi, 132h

loc_10005E78:
cmp     byte ptr [esi+2], 0FFh
jnz     short loc_10005E90
cmp     byte ptr [esi+3], 0FFh
jnz     short loc_10005E90
cmp     byte ptr [esi+4], 0FFh
jnz     short loc_10005E90
cmp     byte ptr [esi+5], 0FFh
jz      short loc_10005EFE

loc_10005E90:
mov     ecx, edi
call    sub_10005C4F
mov     [ebp+arg_0], eax
test    eax, eax
jz      loc_10005FA2
push    eax
push    esi
mov     ecx, edi
call    sub_1000397A
test    eax, eax
jz      loc_10005F4E
push    [ebp+arg_0]
mov     ecx, edi
push    esi
call    sub_10003A4A
test    eax, eax
jz      loc_10005F63
push    [ebp+arg_0]
mov     ecx, edi
push    esi
call    sub_10003B1B
test    eax, eax
jz      loc_10005F78
push    [ebp+arg_0]
mov     ecx, edi
push    esi
call    sub_10003BEC
test    eax, eax
jz      loc_10005F8D
push    [ebp+arg_0]
mov     eax, [ebx]
push    [ebp+var_8]
push    [ebp+var_C]
push    ebx
call    dword ptr [eax+2B8h]

loc_10005EFE:
inc     [ebp+var_8]
add     esi, 8
cmp     [ebp+var_8], 33h ; '3'
mov     [ebp+var_4], 1
jb      loc_10005E78
push    [ebp+arg_4]
mov     eax, [ebx]
push    ebx
call    dword ptr [eax+7Ch]
test    eax, eax
jnz     loc_10005FC9
call    sub_1000687F
test    eax, eax
jz      short loc_10005F47
push    offset aInvalidClassOb ; "Invalid class object"
push    763h

loc_10005F39:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10005F47:
xor     eax, eax
jmp     loc_10006033

loc_10005F4E:
call    sub_1000687F
test    eax, eax
jz      short loc_10005FC3
push    offset aFunctionFailed ; "Function failed"
push    737h
jmp     short loc_10005FB5

loc_10005F63:
call    sub_1000687F
test    eax, eax
jz      short loc_10005FC3
push    offset aFunctionFailed ; "Function failed"
push    73Dh
jmp     short loc_10005FB5

loc_10005F78:
call    sub_1000687F
test    eax, eax
jz      short loc_10005FC3
push    offset aFunctionFailed ; "Function failed"
push    743h
jmp     short loc_10005FB5

loc_10005F8D:
call    sub_1000687F
test    eax, eax
jz      short loc_10005FC3
push    offset aFunctionFailed ; "Function failed"
push    749h
jmp     short loc_10005FB5

loc_10005FA2:
call    sub_1000687F
test    eax, eax
jz      short loc_10005FC3
push    offset aCouldNotCreate_0 ; "Could not create object"
push    753h

loc_10005FB5:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10005FC3:
and     [ebp+var_4], 0
jmp     short loc_10006030

loc_10005FC9:
mov     ecx, [ebx]
push    offset aLcomEoosGmTis2_2 ; "([Lcom/eoos/gm/tis2web/sas/server/imple"...
push    offset aSetseedtuples ; "setSeedTuples"
push    eax
push    ebx
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_10005FFD
call    sub_1000687F
test    eax, eax
jz      loc_10005F47
push    offset aInvalidClassOb ; "Invalid class object"
push    76Bh
jmp     loc_10005F39

loc_10005FFD:
push    [ebp+var_C]
push    eax
push    [ebp+arg_4]
push    ebx
call    sub_10002739
add     esp, 10h
jmp     short loc_10006030

loc_1000600F:
call    sub_1000687F
cmp     eax, esi
jz      short loc_10006030
mov     edx, [eax]
push    offset aInvalidPointer ; "Invalid pointer"
push    774h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006030:
mov     eax, [ebp+var_4]

loc_10006033:
pop     edi
pop     esi
pop     ebx
leave
retn    8
sub_10005E3B endp



; Attributes: bp-based frame

sub_1000603A proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100196F2 SIZE 00000023 BYTES

; __unwind { // loc_100196FA
push    4
mov     eax, offset loc_100196FA
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
push    [ebp+arg_0]
call    sub_1000250E
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
mov     ecx, esi
mov     dword ptr [esi], offset off_1001C034
call    sub_100051C3
;   } // starts at 10006053
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 1000603A
sub_1000603A endp



; Attributes: bp-based frame

sub_10006075 proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 0Ch
push    ebx
push    esi
push    edi
xor     ebx, ebx
push    ebx
mov     esi, ecx
mov     eax, [esi]
push    offset aComEoosGmTis2w_4 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    0Bh
mov     [ebp+var_4], ebx
call    dword ptr [eax+28h]
mov     [ebp+var_C], eax
cmp     eax, ebx
jz      loc_10006207
mov     eax, [esi]
mov     ecx, esi
call    dword ptr [eax+8]
mov     [ebp+var_8], ebx
mov     ebx, [ebp+arg_0]
mov     edi, eax
add     ebx, 14h

loc_100060AF:
cmp     byte ptr [ebx], 0FFh
jz      short loc_1000610F
mov     ecx, esi
call    sub_10005BA2
mov     [ebp+arg_0], eax
test    eax, eax
jz      loc_1000619A
push    eax
push    ebx
mov     ecx, esi
call    sub_10005CFC
test    eax, eax
jz      loc_1000615B
push    [ebp+arg_0]
mov     ecx, esi
push    ebx
call    sub_10004D8E
test    eax, eax
jz      loc_10006170
push    [ebp+arg_0]
mov     ecx, esi
push    ebx
call    sub_10004EFB
test    eax, eax
jz      loc_10006185
push    [ebp+arg_0]
mov     eax, [edi]
push    [ebp+var_8]
push    [ebp+var_C]
push    edi
call    dword ptr [eax+2B8h]

loc_1000610F:
inc     [ebp+var_8]
add     ebx, 1Ah
cmp     [ebp+var_8], 0Bh
mov     [ebp+var_4], 1
jb      short loc_100060AF
push    [ebp+arg_4]
mov     eax, [edi]
push    edi
call    dword ptr [eax+7Ch]
test    eax, eax
jnz     loc_100061C1
call    sub_1000687F
test    eax, eax
jz      short loc_10006154
push    offset aInvalidClassOb ; "Invalid class object"
push    691h

loc_10006146:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006154:
xor     eax, eax
jmp     loc_1000622B

loc_1000615B:
call    sub_1000687F
test    eax, eax
jz      short loc_100061BB
push    offset aFunctionFailed ; "Function failed"
push    66Bh
jmp     short loc_100061AD

loc_10006170:
call    sub_1000687F
test    eax, eax
jz      short loc_100061BB
push    offset aFunctionFailed ; "Function failed"
push    671h
jmp     short loc_100061AD

loc_10006185:
call    sub_1000687F
test    eax, eax
jz      short loc_100061BB
push    offset aFunctionFailed ; "Function failed"
push    677h
jmp     short loc_100061AD

loc_1000619A:
call    sub_1000687F
test    eax, eax
jz      short loc_100061BB
push    offset aCouldNotCreate_0 ; "Could not create object"
push    681h

loc_100061AD:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100061BB:
and     [ebp+var_4], 0
jmp     short loc_10006228

loc_100061C1:
mov     ecx, [edi]
push    offset aLcomEoosGmTis2_4 ; "([Lcom/eoos/gm/tis2web/sas/server/imple"...
push    offset aSetvintuples ; "setVINTuples"
push    eax
push    edi
call    dword ptr [ecx+84h]
test    eax, eax
jnz     short loc_100061F5
call    sub_1000687F
test    eax, eax
jz      loc_10006154
push    offset aInvalidClassOb ; "Invalid class object"
push    699h
jmp     loc_10006146

loc_100061F5:
push    [ebp+var_C]
push    eax
push    [ebp+arg_4]
push    edi
call    sub_10002739
add     esp, 10h
jmp     short loc_10006228

loc_10006207:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10006228
mov     edx, [eax]
push    offset aInvalidPointer ; "Invalid pointer"
push    6A2h
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006228:
mov     eax, [ebp+var_4]

loc_1000622B:
pop     edi
pop     esi
pop     ebx
leave
retn    8
sub_10006075 endp




sub_10006232 proc near

arg_0= dword ptr  4

push    ebx
push    ebp
push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
xor     ebx, ebx
call    dword ptr [eax+8]
mov     edi, eax
mov     eax, [edi]
push    offset aComEoosGmTis2w_7 ; "com/eoos/gm/tis2web/sas/server/implemen"...
push    edi
call    dword ptr [eax+18h]
mov     ebp, eax
test    ebp, ebp
jnz     short loc_1000627A
call    sub_1000687F
test    eax, eax
jz      short loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    54Ah

loc_10006265:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006273:
xor     eax, eax
jmp     loc_10006424

loc_1000627A:
mov     eax, [edi]
push    offset aV       ; "()V"
push    offset aInit    ; "<init>"
push    ebp
push    edi
call    dword ptr [eax+84h]
test    eax, eax
jz      loc_10006401
push    eax
push    ebp
push    edi
call    sub_100026B5
mov     ebx, eax
add     esp, 0Ch
test    ebx, ebx
jz      loc_100063EC
mov     edi, [esp+10h+arg_0]
push    ebx
push    edi
mov     ecx, esi
call    sub_100034F2
test    eax, eax
jnz     short loc_100062D1
call    sub_1000687F
test    eax, eax
jz      short loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    557h
jmp     short loc_10006265

loc_100062D1:
push    ebx
push    edi
mov     ecx, esi
call    sub_100035B1
test    eax, eax
jnz     short loc_100062F6
call    sub_1000687F
test    eax, eax
jz      short loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    55Dh
jmp     loc_10006265

loc_100062F6:
push    ebx
push    edi
mov     ecx, esi
call    sub_10003670
test    eax, eax
jnz     short loc_1000631F
call    sub_1000687F
test    eax, eax
jz      loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    563h
jmp     loc_10006265

loc_1000631F:
push    ebx
push    edi
mov     ecx, esi
call    sub_100036F0
test    eax, eax
jnz     short loc_10006348
call    sub_1000687F
test    eax, eax
jz      loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    569h
jmp     loc_10006265

loc_10006348:
push    ebx
push    edi
mov     ecx, esi
call    sub_100037C1
test    eax, eax
jnz     short loc_10006371
call    sub_1000687F
test    eax, eax
jz      loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    56Fh
jmp     loc_10006265

loc_10006371:
push    ebx
push    edi
mov     ecx, esi
call    sub_100038A9
test    eax, eax
jnz     short loc_1000639A
call    sub_1000687F
test    eax, eax
jz      loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    575h
jmp     loc_10006265

loc_1000639A:
push    ebx
push    edi
mov     ecx, esi
call    sub_10006075
test    eax, eax
jnz     short loc_100063C3
call    sub_1000687F
test    eax, eax
jz      loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    57Bh
jmp     loc_10006265

loc_100063C3:
push    ebx
push    edi
mov     ecx, esi
call    sub_10005E3B
test    eax, eax
jnz     short loc_10006422
call    sub_1000687F
test    eax, eax
jz      loc_10006273
push    offset aFunctionFailed ; "Function failed"
push    581h
jmp     loc_10006265

loc_100063EC:
call    sub_1000687F
test    eax, eax
jz      short loc_10006422
push    offset aInvalidObject ; "Invalid object"
push    587h
jmp     short loc_10006414

loc_10006401:
call    sub_1000687F
test    eax, eax
jz      short loc_10006422
push    offset aInvalidMethodI ; "Invalid method id"
push    58Ch

loc_10006414:
mov     edx, [eax]
push    offset aJnihelperCpp ; ".\\JNIHelper.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006422:
mov     eax, ebx

loc_10006424:
pop     edi
pop     esi
pop     ebp
pop     ebx
retn    4
sub_10006232 endp




; int __cdecl sub_1000642B(wchar_t *Buffer, size_t BufferCount, wchar_t *Format, char ArgList)
sub_1000642B proc near

Buffer= dword ptr  4
BufferCount= dword ptr  8
Format= dword ptr  0Ch
ArgList= byte ptr  10h

lea     eax, [esp+ArgList]
push    eax             ; ArgList
push    0               ; Locale
push    [esp+8+Format]  ; Format
push    [esp+0Ch+BufferCount] ; BufferCount
push    [esp+10h+Buffer] ; Buffer
call    __vswprintf_c_l
add     esp, 14h
retn
sub_1000642B endp




sub_10006447 proc near
mov     dword ptr [ecx], offset off_1001C444
retn
sub_10006447 endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_2]
; START OF FUNCTION CHUNK FOR sub_100089D1

loc_1000646B:
push    esi
mov     esi, offset stru_100243A8
push    esi             ; lpCriticalSection
call    ds:EnterCriticalSection
mov     ecx, dword_100243A0
test    ecx, ecx
jz      short loc_1000648F
mov     eax, [ecx]
push    1
call    dword ptr [eax]
and     dword_100243A0, 0

loc_1000648F:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
pop     esi
retn
; END OF FUNCTION CHUNK FOR sub_100089D1



sub_10006498 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
or      [ecx+0Ch], eax
retn    4
sub_10006498 endp




sub_100064A2 proc near
push    esi
mov     esi, ecx
mov     eax, [esi+8]
test    eax, eax
jz      short loc_100064B7
push    eax             ; Block
call    _free
and     dword ptr [esi+8], 0
pop     ecx

loc_100064B7:
pop     esi
retn
sub_100064A2 endp



; Attributes: bp-based frame

; int __stdcall sub_100064B9(LPCWSTR lpFileName, int)
sub_100064B9 proc near

var_4= dword ptr -4
lpFileName= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    edi
push    offset stru_100243A8 ; lpCriticalSection
mov     esi, ecx
call    ds:EnterCriticalSection
xor     edi, edi
mov     [ebp+var_4], edi
cmp     [ebp+lpFileName], edi
jz      short loc_10006532
mov     eax, [esi]
push    ebx
mov     ecx, esi
call    dword ptr [eax+8]
xor     ebx, ebx
cmp     [ebp+arg_4], edi
push    edi             ; hTemplateFile
setnz   bl
push    edi             ; dwFlagsAndAttributes
lea     ebx, [ebx+ebx+2]
push    ebx             ; dwCreationDisposition
push    edi             ; lpSecurityAttributes
push    1               ; dwShareMode
push    40000000h       ; dwDesiredAccess
push    [ebp+lpFileName] ; lpFileName
call    ds:CreateFileW
mov     [esi+4], eax
cmp     eax, 0FFFFFFFFh
jz      short loc_10006531
push    2               ; dwMoveMethod
push    edi             ; lpDistanceToMoveHigh
push    edi             ; lDistanceToMove
push    eax             ; hFile
call    ds:SetFilePointer
cmp     ebx, 2
jnz     short loc_1000652A
mov     eax, [esi]
lea     ecx, [ebp+lpFileName]
push    ecx
push    ebx
mov     ecx, esi
mov     byte ptr [ebp+lpFileName], 0FFh
mov     byte ptr [ebp+lpFileName+1], 0FEh
call    dword ptr [eax+14h]

loc_1000652A:
mov     [ebp+var_4], 1

loc_10006531:
pop     ebx

loc_10006532:           ; lpCriticalSection
push    offset stru_100243A8
call    ds:LeaveCriticalSection
mov     eax, [ebp+var_4]
pop     edi
pop     esi
leave
retn    8
sub_100064B9 endp




sub_10006546 proc near
push    ebx
push    esi
push    edi
mov     edi, offset stru_100243A8
push    edi             ; lpCriticalSection
mov     esi, ecx
call    ds:EnterCriticalSection
mov     eax, [esi+4]
xor     ebx, ebx
test    eax, eax
jz      short loc_1000656D
push    eax             ; hObject
call    ds:CloseHandle
and     dword ptr [esi+4], 0
mov     ebx, eax

loc_1000656D:           ; lpCriticalSection
push    edi
call    ds:LeaveCriticalSection
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn
sub_10006546 endp



; Attributes: bp-based frame

; int __stdcall sub_1000657A(wchar_t *String)
sub_1000657A proc near

var_8= dword ptr -8
var_4= dword ptr -4
String= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    offset stru_100243A8 ; lpCriticalSection
mov     [ebp+var_8], ecx
call    ds:EnterCriticalSection
and     [ebp+var_4], 0
cmp     [ebp+String], 0
jz      loc_1000661B
push    ebx
push    esi
push    edi
push    [ebp+String]    ; String
call    _wcslen
mov     esi, offset asc_1001C470 ; "\r\n"
push    esi             ; String
mov     edi, eax
call    _wcslen
lea     ebx, [edi+eax+1]
xor     ecx, ecx
push    2
pop     edx
mov     eax, ebx
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jz      short loc_10006618
push    esi
push    [ebp+String]
push    offset aSS      ; "%s%s"
push    ebx             ; BufferCount
push    edi             ; Buffer
call    _swprintf_s
add     esp, 14h
test    eax, eax
jle     short loc_10006611
push    edi             ; String
call    _wcslen
and     [ebp+String], 0
pop     ecx
push    0               ; lpOverlapped
lea     ecx, [ebp+String]
push    ecx             ; lpNumberOfBytesWritten
add     eax, eax
push    eax             ; nNumberOfBytesToWrite
mov     eax, [ebp+var_8]
push    edi             ; lpBuffer
push    dword ptr [eax+4] ; hFile
call    ds:WriteFile
mov     [ebp+var_4], eax

loc_10006611:           ; void *
push    edi
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

loc_10006618:
pop     edi
pop     esi
pop     ebx

loc_1000661B:           ; lpCriticalSection
push    offset stru_100243A8
call    ds:LeaveCriticalSection
mov     eax, [ebp+var_4]
leave
retn    4
sub_1000657A endp



; Attributes: bp-based frame

; int __stdcall sub_1000662D(DWORD nNumberOfBytesToWrite, LPCVOID lpBuffer)
sub_1000662D proc near

NumberOfBytesWritten= dword ptr -4
nNumberOfBytesToWrite= dword ptr  8
lpBuffer= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
push    edi
mov     esi, offset stru_100243A8
push    esi             ; lpCriticalSection
mov     edi, ecx
call    ds:EnterCriticalSection
xor     ebx, ebx
cmp     [ebp+lpBuffer], ebx
jz      short loc_10006662
push    ebx             ; lpOverlapped
lea     eax, [ebp+NumberOfBytesWritten]
push    eax             ; lpNumberOfBytesWritten
push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
mov     [ebp+NumberOfBytesWritten], ebx
push    [ebp+lpBuffer]  ; lpBuffer
push    dword ptr [edi+4] ; hFile
call    ds:WriteFile
mov     ebx, eax

loc_10006662:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
leave
retn    8
sub_1000662D endp



; Attributes: bp-based frame fpd=1000h

sub_10006672 proc near

var_1080= dword ptr -1080h
SystemTime= _SYSTEMTIME ptr -107Ch
var_106C= dword ptr -106Ch
var_1068= dword ptr -1068h
Buffer= word ptr -1064h
var_64= word ptr -64h
Destination= word ptr -24h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
lea     ebp, [esp-1000h]
mov     eax, 1080h
call    __alloca_probe
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+1000h+var_4], eax
mov     eax, [ebp+1000h+arg_4]
push    ebx
push    esi
push    edi
mov     [ebp+1000h+var_1080], eax
mov     eax, [ebp+1000h+arg_C]
mov     ebx, offset stru_100243A8
push    ebx             ; lpCriticalSection
mov     esi, ecx
mov     [ebp+1000h+var_1068], eax
call    ds:EnterCriticalSection
mov     edi, [ebp+1000h+arg_0]
xor     eax, eax
mov     [ebp+1000h+var_106C], eax
test    [esi+0Ch], edi
jz      loc_100067D8
cmp     [ebp+1000h+var_1068], eax
jz      loc_100067D8
cmp     [esi+4], eax
jz      loc_100067D8
push    10h             ; Size
push    eax             ; Val
lea     eax, [ebp+1000h+SystemTime]
push    eax             ; void *
call    _memset
push    40h ; '@'       ; Size
lea     eax, [ebp+1000h+var_64]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 18h
lea     eax, [ebp+1000h+SystemTime]
push    eax             ; lpSystemTime
call    ds:GetLocalTime
movzx   eax, [ebp+1000h+SystemTime.wYear]
sub     eax, 7D0h
push    eax
movzx   eax, [ebp+1000h+SystemTime.wDay]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wMonth]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wSecond]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wMinute]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wHour]
push    eax             ; ArgList
push    offset a02d02d02d02d02 ; "%02d:%02d:%02d %02d/%02d/%02d"
lea     eax, [ebp+1000h+var_64]
push    1Fh             ; BufferCount
push    eax             ; Buffer
call    sub_1000642B
push    20h ; ' '       ; Size
lea     eax, [ebp+1000h+Destination]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 30h
dec     edi
jz      short loc_10006771
dec     edi
jz      short loc_1000676A
dec     edi
dec     edi
lea     eax, [ebp+1000h+Destination]
jz      short loc_10006763
push    offset aMessage_0 ; "MESSAGE:"
jmp     short loc_1000677C

loc_10006763:
push    offset aDebug   ; "DEBUG:"
jmp     short loc_1000677C

loc_1000676A:
push    offset aError   ; "ERROR:"
jmp     short loc_10006776

loc_10006771:
push    offset aInfo    ; "INFO:"

loc_10006776:
lea     eax, [ebp+1000h+Destination]

loc_1000677C:           ; SizeInWords
push    10h
push    eax             ; Destination
call    _wcscpy_s
add     esp, 0Ch
push    1000h           ; Size
lea     eax, [ebp+1000h+Buffer]
push    0               ; Val
push    eax             ; void *
call    _memset
push    [ebp+1000h+var_1068]
lea     eax, [ebp+1000h+Destination]
push    eax
push    [ebp+1000h+arg_8]
lea     eax, [ebp+1000h+var_64]
push    [ebp+1000h+var_1080]
push    eax
push    dword ptr [esi+8]
lea     eax, [ebp+1000h+Buffer]
push    offset aFromSAtSFileSL ; "FROM: \"%s\" AT: %s\r\nFILE: %s LINE: %"...
push    800h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
mov     eax, [esi]
add     esp, 30h
lea     ecx, [ebp+1000h+Buffer]
push    ecx
mov     ecx, esi
call    dword ptr [eax+1Ch]
mov     [ebp+1000h+var_106C], eax

loc_100067D8:           ; lpCriticalSection
push    ebx
call    ds:LeaveCriticalSection
mov     ecx, [ebp+1000h+var_4]
mov     eax, [ebp+1000h+var_106C]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 1000h
leave
retn    10h
sub_10006672 endp



; Attributes: bp-based frame

sub_100067FC proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019715 SIZE 00000023 BYTES

; __unwind { // loc_1001971D
push    4
mov     eax, offset loc_1001971D
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001C444
;   try {
and     [ebp+var_4], 0
and     dword ptr [esi+4], 0
push    offset String   ; "_APPLICATION_NAME_"
mov     dword ptr [esi], offset off_1001C554
call    __wcsdup
and     dword ptr [esi+0Ch], 0
pop     ecx
push    1
mov     ecx, esi
mov     [esi+8], eax
call    sub_10006498
;   } // starts at 10006813
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 100067FC
sub_100067FC endp



; Attributes: bp-based frame

sub_10006848 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019715 SIZE 00000023 BYTES

; __unwind { // loc_1001971D
push    4
mov     eax, offset loc_1001971D
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001C554
;   try {
and     [ebp+var_4], 0
call    sub_100064A2
mov     ecx, esi
call    sub_10006546
;   } // starts at 1000685F
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [esi], offset off_1001C444
call    __EH_epilog3
retn
; } // starts at 10006848
sub_10006848 endp



; Attributes: bp-based frame

sub_1000687F proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019738 SIZE 00000025 BYTES

; __unwind { // loc_10019742
push    4
mov     eax, offset loc_10019742
call    __EH_prolog3
mov     esi, offset stru_100243A8
push    esi             ; lpCriticalSection
call    ds:EnterCriticalSection
cmp     dword_100243A0, 0
jnz     short loc_100068C7
push    10h             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
mov     ecx, eax
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
test    ecx, ecx
jz      short loc_100068BC
call    sub_100067FC
jmp     short loc_100068BE

loc_100068BC:
xor     eax, eax
;   } // starts at 100068AD

loc_100068BE:
or      [ebp+var_4], 0FFFFFFFFh
mov     dword_100243A0, eax

loc_100068C7:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
mov     eax, dword_100243A0
call    __EH_epilog3
retn
; } // starts at 1000687F
sub_1000687F endp




; int __stdcall sub_100068D9(wchar_t *String)
sub_100068D9 proc near

String= dword ptr  4

push    ebx
push    ebp
push    esi
push    edi
mov     edi, offset stru_100243A8
push    edi             ; lpCriticalSection
mov     esi, ecx
call    ds:EnterCriticalSection
mov     ecx, esi
xor     ebp, ebp
call    sub_100064A2
mov     ebx, [esp+10h+String]
test    ebx, ebx
jz      short loc_10006916
push    ebx             ; String
call    _wcslen
pop     ecx
test    eax, eax
jz      short loc_10006916
push    ebx             ; String
call    __wcsdup
pop     ecx
mov     [esi+8], eax
test    eax, eax
jz      short loc_10006916
inc     ebp

loc_10006916:           ; lpCriticalSection
push    edi
call    ds:LeaveCriticalSection
pop     edi
pop     esi
mov     eax, ebp
pop     ebp
pop     ebx
retn    4
sub_100068D9 endp


loc_10006926:
push    esi
mov     esi, ecx
call    sub_10006848
test    byte ptr [esp+8], 1
jz      short loc_1000693C
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000693C:
mov     eax, esi
pop     esi
retn    4


; Attributes: bp-based frame

; int __cdecl sub_10006942(int, int, wchar_t *String)
sub_10006942 proc near

var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
String= dword ptr  10h

; FUNCTION CHUNK AT 10019DE5 SIZE 0000003C BYTES

; __unwind { // loc_10019E06
push    20h
mov     eax, offset loc_10019E06
call    __EH_prolog3
push    [ebp+arg_4]
and     [ebp+var_10], 0
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
xor     esi, esi
inc     esi
;   try {
mov     [ebp+var_4], esi
push    [ebp+String]    ; String
mov     ecx, eax        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
mov     ecx, [ebp+arg_0]
push    eax
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
mov     [ebp+var_10], esi
;   } // starts at 10006960
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; N
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn
;   } // starts at 10006979
; } // starts at 10006942
sub_10006942 endp

; Exported entry   5. _JNI_OnLoad@8


; Attributes: bp-based frame fpd=68h

; __stdcall JNI_OnLoad(x, x)
public _JNI_OnLoad@8
_JNI_OnLoad@8 proc near

var_A8= dword ptr -0A8h
var_A4= dword ptr -0A4h
var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
String= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001975D SIZE 00000065 BYTES

; __unwind { // loc_1001979D
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    34h
mov     eax, offset loc_1001979D
call    __EH_prolog3_catch
mov     ebx, [ebp+68h+arg_0]
call    sub_1000687F
mov     esi, eax
xor     edi, edi
cmp     esi, edi
jz      short loc_10006A22
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], edi
push    offset aJniOnload ; "JNI_OnLoad"
push    eax             ; int
lea     eax, [ebp+68h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100069CC
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_100069F0
mov     eax, [eax+4]
jmp     short loc_100069F3

loc_100069F0:
add     eax, 4

loc_100069F3:
mov     edx, [esi]
push    eax
push    1Dh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 100069E1
;   try {
mov     byte ptr [ebp+68h+var_6C], 0
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006A04
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10006A22:
or      [ebp+68h+var_A4], 0FFFFFFFFh
push    2
pop     edi
;   try {
mov     [ebp+68h+var_6C], edi
test    ebx, ebx
jz      short loc_10006A83
and     [ebp+68h+var_A8], 0
mov     eax, [ebx]
mov     esi, 10002h
push    esi
lea     ecx, [ebp+68h+var_A8]
push    ecx
push    ebx
call    dword ptr [eax+18h]
test    eax, eax
jnz     short loc_10006A71
call    sub_10005A84
mov     edx, [eax]
push    ebx
mov     ecx, eax
call    dword ptr [edx+4]
cmp     eax, 0FFFFFFFFh
jz      short loc_10006A5F
mov     [ebp+68h+var_A4], esi
jmp     short loc_10006AA0

loc_10006A5F:
call    sub_1000687F
test    eax, eax
jz      short loc_10006AA0
push    offset aCouldNotSetJvm ; "Could not set jvm"
push    2Fh ; '/'
jmp     short loc_10006A93

loc_10006A71:
call    sub_1000687F
test    eax, eax
jz      short loc_10006AA0
push    offset aJniVersionNotS ; "JNI version not supported"
push    34h ; '4'
jmp     short loc_10006A93

loc_10006A83:
call    sub_1000687F
test    eax, eax
jz      short loc_10006AA0
push    offset aInvalidInputPo ; "Invalid input pointer"
push    39h ; '9'

loc_10006A93:
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    edi
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10006A29

loc_10006AA0:
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_10006AA4:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_10006C3F
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
push    8
pop     edi
;   try {
mov     [ebp+68h+var_6C], edi
push    offset aJniOnload ; "JNI_OnLoad"
push    eax             ; int
lea     eax, [ebp+68h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10006AC3
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [eax+18h], edi
jb      loc_10006C0B
mov     eax, [eax+4]
jmp     loc_10006C0E
;   } // starts at 10006AD8

loc_10006AED:
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10006AED
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+String]
jnb     short loc_10006B0E
lea     eax, [ebp+68h+String]

loc_10006B0E:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_10006B3D
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_10006B2C
lea     ecx, [ebp+68h+var_1C]

loc_10006B2C:
mov     edx, [eax]
push    ecx
push    41h ; 'A'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10006AFE

loc_10006B3D:
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006B3D
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 10006B4D
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006B63
retn

loc_10006B63:
jmp     loc_10006AA4

loc_10006B68:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10006B68
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_10006B89
lea     eax, [ebp+68h+var_90]

loc_10006B89:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_10006BB8
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10006BA7
lea     ecx, [ebp+68h+var_38]

loc_10006BA7:
mov     edx, [eax]
push    ecx
push    48h ; 'H'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10006B79

loc_10006BB8:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006BB8
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 10006BC8
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006BDE
retn

loc_10006BDE:
jmp     loc_10006AA4

loc_10006BE3:
call    sub_1000687F
test    eax, eax
jz      short loc_10006C01
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    4Ch ; 'L'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006C01:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006AA4
retn

loc_10006C0B:
add     eax, 4

loc_10006C0E:
mov     edx, [esi]
push    eax
push    4Fh ; 'O'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006C1F
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10006C3F:
mov     eax, [ebp+68h+var_A4]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    8
; } // starts at 10006991
_JNI_OnLoad@8 endp

; Exported entry   6. _JNI_OnUnload@8


; Attributes: bp-based frame fpd=68h

; __stdcall JNI_OnUnload(x, x)
public _JNI_OnUnload@8
_JNI_OnUnload@8 proc near

var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
String= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100197C2 SIZE 00000065 BYTES

; __unwind { // loc_10019802
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    2Ch
mov     eax, offset loc_10019802
call    __EH_prolog3_catch
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_10006CEE
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJniOnunload ; "JNI_OnUnload"
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10006C99
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_10006CBD
mov     eax, [eax+4]
jmp     short loc_10006CC0

loc_10006CBD:
add     eax, 4

loc_10006CC0:
mov     edx, [esi]
push    eax
push    5Ah ; 'Z'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10006CAE
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006CD1
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10006CEE:
;   try {
mov     [ebp+68h+var_6C], 2
;   } // starts at 10006CEE
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_10006CF9:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_10006E93
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
push    8
pop     ebx
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJniOnunload ; "JNI_OnUnload"
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10006D18
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [eax+18h], ebx
jb      loc_10006E60
mov     eax, [eax+4]
jmp     loc_10006E63
;   } // starts at 10006D2D

loc_10006D42:
;   try {
;   catch(stru_10023114) // owned by 10006CEE
mov     byte ptr [ebp+68h+var_6C], 4
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10006D42
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+String]
jnb     short loc_10006D63
lea     eax, [ebp+68h+String]

loc_10006D63:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_10006D92
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10006D81
lea     ecx, [ebp+68h+var_38]

loc_10006D81:
mov     edx, [eax]
push    ecx
push    64h ; 'd'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10006D53

loc_10006D92:
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006D92
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 10006DA2
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006DB8
retn

loc_10006DB8:
jmp     loc_10006CF9

loc_10006DBD:
;   try {
;   catch(stru_10023094) // owned by 10006CEE
mov     byte ptr [ebp+68h+var_6C], 6
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10006DBD
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_10006DDE
lea     eax, [ebp+68h+var_90]

loc_10006DDE:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_10006E0D
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_10006DFC
lea     ecx, [ebp+68h+var_1C]

loc_10006DFC:
mov     edx, [eax]
push    ecx
push    6Bh ; 'k'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10006DCE

loc_10006E0D:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006E0D
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 10006E1D
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006E33
retn

loc_10006E33:
jmp     loc_10006CF9

loc_10006E38:
;   catch(...) // owned by 10006CEE
call    sub_1000687F
test    eax, eax
jz      short loc_10006E56
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    6Fh ; 'o'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10006E56:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006CF9
retn

loc_10006E60:
add     eax, 4

loc_10006E63:
mov     edx, [esi]
push    eax
push    72h ; 'r'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006E74
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10006E93:
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    8
; } // starts at 10006C61
_JNI_OnUnload@8 endp

; Exported entry   8. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance@12


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance(x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance@12
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance@12 proc near

var_A4= dword ptr -0A4h
var_A0= byte ptr -0A0h
String= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
var_54= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019827 SIZE 00000075 BYTES

; __unwind { // loc_10019877
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    30h
mov     eax, offset loc_10019877
call    __EH_prolog3_catch
mov     edi, [ebp+68h+arg_8]
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_10006F43
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_7 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10006EED
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_10006F11
mov     eax, [eax+4]
jmp     short loc_10006F14

loc_10006F11:
add     eax, 4

loc_10006F14:
mov     edx, [esi]
push    eax
push    7Eh ; '~'
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10006F02
;   try {
mov     byte ptr [ebp+68h+var_6C], 0
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006F25
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10006F43:
mov     [ebp+68h+var_A4], ebx
push    2
pop     ebx
;   try {
mov     [ebp+68h+var_6C], ebx
call    sub_10005A84
mov     edx, [eax]
push    edi
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 10006F49
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
lea     eax, [ebp+68h+var_20]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
mov     esi, eax
test    esi, esi
jz      short loc_10006FAA
call    sub_10005A84
mov     edi, eax
mov     eax, [esi]
lea     ecx, [ebp+68h+var_3C]
push    ecx
mov     ecx, esi
call    dword ptr [eax+8]
;   } // starts at 10006F5D
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
mov     edx, [edi]
push    eax
mov     ecx, edi
call    dword ptr [edx+18h]
mov     [ebp+68h+var_A4], eax
;   } // starts at 10006F89
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_10006FCA

loc_10006FAA:
call    sub_1000687F
test    eax, eax
jz      short loc_10006FCA
mov     edx, [eax]
push    offset aInvalidPointer ; "Invalid pointer"
push    8Ch
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10006F98

loc_10006FCA:
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10006FCA
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_10006FDD:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_10007186
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Ah
push    offset aJavaComEoosGmT_7 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10006FF9
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
cmp     dword ptr [eax+18h], 8
jb      loc_1000714F
mov     eax, [eax+4]
jmp     loc_10007152
;   } // starts at 10007012

loc_10007028:
;   try {
;   catch(stru_10023114) // owned by 10006F5D
;   catch(stru_10023114) // owned by 10006F89
;   catch(stru_10023114) // owned by 10006F98
mov     byte ptr [ebp+68h+var_6C], 6
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007028
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+String]
jnb     short loc_10007049
lea     eax, [ebp+68h+String]

loc_10007049:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_1000707B
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10007067
lea     ecx, [ebp+68h+var_38]

loc_10007067:
mov     edx, [eax]
push    ecx
push    94h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007039

loc_1000707B:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000707B
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_A0]
call    sub_100050E3
;   } // starts at 1000708B
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100070A1
retn

loc_100070A1:
jmp     loc_10006FDD

loc_100070A6:
;   try {
;   catch(stru_10023094) // owned by 10006F5D
;   catch(stru_10023094) // owned by 10006F89
;   catch(stru_10023094) // owned by 10006F98
mov     byte ptr [ebp+68h+var_6C], 8
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100070A6
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+var_54]
jnb     short loc_100070C7
lea     eax, [ebp+68h+var_54]

loc_100070C7:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_100070F9
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_100070E5
lea     ecx, [ebp+68h+var_1C]

loc_100070E5:
mov     edx, [eax]
push    ecx
push    9Bh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100070B7

loc_100070F9:
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100070F9
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_64]
call    sub_10002319
;   } // starts at 10007109
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_1000711F
retn

loc_1000711F:
jmp     loc_10006FDD

loc_10007124:
;   catch(...) // owned by 10006F5D
;   catch(...) // owned by 10006F89
;   catch(...) // owned by 10006F98
call    sub_1000687F
test    eax, eax
jz      short loc_10007145
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    9Fh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10007145:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10006FDD
retn

loc_1000714F:
add     eax, 4

loc_10007152:
mov     edx, [esi]
push    eax
push    0A2h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007166
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10007186:
mov     eax, [ebp+68h+var_A4]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    0Ch
; } // starts at 10006EB2
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance@12 endp

; Exported entry   7. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance@12


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance(x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance@12
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance@12 proc near

var_A1= byte ptr -0A1h
var_A0= byte ptr -0A0h
String= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
var_54= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001989C SIZE 0000006D BYTES

; __unwind { // loc_100198E4
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    30h
mov     eax, offset loc_100198E4
call    __EH_prolog3_catch
mov     edi, [ebp+68h+arg_8]
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_1000723C
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_8 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100071E3
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_10007207
mov     eax, [eax+4]
jmp     short loc_1000720A

loc_10007207:
add     eax, 4

loc_1000720A:
mov     edx, [esi]
push    eax
push    0B0h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 100071F8
;   try {
mov     byte ptr [ebp+68h+var_6C], 0
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000721E
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_1000723C:
mov     [ebp+68h+var_A1], 0
push    2
pop     ebx
;   try {
mov     [ebp+68h+var_6C], ebx
call    sub_10005A84
mov     edx, [eax]
push    edi
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 10007243
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
lea     eax, [ebp+68h+var_20]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000A847
cmp     eax, 1
jnz     short loc_10007275
mov     [ebp+68h+var_A1], al
jmp     short loc_10007295

loc_10007275:
call    sub_1000687F
test    eax, eax
jz      short loc_10007295
mov     edx, [eax]
push    offset aInvalidPointer_0 ; "Invalid pointer to the factory"
push    0BEh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007257

loc_10007295:
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007295
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_100072A8:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_10007451
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 9
push    offset aJavaComEoosGmT_8 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100072C4
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
cmp     dword ptr [eax+18h], 8
jb      loc_1000741A
mov     eax, [eax+4]
jmp     loc_1000741D
;   } // starts at 100072DD

loc_100072F3:
;   try {
;   catch(stru_10023114) // owned by 10007257
mov     byte ptr [ebp+68h+var_6C], 5
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100072F3
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+String]
jnb     short loc_10007314
lea     eax, [ebp+68h+String]

loc_10007314:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_10007346
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10007332
lea     ecx, [ebp+68h+var_38]

loc_10007332:
mov     edx, [eax]
push    ecx
push    0C6h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007304

loc_10007346:
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007346
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     ecx, [ebp+68h+var_A0]
call    sub_100050E3
;   } // starts at 10007356
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_1000736C
retn

loc_1000736C:
jmp     loc_100072A8

loc_10007371:
;   try {
;   catch(stru_10023094) // owned by 10007257
mov     byte ptr [ebp+68h+var_6C], 7
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007371
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+var_54]
jnb     short loc_10007392
lea     eax, [ebp+68h+var_54]

loc_10007392:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_100073C4
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_100073B0
lea     ecx, [ebp+68h+var_1C]

loc_100073B0:
mov     edx, [eax]
push    ecx
push    0CDh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007382

loc_100073C4:
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100073C4
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     ecx, [ebp+68h+var_64]
call    sub_10002319
;   } // starts at 100073D4
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100073EA
retn

loc_100073EA:
jmp     loc_100072A8

loc_100073EF:
;   catch(...) // owned by 10007257
call    sub_1000687F
test    eax, eax
jz      short loc_10007410
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    0D1h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10007410:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100072A8
retn

loc_1000741A:
add     eax, 4

loc_1000741D:
mov     edx, [esi]
push    eax
push    0D4h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007431
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10007451:
mov     al, [ebp+68h+var_A1]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    0Ch
; } // starts at 100071A8
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance@12 endp

; Exported entry  11. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize@16


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize(x, x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize@16
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize@16 proc near

var_C8= dword ptr -0C8h
var_AC= dword ptr -0ACh
var_A8= dword ptr -0A8h
pv= dword ptr -0A4h
var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
String= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019909 SIZE 00000085 BYTES

; __unwind { // loc_10019969
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    54h
mov     eax, offset loc_10019969
call    __EH_prolog3_catch
mov     eax, [ebp+68h+arg_8]
mov     [ebp+68h+pv], eax
mov     eax, [ebp+68h+arg_C]
mov     [ebp+68h+var_AC], eax
call    sub_1000687F
mov     edi, eax
xor     ebx, ebx
cmp     edi, ebx
jz      short loc_10007512
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_9 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_C8]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100074B7
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_100074DB
mov     eax, [eax+4]
jmp     short loc_100074DE

loc_100074DB:
add     eax, 4

loc_100074DE:
mov     edx, [edi]
push    eax
push    0E2h
mov     esi, offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    esi
push    1
mov     ecx, edi
call    dword ptr [edx+18h]
;   } // starts at 100074CC
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_C8]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100074F3
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_10007517

loc_10007512:
mov     esi, offset aSasbridgeCpp ; ".\\SASBridge.cpp"

loc_10007517:
mov     [ebp+68h+var_A8], ebx
;   try {
mov     [ebp+68h+var_6C], 2
call    sub_10005A84
mov     edx, [eax]
push    [ebp+68h+pv]
lea     ecx, [ebp+68h+var_3C]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 1000751A
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
cmp     [ebp+68h+var_24], 8
mov     eax, [ebp+68h+var_38]
jnb     short loc_10007544
lea     eax, [ebp+68h+var_38]

loc_10007544:           ; String
push    eax
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007534
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     eax, [ebp+68h+var_20]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
cmp     eax, ebx
jz      short loc_1000756A
lea     edi, [eax+8]
jmp     short loc_1000756C

loc_1000756A:
xor     edi, edi
;   } // starts at 1000754D

loc_1000756C:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     edi, ebx
jz      loc_10007683
call    sub_10005A84
mov     edx, [eax]
push    [ebp+68h+var_AC]
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 1000756C
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
cmp     [ebp+68h+var_C], ebx
jz      loc_10007655
mov     [ebp+68h+pv], ebx
cmp     [ebp+68h+var_8], 8
mov     eax, [ebp+68h+var_1C]
jnb     short loc_100075B2
lea     eax, [ebp+68h+var_1C]

loc_100075B2:
mov     edx, [edi]
lea     ecx, [ebp+68h+pv]
push    ecx
push    eax
mov     ecx, edi
call    dword ptr [edx+4]
test    eax, eax
jnz     short loc_10007640
cmp     [ebp+68h+pv], ebx
jz      short loc_10007628
push    [ebp+68h+pv]    ; String
lea     ecx, [ebp+68h+var_C8]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007596
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
call    sub_10005A84
mov     edx, [eax]
lea     ecx, [ebp+68h+var_C8]
push    ecx
mov     ecx, eax
call    dword ptr [edx+18h]
mov     [ebp+68h+var_A8], eax
;   } // starts at 100075D2
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_C8]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     [ebp+68h+var_A8], ebx
jnz     short loc_1000761A
call    sub_1000687F
cmp     eax, ebx
jz      short loc_1000761A
mov     edx, [eax]
push    offset aCouldNotCreate ; "Could not create string object"
push    0FAh
push    esi
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000761A:           ; pv
push    [ebp+68h+pv]
call    ds:CoTaskMemFree
mov     [ebp+68h+pv], ebx
jmp     short loc_10007672

loc_10007628:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007672
push    offset aDeviceIsNotCon ; "Device is not connected"
push    102h
push    esi
push    1
jmp     short loc_1000766B

loc_10007640:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007672
push    offset aToolInitializa ; "Tool initialization failed"
push    107h
jmp     short loc_10007668

loc_10007655:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007672
push    offset aInvalidPointer ; "Invalid pointer"
push    10Ch

loc_10007668:
push    esi
push    2

loc_1000766B:
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100075E9

loc_10007672:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_100076A0

loc_10007683:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_100076A0
mov     edx, [eax]
push    offset aInvalidPointer ; "Invalid pointer"
push    111h
push    esi
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007672

loc_100076A0:
;   try {
mov     byte ptr [ebp+68h+var_6C], 2
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100076A0
or      [ebp+68h+var_6C], 0FFFFFFFFh
jmp     loc_100077DE

loc_100076B8:
;   try {
;   catch(stru_10023114) // owned by 1000751A
;   catch(stru_10023114) // owned by 10007534
;   catch(stru_10023114) // owned by 1000754D
;   catch(stru_10023114) // owned by 1000756C
;   catch(stru_10023114) // owned by 10007596
;   catch(stru_10023114) // owned by 100075D2
;   catch(stru_10023114) // owned by 100075E9
;   catch(stru_10023114) // owned by 10007672
;   catch(stru_10023114) // owned by 100076A0
mov     byte ptr [ebp+68h+var_6C], 8
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100076B8
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+String]
jnb     short loc_100076D9
lea     eax, [ebp+68h+String]

loc_100076D9:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
xor     ebx, ebx
cmp     eax, ebx
jz      short loc_1000770D
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_100076F9
lea     ecx, [ebp+68h+var_1C]

loc_100076F9:
mov     edx, [eax]
push    ecx
push    119h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100076C9

loc_1000770D:
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000770D
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 1000771C
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100077D7
retn

loc_10007732:
;   try {
;   catch(stru_10023094) // owned by 1000751A
;   catch(stru_10023094) // owned by 10007534
;   catch(stru_10023094) // owned by 1000754D
;   catch(stru_10023094) // owned by 1000756C
;   catch(stru_10023094) // owned by 10007596
;   catch(stru_10023094) // owned by 100075D2
;   catch(stru_10023094) // owned by 100075E9
;   catch(stru_10023094) // owned by 10007672
;   catch(stru_10023094) // owned by 100076A0
mov     byte ptr [ebp+68h+var_6C], 0Ah
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007732
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_10007753
lea     eax, [ebp+68h+var_90]

loc_10007753:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
xor     ebx, ebx
cmp     eax, ebx
jz      short loc_10007787
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10007773
lea     ecx, [ebp+68h+var_38]

loc_10007773:
mov     edx, [eax]
push    ecx
push    120h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007743

loc_10007787:
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007787
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 10007796
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100077D7
retn

loc_100077AC:
;   catch(...) // owned by 1000751A
;   catch(...) // owned by 10007534
;   catch(...) // owned by 1000754D
;   catch(...) // owned by 1000756C
;   catch(...) // owned by 10007596
;   catch(...) // owned by 100075D2
;   catch(...) // owned by 100075E9
;   catch(...) // owned by 10007672
;   catch(...) // owned by 100076A0
call    sub_1000687F
test    eax, eax
jz      short loc_100077CD
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    124h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100077CD:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100077D7
retn

loc_100077D7:
xor     ebx, ebx
mov     esi, offset aSasbridgeCpp ; ".\\SASBridge.cpp"

loc_100077DE:
call    sub_1000687F
mov     edi, eax
cmp     edi, ebx
jz      short loc_1000784F
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Ch
push    offset aJavaComEoosGmT_9 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_C8]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100077F6
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Dh
cmp     dword ptr [eax+18h], 8
jb      short loc_1000781E
mov     eax, [eax+4]
jmp     short loc_10007821

loc_1000781E:
add     eax, 4

loc_10007821:
mov     edx, [edi]
push    eax
push    127h
push    esi
push    1
mov     ecx, edi
call    dword ptr [edx+18h]
;   } // starts at 1000780F
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ch
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_C8]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007831
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_1000784F:
mov     eax, [ebp+68h+var_A8]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    10h
; } // starts at 10007473
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize@16 endp

; Exported entry  13. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties@16


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties(x, x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties@16
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties@16 proc near

var_B4= dword ptr -0B4h
var_B0= dword ptr -0B0h
var_AC= dword ptr -0ACh
var_A8= dword ptr -0A8h
var_A1= byte ptr -0A1h
var_A0= byte ptr -0A0h
String= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
var_54= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001998E SIZE 00000075 BYTES

; __unwind { // loc_100199DE
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    40h
mov     eax, offset loc_100199DE
call    __EH_prolog3_catch
mov     eax, [ebp+68h+arg_8]
mov     [ebp+68h+var_A8], eax
mov     eax, [ebp+68h+arg_C]
mov     [ebp+68h+var_B4], eax
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_1000790D
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_10 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100078B5
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_100078D9
mov     eax, [eax+4]
jmp     short loc_100078DC

loc_100078D9:
add     eax, 4

loc_100078DC:
mov     edx, [esi]
push    eax
push    134h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 100078CA
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100078F0
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_1000790D:
mov     [ebp+68h+var_A1], bl
push    2
pop     edi
;   try {
mov     [ebp+68h+var_6C], edi
call    sub_10005A84
mov     edx, [eax]
push    [ebp+68h+var_A8]
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 10007913
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
cmp     [ebp+68h+var_8], 8
mov     eax, [ebp+68h+var_1C]
jnb     short loc_10007939
lea     eax, [ebp+68h+var_1C]

loc_10007939:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007929
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     eax, [ebp+68h+var_3C]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
mov     esi, eax
;   } // starts at 10007942
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     esi, ebx
jz      short loc_100079D9
mov     [ebp+68h+var_A8], ebx
mov     [ebp+68h+var_AC], ebx
mov     [ebp+68h+var_B0], ebx
lea     eax, [ebp+68h+var_B0]
push    eax
lea     eax, [ebp+68h+var_AC]
push    eax
lea     eax, [ebp+68h+var_A8]
push    eax
push    [ebp+68h+var_B4]
call    sub_10005A84
mov     ecx, eax
call    sub_100040F0
lea     ecx, [esi+8]
mov     eax, [ecx]
push    [ebp+68h+var_B0]
push    [ebp+68h+var_AC]
push    [ebp+68h+var_A8]
call    dword ptr [eax+8]
cmp     eax, 1
jnz     short loc_100079C4
mov     [ebp+68h+var_A1], al
call    sub_1000687F
cmp     eax, ebx
jz      short loc_100079F9
push    offset aSetDriverPrope ; "Set driver properties - success"
push    148h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
jmp     short loc_100079F2

loc_100079C4:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_100079F9
push    offset aSetDriverPrope_0 ; "Set driver properties - failed"
push    14Ch
jmp     short loc_100079EC

loc_100079D9:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_100079F9
push    offset aCouldNotGetToo ; "Could not get tool object"
push    151h

loc_100079EC:
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    edi

loc_100079F2:
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007958

loc_100079F9:
;   try {
mov     byte ptr [ebp+68h+var_6C], 2
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100079F9
or      [ebp+68h+var_6C], 0FFFFFFFFh
jmp     loc_10007B32

loc_10007A11:
;   try {
;   catch(stru_10023114) // owned by 10007929
;   catch(stru_10023114) // owned by 10007942
;   catch(stru_10023114) // owned by 10007958
;   catch(stru_10023114) // owned by 100079F9
mov     byte ptr [ebp+68h+var_6C], 6
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007A11
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+String]
jnb     short loc_10007A32
lea     eax, [ebp+68h+String]

loc_10007A32:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
xor     ebx, ebx
cmp     eax, ebx
jz      short loc_10007A66
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10007A52
lea     ecx, [ebp+68h+var_38]

loc_10007A52:
mov     edx, [eax]
push    ecx
push    159h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007A22

loc_10007A66:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007A66
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_A0]
call    sub_100050E3
;   } // starts at 10007A75
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10007B30
retn

loc_10007A8B:
;   try {
;   catch(stru_10023094) // owned by 10007929
;   catch(stru_10023094) // owned by 10007942
;   catch(stru_10023094) // owned by 10007958
;   catch(stru_10023094) // owned by 100079F9
mov     byte ptr [ebp+68h+var_6C], 8
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007A8B
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+var_54]
jnb     short loc_10007AAC
lea     eax, [ebp+68h+var_54]

loc_10007AAC:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
xor     ebx, ebx
cmp     eax, ebx
jz      short loc_10007AE0
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_10007ACC
lea     ecx, [ebp+68h+var_1C]

loc_10007ACC:
mov     edx, [eax]
push    ecx
push    160h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007A9C

loc_10007AE0:
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007AE0
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_64]
call    sub_10002319
;   } // starts at 10007AEF
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10007B30
retn

loc_10007B05:
;   catch(...) // owned by 10007929
;   catch(...) // owned by 10007942
;   catch(...) // owned by 10007958
;   catch(...) // owned by 100079F9
call    sub_1000687F
test    eax, eax
jz      short loc_10007B26
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    164h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10007B26:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10007B30
retn

loc_10007B30:
xor     ebx, ebx

loc_10007B32:
call    sub_1000687F
mov     esi, eax
cmp     esi, ebx
jz      short loc_10007BA7
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Ah
push    offset aJavaComEoosGmT_10 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10007B4A
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
cmp     dword ptr [eax+18h], 8
jb      short loc_10007B72
mov     eax, [eax+4]
jmp     short loc_10007B75

loc_10007B72:
add     eax, 4

loc_10007B75:
mov     edx, [esi]
push    eax
push    167h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10007B63
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007B89
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10007BA7:
mov     al, [ebp+68h+var_A1]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    10h
; } // starts at 10007871
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties@16 endp

; Exported entry  10. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization@12


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization(x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization@12
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization@12 proc near

var_A8= dword ptr -0A8h
pv= dword ptr -0A4h
var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
String= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019A03 SIZE 0000007D BYTES

; __unwind { // loc_10019A5B
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    34h
mov     eax, offset loc_10019A5B
call    __EH_prolog3_catch
mov     eax, [ebp+68h+arg_8]
mov     [ebp+68h+pv], eax
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_10007C5F
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_11 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10007C07
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_10007C2B
mov     eax, [eax+4]
jmp     short loc_10007C2E

loc_10007C2B:
add     eax, 4

loc_10007C2E:
mov     edx, [esi]
push    eax
push    175h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10007C1C
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007C42
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10007C5F:
mov     [ebp+68h+var_A8], ebx
push    2
pop     edi
;   try {
mov     [ebp+68h+var_6C], edi
call    sub_10005A84
mov     edx, [eax]
push    [ebp+68h+pv]
lea     ecx, [ebp+68h+var_3C]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 10007C65
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
cmp     [ebp+68h+var_24], 8
mov     eax, [ebp+68h+var_38]
jnb     short loc_10007C8B
lea     eax, [ebp+68h+var_38]

loc_10007C8B:           ; String
push    eax
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007C7B
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     eax, [ebp+68h+var_20]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
cmp     eax, ebx
jz      short loc_10007CB1
lea     esi, [eax+8]
jmp     short loc_10007CB3

loc_10007CB1:
xor     esi, esi
;   } // starts at 10007C94

loc_10007CB3:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     esi, ebx
jz      loc_10007D7C
mov     [ebp+68h+pv], ebx
lea     eax, [esi+8]
mov     ecx, [eax]
lea     edx, [ebp+68h+pv]
push    edx
push    eax
call    dword ptr [ecx+0Ch]
test    eax, eax
jnz     loc_10007D67
cmp     [ebp+68h+pv], ebx
jz      short loc_10007D4B
push    [ebp+68h+pv]    ; String
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007CB3
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
call    sub_10005A84
mov     edx, [eax]
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+18h]
mov     [ebp+68h+var_A8], eax
;   } // starts at 10007CF2
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     [ebp+68h+var_A8], ebx
jnz     short loc_10007D3D
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007D3D
mov     edx, [eax]
push    offset aCouldNotCreate ; "Could not create string object"
push    189h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    edi
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10007D3D:           ; pv
push    [ebp+68h+pv]
call    ds:CoTaskMemFree
mov     [ebp+68h+pv], ebx
jmp     short loc_10007D9C

loc_10007D4B:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007D9C
push    offset aDeviceIsNotCon ; "Device is not connected"
push    191h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
jmp     short loc_10007D95

loc_10007D67:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007D9C
push    offset aToolInitializa ; "Tool initialization failed"
push    196h
jmp     short loc_10007D8F

loc_10007D7C:
call    sub_1000687F
cmp     eax, ebx
jz      short loc_10007D9C
push    offset aInvalidPointer ; "Invalid pointer"
push    19Bh

loc_10007D8F:
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    edi

loc_10007D95:
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007D09

loc_10007D9C:
;   try {
mov     byte ptr [ebp+68h+var_6C], 2
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007D9C
or      [ebp+68h+var_6C], 0FFFFFFFFh
jmp     loc_10007ED5

loc_10007DB4:
;   try {
;   catch(stru_10023114) // owned by 10007C7B
;   catch(stru_10023114) // owned by 10007C94
;   catch(stru_10023114) // owned by 10007CB3
;   catch(stru_10023114) // owned by 10007CF2
;   catch(stru_10023114) // owned by 10007D09
;   catch(stru_10023114) // owned by 10007D9C
mov     byte ptr [ebp+68h+var_6C], 7
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007DB4
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+String]
jnb     short loc_10007DD5
lea     eax, [ebp+68h+String]

loc_10007DD5:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
xor     ebx, ebx
cmp     eax, ebx
jz      short loc_10007E09
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_10007DF5
lea     ecx, [ebp+68h+var_1C]

loc_10007DF5:
mov     edx, [eax]
push    ecx
push    1A3h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007DC5

loc_10007E09:
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007E09
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 10007E18
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10007ED3
retn

loc_10007E2E:
;   try {
;   catch(stru_10023094) // owned by 10007C7B
;   catch(stru_10023094) // owned by 10007C94
;   catch(stru_10023094) // owned by 10007CB3
;   catch(stru_10023094) // owned by 10007CF2
;   catch(stru_10023094) // owned by 10007D09
;   catch(stru_10023094) // owned by 10007D9C
mov     byte ptr [ebp+68h+var_6C], 9
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10007E2E
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_10007E4F
lea     eax, [ebp+68h+var_90]

loc_10007E4F:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
xor     ebx, ebx
cmp     eax, ebx
jz      short loc_10007E83
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_10007E6F
lea     ecx, [ebp+68h+var_38]

loc_10007E6F:
mov     edx, [eax]
push    ecx
push    1AAh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10007E3F

loc_10007E83:
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007E83
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 10007E92
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10007ED3
retn

loc_10007EA8:
;   catch(...) // owned by 10007C7B
;   catch(...) // owned by 10007C94
;   catch(...) // owned by 10007CB3
;   catch(...) // owned by 10007CF2
;   catch(...) // owned by 10007D09
;   catch(...) // owned by 10007D9C
call    sub_1000687F
test    eax, eax
jz      short loc_10007EC9
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    1AEh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10007EC9:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10007ED3
retn

loc_10007ED3:
xor     ebx, ebx

loc_10007ED5:
call    sub_1000687F
mov     esi, eax
cmp     esi, ebx
jz      short loc_10007F4A
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Bh
push    offset aJavaComEoosGmT_11 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10007EED
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ch
cmp     dword ptr [eax+18h], 8
jb      short loc_10007F15
mov     eax, [eax+4]
jmp     short loc_10007F18

loc_10007F15:
add     eax, 4

loc_10007F18:
mov     edx, [esi]
push    eax
push    1B1h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10007F06
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007F2C
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10007F4A:
mov     eax, [ebp+68h+var_A8]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    0Ch
; } // starts at 10007BC9
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization@12 endp

; Exported entry  14. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData@16


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData(x, x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData@16
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData@16 proc near

var_A8= dword ptr -0A8h
var_A1= byte ptr -0A1h
var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
String= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019A80 SIZE 00000075 BYTES

; __unwind { // loc_10019AD0
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    34h
mov     eax, offset loc_10019AD0
call    __EH_prolog3_catch
mov     edi, [ebp+68h+arg_8]
mov     eax, [ebp+68h+arg_C]
mov     [ebp+68h+var_A8], eax
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_10008006
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_12 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10007FAD
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_10007FD1
mov     eax, [eax+4]
jmp     short loc_10007FD4

loc_10007FD1:
add     eax, 4

loc_10007FD4:
mov     edx, [esi]
push    eax
push    1BFh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10007FC2
;   try {
mov     byte ptr [ebp+68h+var_6C], 0
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10007FE8
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10008006:
mov     [ebp+68h+var_A1], 0
push    2
pop     ebx
;   try {
mov     [ebp+68h+var_6C], ebx
call    sub_10005A84
mov     edx, [eax]
push    edi
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 1000800D
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
cmp     [ebp+68h+var_8], 8
mov     eax, [ebp+68h+var_1C]
jnb     short loc_10008031
lea     eax, [ebp+68h+var_1C]

loc_10008031:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10008021
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     eax, [ebp+68h+var_3C]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
test    eax, eax
jz      short loc_10008057
lea     esi, [eax+8]
jmp     short loc_10008059

loc_10008057:
xor     esi, esi
;   } // starts at 1000803A

loc_10008059:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
test    esi, esi
jz      short loc_100080BE
push    [ebp+68h+var_A8]
call    sub_10005A84
mov     ecx, eax
call    sub_10004BA9
test    eax, eax
jz      short loc_100080A9
lea     ecx, [esi+4]
mov     edx, [ecx]
push    eax
push    ecx
call    dword ptr [edx+0Ch]
test    eax, eax
jnz     short loc_10008094
mov     [ebp+68h+var_A1], 1
jmp     short loc_100080DE

loc_10008094:
call    sub_1000687F
test    eax, eax
jz      short loc_100080DE
push    offset aToolInitializa ; "Tool initialization failed"
push    1D1h
jmp     short loc_100080D1

loc_100080A9:
call    sub_1000687F
test    eax, eax
jz      short loc_100080DE
push    offset aInvalidPointer ; "Invalid pointer"
push    1D6h
jmp     short loc_100080D1

loc_100080BE:
call    sub_1000687F
test    eax, eax
jz      short loc_100080DE
push    offset aInvalidPointer ; "Invalid pointer"
push    1DBh

loc_100080D1:
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10008059

loc_100080DE:
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100080DE
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_100080F1:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_1000829A
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Ah
push    offset aJavaComEoosGmT_12 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 1000810D
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
cmp     dword ptr [eax+18h], 8
jb      loc_10008263
mov     eax, [eax+4]
jmp     loc_10008266
;   } // starts at 10008126

loc_1000813C:
;   try {
;   catch(stru_10023114) // owned by 10008021
;   catch(stru_10023114) // owned by 1000803A
;   catch(stru_10023114) // owned by 10008059
mov     byte ptr [ebp+68h+var_6C], 6
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 1000813C
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+String]
jnb     short loc_1000815D
lea     eax, [ebp+68h+String]

loc_1000815D:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_1000818F
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_1000817B
lea     ecx, [ebp+68h+var_38]

loc_1000817B:
mov     edx, [eax]
push    ecx
push    1E3h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 1000814D

loc_1000818F:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000818F
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 1000819F
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100081B5
retn

loc_100081B5:
jmp     loc_100080F1

loc_100081BA:
;   try {
;   catch(stru_10023094) // owned by 10008021
;   catch(stru_10023094) // owned by 1000803A
;   catch(stru_10023094) // owned by 10008059
mov     byte ptr [ebp+68h+var_6C], 8
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100081BA
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_100081DB
lea     eax, [ebp+68h+var_90]

loc_100081DB:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_1000820D
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_100081F9
lea     ecx, [ebp+68h+var_1C]

loc_100081F9:
mov     edx, [eax]
push    ecx
push    1EAh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100081CB

loc_1000820D:
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000820D
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 1000821D
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10008233
retn

loc_10008233:
jmp     loc_100080F1

loc_10008238:
;   catch(...) // owned by 10008021
;   catch(...) // owned by 1000803A
;   catch(...) // owned by 10008059
call    sub_1000687F
test    eax, eax
jz      short loc_10008259
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    1EEh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008259:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100080F1
retn

loc_10008263:
add     eax, 4

loc_10008266:
mov     edx, [esi]
push    eax
push    1F1h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000827A
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_1000829A:
mov     al, [ebp+68h+var_A1]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    10h
; } // starts at 10007F6C
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData@16 endp

; Exported entry   9. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData@12


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData(x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData@12
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData@12 proc near

var_A8= dword ptr -0A8h
pv= dword ptr -0A4h
var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
String= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019AF5 SIZE 00000075 BYTES

; __unwind { // loc_10019B45
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    34h
mov     eax, offset loc_10019B45
call    __EH_prolog3_catch
mov     edi, [ebp+68h+arg_8]
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_10008350
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_13 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 100082F7
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_1000831B
mov     eax, [eax+4]
jmp     short loc_1000831E

loc_1000831B:
add     eax, 4

loc_1000831E:
mov     edx, [esi]
push    eax
push    1FFh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 1000830C
;   try {
mov     byte ptr [ebp+68h+var_6C], 0
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10008332
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10008350:
mov     [ebp+68h+var_A8], ebx
push    2
pop     ebx
;   try {
mov     [ebp+68h+var_6C], ebx
call    sub_10005A84
mov     edx, [eax]
push    edi
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 10008356
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
cmp     [ebp+68h+var_8], 8
mov     eax, [ebp+68h+var_1C]
jnb     short loc_1000837A
lea     eax, [ebp+68h+var_1C]

loc_1000837A:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 1000836A
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     eax, [ebp+68h+var_3C]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
xor     edi, edi
cmp     eax, edi
jz      short loc_100083A2
lea     esi, [eax+8]
jmp     short loc_100083A4

loc_100083A2:
xor     esi, esi
;   } // starts at 10008383

loc_100083A4:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     esi, edi
jz      short loc_10008421
mov     [ebp+68h+pv], edi
lea     eax, [esi+4]
mov     ecx, [eax]
lea     edx, [ebp+68h+pv]
push    edx
push    eax
call    dword ptr [ecx+10h]
test    eax, eax
jnz     short loc_1000840C
push    [ebp+68h+pv]
call    sub_10005A84
mov     ecx, eax
call    sub_10006232
mov     [ebp+68h+var_A8], eax
cmp     eax, edi
jnz     short loc_10008401
call    sub_1000687F
cmp     eax, edi
jz      short loc_10008401
mov     edx, [eax]
push    offset aInvalidPointer ; "Invalid pointer"
push    20Fh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008401:           ; pv
push    [ebp+68h+pv]
call    sub_10002887
pop     ecx
jmp     short loc_10008441

loc_1000840C:
call    sub_1000687F
cmp     eax, edi
jz      short loc_10008441
push    offset aFunstionFailed ; "Funstion failed"
push    216h
jmp     short loc_10008434

loc_10008421:
call    sub_1000687F
cmp     eax, edi
jz      short loc_10008441
push    offset aInvalidPointer ; "Invalid pointer"
push    21Bh

loc_10008434:
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100083A4

loc_10008441:
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10008441
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_10008453:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_100085FC
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Ah
push    offset aJavaComEoosGmT_13 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_20]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 1000846F
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
cmp     dword ptr [eax+18h], 8
jb      loc_100085C5
mov     eax, [eax+4]
jmp     loc_100085C8
;   } // starts at 10008488

loc_1000849E:
;   try {
;   catch(stru_10023114) // owned by 1000836A
;   catch(stru_10023114) // owned by 10008383
;   catch(stru_10023114) // owned by 100083A4
mov     byte ptr [ebp+68h+var_6C], 6
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 1000849E
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+String]
jnb     short loc_100084BF
lea     eax, [ebp+68h+String]

loc_100084BF:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_100084F1
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_100084DD
lea     ecx, [ebp+68h+var_38]

loc_100084DD:
mov     edx, [eax]
push    ecx
push    223h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100084AF

loc_100084F1:
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100084F1
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 10008501
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10008517
retn

loc_10008517:
jmp     loc_10008453

loc_1000851C:
;   try {
;   catch(stru_10023094) // owned by 1000836A
;   catch(stru_10023094) // owned by 10008383
;   catch(stru_10023094) // owned by 100083A4
mov     byte ptr [ebp+68h+var_6C], 8
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 1000851C
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_1000853D
lea     eax, [ebp+68h+var_90]

loc_1000853D:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_1000856F
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+var_1C]
jnb     short loc_1000855B
lea     ecx, [ebp+68h+var_1C]

loc_1000855B:
mov     edx, [eax]
push    ecx
push    22Ah
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 1000852D

loc_1000856F:
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000856F
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 1000857F
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10008595
retn

loc_10008595:
jmp     loc_10008453

loc_1000859A:
;   catch(...) // owned by 1000836A
;   catch(...) // owned by 10008383
;   catch(...) // owned by 100083A4
call    sub_1000687F
test    eax, eax
jz      short loc_100085BB
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    22Eh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100085BB:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10008453
retn

loc_100085C5:
add     eax, 4

loc_100085C8:
mov     edx, [esi]
push    eax
push    231h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100085DC
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_100085FC:
mov     eax, [ebp+68h+var_A8]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    0Ch
; } // starts at 100082BC
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData@12 endp

; Exported entry  12. _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU@16


; Attributes: bp-based frame fpd=68h

; __stdcall Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU(x, x, x, x)
public _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU@16
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU@16 proc near

var_A8= dword ptr -0A8h
var_A4= dword ptr -0A4h
var_A0= byte ptr -0A0h
var_90= dword ptr -90h
var_7C= dword ptr -7Ch
var_74= dword ptr -74h
var_6C= dword ptr -6Ch
var_64= byte ptr -64h
var_54= dword ptr -54h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_24= dword ptr -24h
var_20= dword ptr -20h
String= dword ptr -1Ch
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019B6A SIZE 0000007D BYTES

; __unwind { // loc_10019BC2
push    ebp
sub     esp, 64h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+68h+var_4], eax
push    34h
mov     eax, offset loc_10019BC2
call    __EH_prolog3_catch
mov     edi, [ebp+68h+arg_8]
mov     eax, [ebp+68h+arg_C]
mov     [ebp+68h+var_A8], eax
call    sub_1000687F
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_100086B8
push    offset aBeginFunction ; "Begin Function: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], ebx
push    offset aJavaComEoosGmT_14 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 1000865F
;   try {
mov     byte ptr [ebp+68h+var_6C], 1
cmp     dword ptr [eax+18h], 8
jb      short loc_10008683
mov     eax, [eax+4]
jmp     short loc_10008686

loc_10008683:
add     eax, 4

loc_10008686:
mov     edx, [esi]
push    eax
push    23Fh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10008674
;   try {
mov     byte ptr [ebp+68h+var_6C], 0
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000869A
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_100086B8:
mov     [ebp+68h+var_A4], ebx
push    2
pop     ebx
;   try {
mov     [ebp+68h+var_6C], ebx
call    sub_10005A84
mov     edx, [eax]
push    edi
lea     ecx, [ebp+68h+var_3C]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 100086BE
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
cmp     [ebp+68h+var_24], 8
mov     eax, [ebp+68h+var_38]
jnb     short loc_100086E2
lea     eax, [ebp+68h+var_38]

loc_100086E2:           ; String
push    eax
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100086D2
;   try {
mov     byte ptr [ebp+68h+var_6C], 4
lea     eax, [ebp+68h+var_20]
push    eax
call    sub_1000B0AC
mov     ecx, eax
call    sub_1000B009
xor     edi, edi
cmp     eax, edi
jz      short loc_1000870A
lea     esi, [eax+8]
jmp     short loc_1000870C

loc_1000870A:
xor     esi, esi
;   } // starts at 100086EB

loc_1000870C:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     esi, edi
jz      loc_100087D4
call    sub_10005A84
mov     edx, [eax]
push    [ebp+68h+var_A8]
lea     ecx, [ebp+68h+var_20]
push    ecx
mov     ecx, eax
call    dword ptr [edx+0Ch]
;   } // starts at 1000870C
;   try {
mov     byte ptr [ebp+68h+var_6C], 5
cmp     [ebp+68h+var_C], edi
jz      short loc_100087A3
cmp     [ebp+68h+var_8], 8
mov     eax, [ebp+68h+String]
jnb     short loc_1000874B
lea     eax, [ebp+68h+String]

loc_1000874B:           ; String
push    eax
call    sub_10003E4A
pop     ecx
cmp     eax, edi
jz      short loc_1000878E
lea     ecx, [esi+4]
mov     edx, [ecx]
push    eax
push    ecx
call    dword ptr [edx+14h]
cmp     eax, 80004005h
jz      short loc_10008779
push    eax
call    sub_10005A84
mov     ecx, eax
call    sub_10003CBD
mov     [ebp+68h+var_A4], eax
jmp     short loc_100087C3

loc_10008779:
call    sub_1000687F
cmp     eax, edi
jz      short loc_100087C3
push    offset aFunctionFailed ; "Function failed"
push    257h
jmp     short loc_100087B6

loc_1000878E:
call    sub_1000687F
cmp     eax, edi
jz      short loc_100087C3
push    offset aInvalidPointer ; "Invalid pointer"
push    25Ch
jmp     short loc_100087B6

loc_100087A3:
call    sub_1000687F
cmp     eax, edi
jz      short loc_100087C3
push    offset aInvalidObject ; "Invalid object"
push    261h

loc_100087B6:
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     edx, [eax]
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10008736

loc_100087C3:
;   try {
mov     byte ptr [ebp+68h+var_6C], 3
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_100087F4

loc_100087D4:
call    sub_1000687F
cmp     eax, edi
jz      short loc_100087F4
mov     edx, [eax]
push    offset aInvalidPointer ; "Invalid pointer"
push    266h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    ebx
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100087C3

loc_100087F4:
;   try {
mov     byte ptr [ebp+68h+var_6C], bl
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100087F4
or      [ebp+68h+var_6C], 0FFFFFFFFh

loc_10008806:
call    sub_1000687F
mov     esi, eax
test    esi, esi
jz      loc_100089AF
push    offset aEndFunction ; "End Function: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+68h+var_6C], 0Bh
push    offset aJavaComEoosGmT_14 ; "Java_com_eoos_gm_tis2web_sas_server_imp"...
push    eax             ; int
lea     eax, [ebp+68h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10008822
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ch
cmp     dword ptr [eax+18h], 8
jb      loc_10008978
mov     eax, [eax+4]
jmp     loc_1000897B
;   } // starts at 1000883B

loc_10008851:
;   try {
;   catch(stru_10023114) // owned by 100086D2
;   catch(stru_10023114) // owned by 100086EB
;   catch(stru_10023114) // owned by 1000870C
;   catch(stru_10023114) // owned by 10008736
;   catch(stru_10023114) // owned by 100087C3
mov     byte ptr [ebp+68h+var_6C], 7
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10008851
;   try {
mov     byte ptr [ebp+68h+var_6C], 8
cmp     [ebp+68h+var_40], 8
mov     eax, [ebp+68h+var_54]
jnb     short loc_10008872
lea     eax, [ebp+68h+var_54]

loc_10008872:           ; String
push    eax
lea     ecx, [ebp+68h+var_20] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_100088A4
cmp     [ebp+68h+var_8], 8
mov     ecx, [ebp+68h+String]
jnb     short loc_10008890
lea     ecx, [ebp+68h+String]

loc_10008890:
mov     edx, [eax]
push    ecx
push    26Eh
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10008862

loc_100088A4:
;   try {
mov     byte ptr [ebp+68h+var_6C], 7
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100088A4
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
lea     ecx, [ebp+68h+var_64]
call    sub_100050E3
;   } // starts at 100088B4
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_100088CA
retn

loc_100088CA:
jmp     loc_10008806

loc_100088CF:
;   try {
;   catch(stru_10023094) // owned by 100086D2
;   catch(stru_10023094) // owned by 100086EB
;   catch(stru_10023094) // owned by 1000870C
;   catch(stru_10023094) // owned by 10008736
;   catch(stru_10023094) // owned by 100087C3
mov     byte ptr [ebp+68h+var_6C], 9
push    offset aAnExceptionWas ; "An exception was thrown: "
lea     ecx, [ebp+68h+var_3C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100088CF
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Ah
cmp     [ebp+68h+var_7C], 8
mov     eax, [ebp+68h+var_90]
jnb     short loc_100088F0
lea     eax, [ebp+68h+var_90]

loc_100088F0:           ; String
push    eax
lea     ecx, [ebp+68h+var_3C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
call    sub_1000687F
test    eax, eax
jz      short loc_10008922
cmp     [ebp+68h+var_24], 8
mov     ecx, [ebp+68h+var_38]
jnb     short loc_1000890E
lea     ecx, [ebp+68h+var_38]

loc_1000890E:
mov     edx, [eax]
push    ecx
push    275h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 100088E0

loc_10008922:
;   try {
mov     byte ptr [ebp+68h+var_6C], 9
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10008922
;   try {
mov     byte ptr [ebp+68h+var_6C], 6
lea     ecx, [ebp+68h+var_A0]
call    sub_10002319
;   } // starts at 10008932
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10008948
retn

loc_10008948:
jmp     loc_10008806

loc_1000894D:
;   catch(...) // owned by 100086D2
;   catch(...) // owned by 100086EB
;   catch(...) // owned by 1000870C
;   catch(...) // owned by 10008736
;   catch(...) // owned by 100087C3
call    sub_1000687F
test    eax, eax
jz      short loc_1000896E
mov     edx, [eax]
push    offset aAnExceptionWas_0 ; "An exception was thrown"
push    279h
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000896E:
or      [ebp+68h+var_6C], 0FFFFFFFFh
mov     eax, offset loc_10008806
retn

loc_10008978:
add     eax, 4

loc_1000897B:
mov     edx, [esi]
push    eax
push    27Ch
push    offset aSasbridgeCpp ; ".\\SASBridge.cpp"
push    1
mov     ecx, esi
call    dword ptr [edx+18h]
;   try {
mov     byte ptr [ebp+68h+var_6C], 0Bh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000898F
or      [ebp+68h+var_6C], 0FFFFFFFFh
push    0               ; N
push    1               ; char
lea     ecx, [ebp+68h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_100089AF:
mov     eax, [ebp+68h+var_A4]
mov     ecx, [ebp+68h+var_74]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+68h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 68h ; 'h'
leave
retn    10h
; } // starts at 1000861E
_Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU@16 endp




sub_100089D1 proc near

; FUNCTION CHUNK AT 1000646B SIZE 0000002D BYTES

call    sub_10009ADB
jmp     loc_1000646B
sub_100089D1 endp

; Exported entry   1. ??0CSecurity@@QAE@ABV0@@Z



; CSecurity *__thiscall CSecurity::CSecurity(CSecurity *__hidden this, const struct CSecurity *)
public ??0CSecurity@@QAE@ABV0@@Z
??0CSecurity@@QAE@ABV0@@Z proc near
mov     eax, ecx
mov     dword ptr [eax], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
retn    4
??0CSecurity@@QAE@ABV0@@Z endp

; Exported entry   3. ??4CSecurity@@QAEAAV0@ABV0@@Z



; public: class CSecurity & __thiscall CSecurity::operator=(class CSecurity const &)
public ??4CSecurity@@QAEAAV0@ABV0@@Z
??4CSecurity@@QAEAAV0@ABV0@@Z proc near
mov     eax, ecx
retn    4
??4CSecurity@@QAEAAV0@ABV0@@Z endp



; Attributes: bp-based frame

sub_100089EB proc near

pExceptionObject= byte ptr -40h
var_18= dword ptr -18h
var_14= dword ptr -14h
nSize= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10009E7E SIZE 00000009 BYTES
; FUNCTION CHUNK AT 10019BE7 SIZE 0000003C BYTES

; __unwind { // loc_10019C08
push    34h
mov     eax, offset loc_10019C08
call    __EH_prolog3
xor     edi, edi
mov     [ebp+var_14], edi
mov     ebx, [ebp+arg_4]
cmp     [ebx+14h], edi
jnz     short loc_10008A35
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+nSize], offset aInvalidEnviron_0 ; "Invalid environment variable name ( emp"...
push    1BAh            ; Value

loc_10008A17:
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     eax, [ebp+nSize]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]

loc_10008A22:
call    sub_100021FE
push    offset stru_1001FF54 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10008A35:
cmp     dword ptr [ebx+18h], 8
jb      short loc_10008A42
add     ebx, 4
mov     eax, [ebx]
jmp     short loc_10008A47

loc_10008A42:
add     ebx, 4
mov     eax, ebx

loc_10008A47:
mov     esi, ds:GetEnvironmentVariableW
push    edi             ; nSize
push    edi             ; lpBuffer
push    eax             ; lpName
call    esi ; GetEnvironmentVariableW
mov     [ebp+nSize], eax
cmp     eax, edi
jnz     short loc_10008A94
call    ds:GetLastError
cmp     eax, 0CBh
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
lea     ecx, [ebp+pExceptionObject]
lea     eax, [ebp+arg_4]
jnz     short loc_10008A86
mov     [ebp+nSize], offset aRequestedEnvir ; "Requested environment variable does not"...
push    1C5h

loc_10008A7F:
push    eax
lea     eax, [ebp+nSize]
push    eax
jmp     short loc_10008A22

loc_10008A86:
mov     [ebp+nSize], offset aCouldNotGetReq ; "Could not get requested environment var"...
push    1C8h
jmp     short loc_10008A7F

loc_10008A94:
xor     ecx, ecx
push    2
pop     edx
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
mov     edi, eax
pop     ecx
mov     [ebp+var_18], edi
;   try {
mov     [ebp+var_4], 1
test    edi, edi
jnz     short loc_10008AD1
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+nSize], offset aNotEnoughMemor ; "Not enough memory"
push    1CFh
jmp     loc_10008A17

loc_10008AD1:
mov     eax, [ebp+arg_4]
cmp     dword ptr [eax+18h], 8
jb      short loc_10008ADC
mov     ebx, [ebx]

loc_10008ADC:           ; nSize
push    [ebp+nSize]
push    edi             ; lpBuffer
push    ebx             ; lpName
call    esi ; GetEnvironmentVariableW
test    eax, eax
jnz     short loc_10008B23
call    ds:GetLastError
cmp     eax, 0CBh
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
lea     ecx, [ebp+pExceptionObject]
lea     eax, [ebp+arg_4]
jnz     short loc_10008B12
mov     [ebp+nSize], offset aRequestedEnvir ; "Requested environment variable does not"...
push    1DAh
jmp     loc_10008A7F

loc_10008B12:
mov     [ebp+nSize], offset aCouldNotGetReq ; "Could not get requested environment var"...
push    1DDh
jmp     loc_10008A7F

loc_10008B23:
mov     ecx, [ebp+arg_0]
push    edi             ; String
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
mov     [ebp+var_14], 1
;   } // starts at 10008AAE
;   try {
mov     byte ptr [ebp+var_4], 0
push    edi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
mov     eax, [ebp+arg_0]
pop     ecx
call    __EH_epilog3
retn
;   } // starts at 10008B33
; } // starts at 100089EB
sub_100089EB endp



; Attributes: bp-based frame

sub_10008B47 proc near

var_68= byte ptr -68h
var_4C= dword ptr -4Ch
var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_28= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019C23 SIZE 00000045 BYTES

; __unwind { // loc_10019C43
push    5Ch
mov     eax, offset loc_10019C43
call    __EH_prolog3_GS
xor     edi, edi
mov     [ebp+var_30], edi
call    sub_1000687F
mov     esi, eax
cmp     esi, edi
jz      loc_10008C34
push    offset a827f7cb1A5e94d ; "827F7CB1-A5E9-4DE2-B0E1-E571DD1D14F9"
lea     ecx, [ebp+var_4C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+var_4], edi
lea     eax, [ebp+var_4C]
push    eax
lea     eax, [ebp+var_2C]
push    eax
call    sub_100089EB
pop     ecx
pop     ecx
;   } // starts at 10008B74
;   try {
mov     byte ptr [ebp+var_4], 2
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     [ebp+var_18], edi
jz      loc_10008C25
mov     eax, [esi]
push    1
mov     ecx, esi
call    dword ptr [eax+10h]
mov     eax, [esi]
push    2
mov     ecx, esi
call    dword ptr [eax+10h]
mov     eax, [esi]
push    offset aSasToolBridgeS ; "SAS Tool Bridge ( SASBridge.DLL )"
mov     ecx, esi
call    dword ptr [eax+0Ch]
push    offset asc_1001D03C ; "\\"
lea     ecx, [ebp+var_68]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10008B86
;   try {
mov     byte ptr [ebp+var_4], 3
push    offset aSasbridgeLog ; "SASBridge.LOG"
push    eax             ; int
lea     eax, [ebp+var_4C]
push    eax             ; int
call    sub_10006942
add     esp, 0Ch
;   } // starts at 10008BC9
;   try {
mov     byte ptr [ebp+var_4], 4
push    0FFFFFFFFh      ; N
push    edi             ; int
push    eax             ; int
lea     ecx, [ebp+var_2C]
call    sub_10001C37
;   } // starts at 10008BDF
;   try {
mov     byte ptr [ebp+var_4], 3
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10008BEF
;   try {
mov     byte ptr [ebp+var_4], 2
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_68]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     [ebp+var_14], 8
mov     eax, [ebp+var_28]
jnb     short loc_10008C19
lea     eax, [ebp+var_28]

loc_10008C19:
mov     edx, [esi]
push    edi
push    eax
mov     ecx, esi
call    dword ptr [edx+4]
mov     [ebp+var_30], eax
;   } // starts at 10008BFE

loc_10008C25:
or      [ebp+var_4], 0FFFFFFFFh
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10008C34:
mov     eax, [ebp+var_30]
call    __EH_epilog3_GS
retn
; } // starts at 10008B47
sub_10008B47 endp




; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12 proc near

hinstDLL= dword ptr  4
fdwReason= dword ptr  8
lpvReserved= dword ptr  0Ch

mov     eax, [esp+fdwReason]
push    esi
xor     esi, esi
inc     esi
sub     eax, 0
jz      short loc_10008C56
dec     eax
jnz     short loc_10008C5B
call    sub_10008B47
mov     esi, eax
jmp     short loc_10008C5B

loc_10008C56:
call    sub_100089D1

loc_10008C5B:
mov     eax, esi
pop     esi
retn    0Ch
_DllMain@12 endp




sub_10008C61 proc near
xor     eax, eax
mov     [ecx+68h], eax
mov     [ecx+6Ch], eax
mov     [ecx+70h], eax
mov     [ecx+74h], eax
mov     [ecx+78h], eax
mov     [ecx+7Ch], eax
mov     [ecx+80h], eax
mov     [ecx+84h], eax
retn
sub_10008C61 endp




sub_10008C82 proc near
push    esi
mov     esi, ecx
mov     eax, [esi+64h]
test    eax, eax
jz      short loc_10008CB5
push    eax             ; hLibModule
call    ds:FreeLibrary
test    eax, eax
jnz     short loc_10008CB5
call    sub_1000687F
test    eax, eax
jz      short loc_10008CB5
mov     edx, [eax]
push    offset aCouldNotFreeLi ; "Could not free library"
push    65h ; 'e'
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008CB5:
lea     ecx, [esi-4]
call    sub_10008C61
xor     eax, eax
pop     esi
retn
sub_10008C82 endp




sub_10008CC1 proc near
push    esi
mov     esi, ecx
mov     eax, [esi+68h]
push    edi
test    eax, eax
jz      loc_10008E03
mov     edi, ds:GetProcAddress
push    offset aInit_0  ; "Init"
push    eax             ; hModule
call    edi ; GetProcAddress
mov     [esi+6Ch], eax
test    eax, eax
jnz     short loc_10008CFE
call    sub_1000687F
test    eax, eax
jz      loc_10008E24
push    offset aCouldNotGetFun ; "Could not get function pointer"
push    74h ; 't'
jmp     loc_10008E16

loc_10008CFE:
push    offset aSetdriverprope ; "SetDriverProperties2"
push    dword ptr [esi+68h] ; hModule
call    edi ; GetProcAddress
mov     [esi+70h], eax
test    eax, eax
jnz     short loc_10008D28
call    sub_1000687F
test    eax, eax
jz      loc_10008E24
push    offset aCouldNotInitia ; "Could not initialize function pointer"
push    7Ah ; 'z'
jmp     loc_10008E16

loc_10008D28:
push    offset aSetssadata ; "SetSSAData"
push    dword ptr [esi+68h] ; hModule
call    edi ; GetProcAddress
mov     [esi+74h], eax
test    eax, eax
jnz     short loc_10008D55
call    sub_1000687F
test    eax, eax
jz      loc_10008E24
push    offset aCouldNotGetFun ; "Could not get function pointer"
push    80h
jmp     loc_10008E16

loc_10008D55:
push    offset aGetssadata ; "GetSSAData"
push    dword ptr [esi+68h] ; hModule
call    edi ; GetProcAddress
mov     [esi+78h], eax
test    eax, eax
jnz     short loc_10008D82
call    sub_1000687F
test    eax, eax
jz      loc_10008E24
push    offset aCouldNotGetFun ; "Could not get function pointer"
push    86h
jmp     loc_10008E16

loc_10008D82:
push    offset aScaenableecu ; "SCAEnableECU"
push    dword ptr [esi+68h] ; hModule
call    edi ; GetProcAddress
mov     [esi+7Ch], eax
test    eax, eax
jnz     short loc_10008DAC
call    sub_1000687F
test    eax, eax
jz      loc_10008E24
push    offset aCouldNotGetFun ; "Could not get function pointer"
push    8Ch
jmp     short loc_10008E16

loc_10008DAC:
push    offset aGetsalesorgani ; "GetSalesOrganization"
push    dword ptr [esi+68h] ; hModule
call    edi ; GetProcAddress
mov     [esi+80h], eax
test    eax, eax
jnz     short loc_10008DD5
call    sub_1000687F
test    eax, eax
jz      short loc_10008E24
push    offset aCouldNotGetFun ; "Could not get function pointer"
push    92h
jmp     short loc_10008E16

loc_10008DD5:
push    offset aChecksecuritya ; "CheckSecurityAccessPermissions"
push    dword ptr [esi+68h] ; hModule
call    edi ; GetProcAddress
mov     [esi+84h], eax
test    eax, eax
jnz     short loc_10008DFE
call    sub_1000687F
test    eax, eax
jz      short loc_10008E24
push    offset aCouldNotGetFun ; "Could not get function pointer"
push    98h
jmp     short loc_10008E16

loc_10008DFE:
xor     eax, eax
inc     eax
jmp     short loc_10008E26

loc_10008E03:
call    sub_1000687F
test    eax, eax
jz      short loc_10008E24
push    offset aInstanceHandle ; "Instance handle is NULL"
push    0A0h

loc_10008E16:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008E24:
xor     eax, eax

loc_10008E26:
pop     edi
pop     esi
retn
sub_10008CC1 endp




sub_10008E29 proc near
mov     eax, [ecx+64h]
retn
sub_10008E29 endp


loc_10008E2D:
mov     eax, 80004001h
retn    0Ch

loc_10008E35:
xor     eax, eax
retn    4



sub_10008E3A proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

cmp     dword ptr [ecx+60h], 0
jz      short loc_10008EA4
mov     ecx, [ecx+64h]
test    ecx, ecx
jz      short loc_10008E8F
cmp     [esp+arg_0], 0
jz      short loc_10008E7A
cmp     [esp+arg_4], 0
jz      short loc_10008E7A
push    [esp+arg_4]
push    [esp+4+arg_0]
call    ecx
pop     ecx
pop     ecx
test    eax, eax
jz      short loc_10008EC5
call    sub_1000687F
test    eax, eax
jz      short loc_10008EC5
push    offset aFunctionFailed ; "Function failed"
push    0E7h
jmp     short loc_10008EB7

loc_10008E7A:
call    sub_1000687F
test    eax, eax
jz      short loc_10008EC5
push    offset aInvalidInputPo ; "Invalid input pointer"
push    0ECh
jmp     short loc_10008EB7

loc_10008E8F:
call    sub_1000687F
test    eax, eax
jz      short loc_10008EC5
push    offset aInvalidPointer ; "Invalid pointer"
push    0F1h
jmp     short loc_10008EB7

loc_10008EA4:
call    sub_1000687F
test    eax, eax
jz      short loc_10008EC5
push    offset aInstanceHandle ; "Instance handle is NULL"
push    0F6h

loc_10008EB7:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008EC5:
xor     eax, eax
retn    8
sub_10008E3A endp




sub_10008ECA proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

cmp     [esp+arg_4], 0
push    esi
mov     esi, 80004005h
jz      short loc_10008F39
mov     eax, [esp+4+arg_0]
cmp     dword ptr [eax+5Ch], 0
jz      short loc_10008F24
mov     eax, [eax+68h]
test    eax, eax
jz      short loc_10008F0F
push    [esp+4+arg_4]
call    eax
pop     ecx
cmp     eax, 80040264h
jnz     short loc_10008EFA
xor     esi, esi
jmp     short loc_10008F5A

loc_10008EFA:
call    sub_1000687F
test    eax, eax
jz      short loc_10008F5A
push    offset aFunctionFailed ; "Function failed"
push    134h
jmp     short loc_10008F4C

loc_10008F0F:
call    sub_1000687F
test    eax, eax
jz      short loc_10008F5A
push    offset aInvalidPointer ; "Invalid pointer"
push    139h
jmp     short loc_10008F4C

loc_10008F24:
call    sub_1000687F
test    eax, eax
jz      short loc_10008F5A
push    offset aInstanceHandle ; "Instance handle is NULL"
push    13Eh
jmp     short loc_10008F4C

loc_10008F39:
call    sub_1000687F
test    eax, eax
jz      short loc_10008F5A
push    offset aInvalidInputPo ; "Invalid input pointer"
push    143h

loc_10008F4C:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008F5A:
mov     eax, esi
pop     esi
retn    8
sub_10008ECA endp




sub_10008F60 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

cmp     [esp+arg_4], 0
push    esi
mov     esi, 80004005h
jz      short loc_10008FCC
mov     eax, [esp+4+arg_0]
cmp     dword ptr [eax+5Ch], 0
jz      short loc_10008FB7
mov     eax, [eax+6Ch]
test    eax, eax
jz      short loc_10008FA2
push    [esp+4+arg_4]
call    eax
pop     ecx
test    eax, eax
jnz     short loc_10008F8D
xor     esi, esi
jmp     short loc_10008FED

loc_10008F8D:
call    sub_1000687F
test    eax, eax
jz      short loc_10008FED
push    offset aFunctionFailed ; "Function failed"
push    159h
jmp     short loc_10008FDF

loc_10008FA2:
call    sub_1000687F
test    eax, eax
jz      short loc_10008FED
push    offset aInvalidPointer ; "Invalid pointer"
push    15Eh
jmp     short loc_10008FDF

loc_10008FB7:
call    sub_1000687F
test    eax, eax
jz      short loc_10008FED
push    offset aInstanceHandle ; "Instance handle is NULL"
push    163h
jmp     short loc_10008FDF

loc_10008FCC:
call    sub_1000687F
test    eax, eax
jz      short loc_10008FED
push    offset aInvalidInputPo ; "Invalid input pointer"
push    168h

loc_10008FDF:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10008FED:
mov     eax, esi
pop     esi
retn    8
sub_10008F60 endp




sub_10008FF3 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

cmp     [esp+arg_4], 0
push    esi
mov     esi, 80004005h
jz      short loc_10009046
mov     eax, [esp+4+arg_0]
cmp     dword ptr [eax+5Ch], 0
jz      short loc_10009031
mov     eax, [eax+70h]
test    eax, eax
jz      short loc_1000901C
push    [esp+4+arg_4]
call    eax
pop     ecx
mov     esi, eax
jmp     short loc_10009067

loc_1000901C:
call    sub_1000687F
test    eax, eax
jz      short loc_10009067
push    offset aInvalidPointer ; "Invalid pointer"
push    17Ch
jmp     short loc_10009059

loc_10009031:
call    sub_1000687F
test    eax, eax
jz      short loc_10009067
push    offset aInstanceHandle ; "Instance handle is NULL"
push    181h
jmp     short loc_10009059

loc_10009046:
call    sub_1000687F
test    eax, eax
jz      short loc_10009067
push    offset aInvalidInputPo ; "Invalid input pointer"
push    186h

loc_10009059:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009067:
mov     eax, esi
pop     esi
retn    8
sub_10008FF3 endp




sub_1000906D proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

cmp     [esp+arg_4], 0
push    esi
mov     esi, 80004005h
jz      short loc_100090D9
mov     eax, [esp+4+arg_0]
cmp     dword ptr [eax+58h], 0
jz      short loc_100090C4
mov     eax, [eax+70h]
test    eax, eax
jz      short loc_100090AF
push    [esp+4+arg_4]
call    eax
pop     ecx
test    eax, eax
jnz     short loc_1000909A
xor     esi, esi
jmp     short loc_100090FA

loc_1000909A:
call    sub_1000687F
test    eax, eax
jz      short loc_100090FA
push    offset aFunctionFailed ; "Function failed"
push    1A0h
jmp     short loc_100090EC

loc_100090AF:
call    sub_1000687F
test    eax, eax
jz      short loc_100090FA
push    offset aInvalidPointer ; "Invalid pointer"
push    1A5h
jmp     short loc_100090EC

loc_100090C4:
call    sub_1000687F
test    eax, eax
jz      short loc_100090FA
push    offset aInstanceHandle ; "Instance handle is NULL"
push    1AAh
jmp     short loc_100090EC

loc_100090D9:
call    sub_1000687F
test    eax, eax
jz      short loc_100090FA
push    offset aInvalidInputPo ; "Invalid input pointer"
push    1AFh

loc_100090EC:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100090FA:
mov     eax, esi
pop     esi
retn    8
sub_1000906D endp



; Attributes: bp-based frame

sub_10009100 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
cmp     [ebp+arg_4], 0
push    esi
mov     esi, 80004005h
jz      short loc_10009176
cmp     [ebp+arg_8], 0
jz      short loc_10009176
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+58h], 0
jz      short loc_10009161
mov     eax, [eax+74h]
test    eax, eax
jz      short loc_1000914C
push    [ebp+arg_8]
push    [ebp+arg_4]
call    eax
pop     ecx
pop     ecx
test    eax, eax
jnz     short loc_10009137
xor     esi, esi
jmp     short loc_10009197

loc_10009137:
call    sub_1000687F
test    eax, eax
jz      short loc_10009197
push    offset aFunctionFailed ; "Function failed"
push    1C5h
jmp     short loc_10009189

loc_1000914C:
call    sub_1000687F
test    eax, eax
jz      short loc_10009197
push    offset aInvalidPointer ; "Invalid pointer"
push    1CAh
jmp     short loc_10009189

loc_10009161:
call    sub_1000687F
test    eax, eax
jz      short loc_10009197
push    offset aInstanceHandle ; "Instance handle is NULL"
push    1CFh
jmp     short loc_10009189

loc_10009176:
call    sub_1000687F
test    eax, eax
jz      short loc_10009197
push    offset aInvalidInputPo ; "Invalid input pointer"
push    1D4h

loc_10009189:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009197:
mov     eax, esi
pop     esi
pop     ebp
retn    0Ch
sub_10009100 endp




sub_1000919E proc near
mov     dword ptr [ecx], offset off_1001D210
retn
sub_1000919E endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_3]



sub_100091C2 proc near
mov     dword ptr [ecx], offset off_1001D220
retn
sub_100091C2 endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_4]


; Attributes: bp-based frame

sub_100091E6 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019C68 SIZE 00000023 BYTES

; __unwind { // loc_10019C70
push    4
mov     eax, offset loc_10019C70
call    __EH_prolog3
mov     eax, ecx
mov     [ebp+var_10], eax
mov     dword ptr [eax], offset off_1001D220
;   try {
and     [ebp+var_4], 0
mov     dword ptr [eax], offset off_1001D23C
;   } // starts at 100091FD
or      [ebp+var_4], 0FFFFFFFFh
call    __EH_epilog3
retn
; } // starts at 100091E6
sub_100091E6 endp



; Attributes: bp-based frame

sub_10009211 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019C68 SIZE 00000023 BYTES

; __unwind { // loc_10019C70
push    4
mov     eax, offset loc_10019C70
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_1001D23C
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [ecx], offset off_1001D220
call    __EH_epilog3
retn
; } // starts at 10009211
sub_10009211 endp


loc_10009236:
push    esi
mov     esi, ecx
call    sub_10009211
test    byte ptr [esp+8], 1
jz      short loc_1000924C
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000924C:
mov     eax, esi
pop     esi
retn    4



sub_10009252 proc near
mov     dword ptr [ecx], offset off_1001D260
retn
sub_10009252 endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_5]


; Attributes: bp-based frame

sub_10009276 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019C8B SIZE 00000023 BYTES

; __unwind { // loc_10019C93
push    4
mov     eax, offset loc_10019C93
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_1001D2A4
mov     dword ptr [ecx+4], offset off_1001D288
mov     dword ptr [ecx+8], offset off_1001D270
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [ecx], offset off_1001D260
call    __EH_epilog3
retn
; } // starts at 10009276
sub_10009276 endp


loc_100092A9:
push    esi
mov     esi, ecx
call    sub_10009276
test    byte ptr [esp+8], 1
jz      short loc_100092BF
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_100092BF:
mov     eax, esi
pop     esi
retn    4



; int __cdecl sub_100092C5(int, LPVOID pv)
sub_100092C5 proc near

arg_0= dword ptr  4
pv= dword ptr  8

push    ebx
mov     ebx, [esp+4+pv]
push    esi
xor     esi, esi
cmp     ebx, esi
jz      short loc_100092F7
push    edi
mov     edi, ds:CoTaskMemFree
cmp     [esp+0Ch+arg_0], esi
jbe     short loc_100092F3

loc_100092DE:
mov     eax, [ebx+esi*4]
test    eax, eax
jz      short loc_100092EC
push    eax             ; pv
call    edi ; CoTaskMemFree
and     dword ptr [ebx+esi*4], 0

loc_100092EC:
inc     esi
cmp     esi, [esp+0Ch+arg_0]
jb      short loc_100092DE

loc_100092F3:           ; pv
push    ebx
call    edi ; CoTaskMemFree
pop     edi

loc_100092F7:
pop     esi
pop     ebx
retn
sub_100092C5 endp



; Attributes: bp-based frame

; int __stdcall sub_100092FA(int, LPVOID pv, LPVOID)
sub_100092FA proc near

arg_0= dword ptr  8
pv= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    esi
xor     esi, esi
cmp     [ecx+60h], esi
jz      short loc_1000936F
mov     ecx, [ecx+68h]
cmp     ecx, esi
jz      short loc_1000935A
push    [ebp+arg_8]
push    [ebp+pv]
push    [ebp+arg_0]
call    ecx
add     esp, 0Ch
test    eax, eax
jnz     short loc_10009321
inc     esi
jmp     short loc_10009342

loc_10009321:
call    sub_1000687F
cmp     eax, esi
jz      short loc_10009342
mov     edx, [eax]
push    offset aFunctionFailed ; "Function failed"
push    10Ah
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009342:           ; pv
push    [ebp+arg_8]
push    [ebp+arg_0]     ; int
call    sub_100092C5
pop     ecx
pop     ecx
push    [ebp+pv]        ; pv
call    ds:CoTaskMemFree
jmp     short loc_10009390

loc_1000935A:
call    sub_1000687F
cmp     eax, esi
jz      short loc_10009390
push    offset aInvalidPointer ; "Invalid pointer"
push    115h
jmp     short loc_10009382

loc_1000936F:
call    sub_1000687F
cmp     eax, esi
jz      short loc_10009390
push    offset aInstanceHandle ; "Instance handle is NULL"
push    11Ah

loc_10009382:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009390:
mov     eax, esi
pop     esi
pop     ebp
retn    0Ch
sub_100092FA endp



; Attributes: bp-based frame

sub_10009397 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019C8B SIZE 00000023 BYTES

; __unwind { // loc_10019C93
push    4
mov     eax, offset loc_10019C93
call    __EH_prolog3
mov     eax, ecx
mov     [ebp+var_10], eax
mov     dword ptr [eax], offset off_1001D260
;   try {
and     [ebp+var_4], 0
mov     dword ptr [eax+4], offset off_1001D2B4
mov     dword ptr [eax+8], offset off_1001D2D0
mov     dword ptr [eax], offset off_1001D2A4
mov     dword ptr [eax+4], offset off_1001D288
mov     dword ptr [eax+8], offset off_1001D270
;   } // starts at 100093AE
or      [ebp+var_4], 0FFFFFFFFh
call    __EH_epilog3
retn
; } // starts at 10009397
sub_10009397 endp



; Attributes: bp-based frame

sub_100093DE proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019CAE SIZE 0000005A BYTES

; __unwind { // loc_10019CED
push    4
mov     eax, offset loc_10019CED
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001D210
;   try {
and     [ebp+var_4], 0
lea     edi, [esi+4]
mov     ecx, edi
call    sub_100091E6
;   } // starts at 100093F5
;   try {
mov     byte ptr [ebp+var_4], 1
lea     ebx, [esi+8]
mov     ecx, ebx
call    sub_10009397
;   } // starts at 10009403
;   try {
mov     byte ptr [ebp+var_4], 2
lea     ecx, [esi+14h]
mov     dword ptr [esi], offset off_1001D350
mov     dword ptr [edi], offset off_1001D32C
mov     dword ptr [ebx], offset off_1001D31C
mov     dword ptr [esi+0Ch], offset off_1001D300
mov     dword ptr [esi+10h], offset off_1001D2E8
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 10009411
;   try {
mov     byte ptr [ebp+var_4], 3
lea     ecx, [esi+30h]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 1000943D
;   try {
mov     byte ptr [ebp+var_4], 4
lea     ecx, [esi+4Ch]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 10009449
;   try {
mov     byte ptr [ebp+var_4], 5
mov     ecx, esi
call    sub_10008C61
;   } // starts at 10009455
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 100093DE
sub_100093DE endp




sub_1000946C proc near

arg_0= byte ptr  4

; FUNCTION CHUNK AT 1000952B SIZE 0000001C BYTES

sub     ecx, 4
jmp     loc_1000952B
sub_1000946C endp


loc_10009474:
sub     ecx, 8
jmp     loc_1000952B

loc_1000947C:
sub     dword ptr [esp+4], 4
jmp     loc_10008E35

loc_10009486:
sub     dword ptr [esp+4], 4
jmp     loc_10008E2D


; Attributes: bp-based frame

sub_10009490 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019CAE SIZE 0000005A BYTES

; __unwind { // loc_10019CED
push    4
mov     eax, offset loc_10019CED
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
lea     edi, [esi+4]
lea     ebx, [esi+8]
mov     dword ptr [esi], offset off_1001D350
mov     dword ptr [edi], offset off_1001D32C
mov     dword ptr [ebx], offset off_1001D31C
mov     dword ptr [esi+0Ch], offset off_1001D300
mov     dword ptr [esi+10h], offset off_1001D2E8
;   try {
mov     [ebp+var_4], 5
mov     ecx, edi
call    sub_10008C82
;   } // starts at 100094C7
;   try {
mov     byte ptr [ebp+var_4], 4
push    0               ; N
push    1               ; char
lea     ecx, [esi+4Ch]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100094D5
;   try {
mov     byte ptr [ebp+var_4], 3
push    0               ; N
push    1               ; char
lea     ecx, [esi+30h]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100094E5
;   try {
mov     byte ptr [ebp+var_4], 2
push    0               ; N
push    1               ; char
lea     ecx, [esi+14h]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100094F5
;   try {
mov     byte ptr [ebp+var_4], 1
mov     ecx, ebx
call    sub_10009276
;   } // starts at 10009505
;   try {
mov     byte ptr [ebp+var_4], 0
mov     ecx, edi
call    sub_10009211
;   } // starts at 10009510
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [esi], offset off_1001D210
call    __EH_epilog3
retn
; } // starts at 10009490
sub_10009490 endp

; START OF FUNCTION CHUNK FOR sub_1000946C

loc_1000952B:
push    esi
mov     esi, ecx
call    sub_10009490
test    [esp+4+arg_0], 1
jz      short loc_10009541
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10009541:
mov     eax, esi
pop     esi
retn    4
; END OF FUNCTION CHUNK FOR sub_1000946C


; Attributes: bp-based frame

sub_10009547 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019D08 SIZE 00000034 BYTES

; __unwind { // loc_10019D21
push    4
mov     eax, offset loc_10019D21
call    __EH_prolog3
and     [ebp+var_10], 0
add     ecx, 14h
push    ecx
mov     ecx, [ebp+arg_0]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
;   try {
and     [ebp+var_4], 0
mov     [ebp+var_10], 1
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn    4
;   } // starts at 10009563
; } // starts at 10009547
sub_10009547 endp



; Attributes: bp-based frame

sub_10009579 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 10019D08 SIZE 00000034 BYTES

; __unwind { // loc_10019D21
push    4
mov     eax, offset loc_10019D21
call    __EH_prolog3
and     [ebp+var_10], 0
add     ecx, 2Ch ; ','
push    ecx
mov     ecx, [ebp+arg_0]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
;   try {
and     [ebp+var_4], 0
mov     [ebp+var_10], 1
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn    4
;   } // starts at 10009595
; } // starts at 10009579
sub_10009579 endp




sub_100095AB proc near

arg_0= dword ptr  4

push    0FFFFFFFFh
push    0
push    [esp+8+arg_0]
add     ecx, 14h
call    sub_10001BA4
retn    4
sub_100095AB endp




sub_100095BE proc near

arg_0= dword ptr  4

push    0FFFFFFFFh
push    0
push    [esp+8+arg_0]
add     ecx, 2Ch ; ','
call    sub_10001BA4
retn    4
sub_100095BE endp




sub_100095D1 proc near

arg_0= dword ptr  4

push    0FFFFFFFFh
push    0
push    [esp+8+arg_0]
add     ecx, 48h ; 'H'
call    sub_10001BA4
retn    4
sub_100095D1 endp



; Attributes: bp-based frame

sub_100095E4 proc near

var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019DE5 SIZE 0000003C BYTES

; __unwind { // loc_10019E06
push    20h
mov     eax, offset loc_10019E06
call    __EH_prolog3
push    [ebp+arg_4]
and     [ebp+var_10], 0
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
xor     esi, esi
inc     esi
;   try {
mov     [ebp+var_4], esi
push    0FFFFFFFFh      ; N
push    0               ; int
push    [ebp+arg_8]     ; int
mov     ecx, eax
call    sub_10001C37
mov     ecx, [ebp+arg_0]
push    eax
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
mov     [ebp+var_10], esi
;   } // starts at 10009602
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; N
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn
;   } // starts at 1000961F
; } // starts at 100095E4
sub_100095E4 endp



; Attributes: bp-based frame

sub_10009637 proc near

pExceptionObject= byte ptr -40h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019BE7 SIZE 0000003C BYTES

; __unwind { // loc_10019C08
push    34h
mov     eax, offset loc_10019C08
call    __EH_prolog3
and     [ebp+var_14], 0
mov     edi, [ebp+arg_4]
cmp     dword ptr [edi+14h], 0
jnz     short loc_10009681
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+var_10], offset aInvalidModuleN ; "Invalid module name ( module name is em"...
push    1F0h            ; Value

loc_10009663:
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     eax, [ebp+var_10]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
call    sub_100021FE
push    offset stru_1001FF54 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10009681:           ; unsigned int
push    208h
call    ??_U@YAPAXI@Z   ; operator new[](uint)
mov     esi, eax
pop     ecx
mov     [ebp+var_18], esi
xor     ebx, ebx
inc     ebx
;   try {
mov     [ebp+var_4], ebx
test    esi, esi
jnz     short loc_100096B0
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+var_10], offset aNotEnoughMemor ; "Not enough memory"
push    1F7h
jmp     short loc_10009663

loc_100096B0:
cmp     dword ptr [edi+18h], 8
jb      short loc_100096BB
mov     edi, [edi+4]
jmp     short loc_100096BE

loc_100096BB:
add     edi, 4

loc_100096BE:           ; lpModuleName
push    edi
call    ds:GetModuleHandleW
test    eax, eax
jnz     short loc_100096DE
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+var_10], offset aInvalidModuleH ; "Invalid module handle"
push    1FEh
jmp     short loc_10009663

loc_100096DE:           ; nSize
push    104h
push    esi             ; lpFilename
push    eax             ; hModule
call    ds:GetModuleFileNameW
test    eax, eax
jnz     short loc_10009707
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+var_10], offset aCouldNotGetMod ; "Could not get module file name"
push    205h
jmp     loc_10009663

loc_10009707:
mov     ecx, [ebp+arg_0]
push    esi             ; String
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
mov     [ebp+var_14], ebx
;   } // starts at 10009694
;   try {
mov     byte ptr [ebp+var_4], 0
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
mov     eax, [ebp+arg_0]
pop     ecx
call    __EH_epilog3
retn
;   } // starts at 10009713
; } // starts at 10009637
sub_10009637 endp



; Attributes: bp-based frame fpd=628h

sub_10009727 proc near

pExceptionObject= byte ptr -66Ch
var_660= byte ptr -660h
var_644= dword ptr -644h
var_640= dword ptr -640h
var_63C= dword ptr -63Ch
var_638= dword ptr -638h
var_634= dword ptr -634h
var_62C= dword ptr -62Ch
var_628= byte ptr -628h
FullPath= dword ptr -624h
var_610= dword ptr -610h
Ext= word ptr -60Ch
Filename= word ptr -40Ch
var_20E= word ptr -20Eh
Dir= word ptr -20Ch
Drive= word ptr -0Ch
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019D3C SIZE 00000051 BYTES

; __unwind { // loc_10019D65
push    ebp
sub     esp, 624h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+628h+var_4], eax
push    38h
mov     eax, offset loc_10019D65
call    __EH_prolog3
mov     eax, [ebp+628h+arg_0]
and     [ebp+628h+var_644], 0
mov     [ebp+628h+var_640], eax
mov     eax, [ebp+628h+arg_4]
cmp     dword ptr [eax+14h], 0
jnz     short loc_10009795
lea     eax, [ebp+628h+var_63C]
push    211h            ; Value
push    eax             ; int
mov     [ebp+628h+var_63C], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+628h+var_638], offset aInvalidModuleN ; "Invalid module name ( module name is em"...
lea     eax, [ebp+628h+var_638]

loc_1000977E:           ; int
push    eax
lea     ecx, [ebp+628h+pExceptionObject]

loc_10009782:
call    sub_100021FE
push    offset stru_1001FF54 ; pThrowInfo
lea     eax, [ebp+628h+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10009795:
push    eax
lea     eax, [ebp+628h+var_628]
push    eax
call    sub_10009637
pop     ecx
pop     ecx
xor     ebx, ebx
inc     ebx
;   try {
mov     [ebp+628h+var_62C], ebx
cmp     [ebp+628h+var_610], 8
mov     eax, [ebp+628h+FullPath]
jnb     short loc_100097B3
lea     eax, [ebp+628h+FullPath]

loc_100097B3:
mov     esi, 100h
push    esi             ; ExtCount
lea     ecx, [ebp+628h+Ext]
push    ecx             ; Ext
push    esi             ; FilenameCount
lea     ecx, [ebp+628h+Filename]
push    ecx             ; Filename
push    esi             ; DirCount
lea     ecx, [ebp+628h+Dir]
push    ecx             ; Dir
push    3               ; DriveCount
lea     ecx, [ebp+628h+Drive]
push    ecx             ; Drive
push    eax             ; FullPath
call    __wsplitpath_s
add     esp, 24h
test    eax, eax
jz      short loc_10009836
mov     [ebp+628h+var_638], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
cmp     eax, 16h
jnz     short loc_10009807
lea     eax, [ebp+628h+var_638]
push    221h
push    eax
mov     [ebp+628h+var_63C], offset aCouldNotSplitP ; "Could not split path: invalid function "...
lea     eax, [ebp+628h+var_63C]
jmp     loc_1000977E

loc_10009807:
cmp     eax, 22h ; '"'
lea     ecx, [ebp+628h+pExceptionObject]
lea     eax, [ebp+628h+var_638]
jnz     short loc_10009828
mov     [ebp+628h+var_63C], offset aCouldNotSplitP_0 ; "Could not split path: buffer to small"
push    225h

loc_1000981E:
push    eax
lea     eax, [ebp+628h+var_63C]
push    eax
jmp     loc_10009782

loc_10009828:
mov     [ebp+628h+var_63C], offset aCouldNotSplitP_1 ; "Could not split path"
push    228h
jmp     short loc_1000981E

loc_10009836:
lea     eax, [ebp+628h+Dir]
push    esi             ; MaxCount
push    eax             ; Source
call    _wcsnlen
pop     ecx
pop     ecx
test    eax, eax
jz      short loc_10009853
xor     ecx, ecx
mov     [ebp+eax*2+628h+var_20E], cx

loc_10009853:
lea     eax, [ebp+628h+Drive]
push    eax             ; String
lea     ecx, [ebp+628h+var_660]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100097A4
;   try {
mov     byte ptr [ebp+628h+var_62C], 2
lea     ecx, [ebp+628h+Dir]
push    ecx             ; String
push    eax             ; int
push    [ebp+628h+var_640] ; int
call    sub_10006942
add     esp, 0Ch
mov     [ebp+628h+var_644], ebx
;   } // starts at 10009862
;   try {
mov     byte ptr [ebp+628h+var_62C], bl
push    0               ; N
push    ebx             ; char
lea     ecx, [ebp+628h+var_660]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000987C
;   try {
mov     byte ptr [ebp+628h+var_62C], 0
push    0               ; N
push    ebx             ; char
lea     ecx, [ebp+628h+var_628]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+628h+var_640]
mov     ecx, [ebp+628h+var_634]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+628h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 628h
leave
retn
;   } // starts at 1000988A
; } // starts at 10009727
sub_10009727 endp



; Attributes: bp-based frame fpd=78h

sub_100098BF proc near

var_BC= byte ptr -0BCh
var_A0= dword ptr -0A0h
var_84= dword ptr -84h
var_7C= dword ptr -7Ch
var_78= byte ptr -78h
var_5C= byte ptr -5Ch
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
lpLibFileName= dword ptr -38h
var_24= dword ptr -24h
var_20= byte ptr -20h
var_1C= dword ptr -1Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019D8D SIZE 00000058 BYTES

; __unwind { // loc_10019DBD
push    ebp
sub     esp, 74h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+78h+var_4], eax
push    38h
mov     eax, offset loc_10019DBD
call    __EH_prolog3
mov     esi, ecx
mov     eax, [esi]
lea     ecx, [ebp+78h+var_BC]
push    ecx
mov     ecx, esi
call    dword ptr [eax+8]
mov     [ebp+78h+var_40], eax
xor     edi, edi
;   try {
mov     [ebp+78h+var_7C], edi
mov     eax, [esi]
lea     ecx, [ebp+78h+var_78]
push    ecx
mov     ecx, esi
call    dword ptr [eax+1Ch]
xor     ebx, ebx
inc     ebx
;   } // starts at 100098EF
;   try {
mov     byte ptr [ebp+78h+var_7C], bl
push    offset asc_1001D03C ; "\\"
push    eax             ; int
lea     eax, [ebp+78h+var_A0]
push    eax             ; int
call    sub_10006942
;   } // starts at 10009900
;   try {
mov     byte ptr [ebp+78h+var_7C], 2
push    [ebp+78h+var_40]
push    eax
lea     eax, [ebp+78h+var_5C]
push    eax
call    sub_100095E4
;   } // starts at 10009912
;   try {
mov     byte ptr [ebp+78h+var_7C], 3
push    offset aDll     ; ".DLL"
push    eax             ; int
lea     eax, [ebp+78h+var_3C]
push    eax             ; int
call    sub_10006942
add     esp, 24h
;   } // starts at 10009923
;   try {
mov     byte ptr [ebp+78h+var_7C], 5
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+78h+var_5C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10009939
;   try {
mov     byte ptr [ebp+78h+var_7C], 6
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+78h+var_A0]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10009947
;   try {
mov     byte ptr [ebp+78h+var_7C], 7
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+78h+var_78]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10009955
;   try {
mov     byte ptr [ebp+78h+var_7C], 8
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+78h+var_BC]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
push    offset aLoadLibrary ; "Load library: "
lea     ecx, [ebp+78h+var_20]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10009963
;   try {
mov     byte ptr [ebp+78h+var_7C], 9
push    0FFFFFFFFh      ; N
push    edi             ; int
lea     eax, [ebp+78h+var_3C]
push    eax             ; int
lea     ecx, [ebp+78h+var_20]
call    sub_10001C37
call    sub_1000687F
cmp     eax, edi
jz      short loc_100099B6
cmp     [ebp+78h+var_8], 8
mov     ecx, [ebp+78h+var_1C]
jnb     short loc_100099A6
lea     ecx, [ebp+78h+var_1C]

loc_100099A6:
mov     edx, [eax]
push    ecx
push    44h ; 'D'
push    offset aToolCpp ; ".\\Tool.cpp"
push    ebx
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100099B6:
cmp     [ebp+78h+var_24], 8
mov     eax, [ebp+78h+lpLibFileName]
jnb     short loc_100099C2
lea     eax, [ebp+78h+lpLibFileName]

loc_100099C2:           ; lpLibFileName
push    eax
call    ds:LoadLibraryW
mov     [esi+64h], eax
cmp     eax, edi
jz      short loc_10009A48
lea     ecx, [esi-4]
call    sub_10008CC1
cmp     eax, ebx
jnz     short loc_10009A36
call    sub_1000687F
cmp     eax, edi
jz      short loc_100099F9
mov     edx, [eax]
push    offset aLibrarySuccess ; "Library successfully loaded"
push    4Ah ; 'J'
push    offset aToolCpp ; ".\\Tool.cpp"
push    ebx
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100099F9:
mov     esi, ebx
;   } // starts at 1000997E

loc_100099FB:
;   try {
mov     byte ptr [ebp+78h+var_7C], 8
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+78h+var_20]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100099FB
or      [ebp+78h+var_7C], 0FFFFFFFFh
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+78h+var_3C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, esi
mov     ecx, [ebp+78h+var_84]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+78h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 78h ; 'x'
leave
retn

loc_10009A36:
call    sub_1000687F
cmp     eax, edi
jz      short loc_10009A66
push    offset aCouldNotGetFun_0 ; "Could not get function pointers"
push    50h ; 'P'
jmp     short loc_10009A58

loc_10009A48:
call    sub_1000687F
cmp     eax, edi
jz      short loc_10009A66
push    offset aCouldNotLoadLi ; "Could not load library"
push    55h ; 'U'

loc_10009A58:
mov     edx, [eax]
push    offset aToolCpp ; ".\\Tool.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009A66:
mov     eax, [esi]
mov     ecx, esi
call    dword ptr [eax+10h]
xor     esi, esi
jmp     short loc_100099FB
; } // starts at 100098BF
sub_100098BF endp



; Attributes: bp-based frame

sub_10009A71 proc near

var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 10019DE5 SIZE 0000003C BYTES

; __unwind { // loc_10019E06
push    20h
mov     eax, offset loc_10019E06
call    __EH_prolog3
xor     ebx, ebx
mov     [ebp+var_10], ebx
cmp     [ecx+5Ch], ebx
jnz     short loc_10009ABA
push    offset aSasbridgeDll_0 ; "SASBridge.DLL"
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
xor     esi, esi
inc     esi
;   try {
mov     [ebp+var_4], esi
lea     eax, [ebp+var_2C]
push    eax
push    [ebp+arg_0]
call    sub_10009727
pop     ecx
pop     ecx
mov     [ebp+var_10], esi
;   } // starts at 10009A97
;   try {
mov     byte ptr [ebp+var_4], bl
push    ebx             ; N
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_10009AD0

loc_10009ABA:
add     ecx, 48h ; 'H'
push    ecx
mov     ecx, [ebp+arg_0]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
;   } // starts at 10009AAB
;   try {
mov     [ebp+var_4], ebx
mov     [ebp+var_10], 1

loc_10009AD0:
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn    4
;   } // starts at 10009AC6
; } // starts at 10009A71
sub_10009A71 endp




sub_10009ADB proc near
mov     ecx, dword_100243E0
test    ecx, ecx
jz      short locret_10009AF2
mov     eax, [ecx]
push    1
call    dword ptr [eax]
and     dword_100243E0, 0

locret_10009AF2:
retn
sub_10009ADB endp




sub_10009AF3 proc near
mov     eax, ecx
mov     dword ptr [eax], offset off_1001D5FC
retn
sub_10009AF3 endp




sub_10009AFC proc near
mov     dword ptr [ecx], offset off_1001D5FC
retn
sub_10009AFC endp



; Attributes: bp-based frame

sub_10009B03 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 10019738 SIZE 00000025 BYTES

; __unwind { // loc_10019742
push    4
mov     eax, offset loc_10019742
call    __EH_prolog3
push    88h             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
mov     ecx, eax
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
test    ecx, ecx
jz      short loc_10009B30
call    sub_100093DE
mov     esi, eax
jmp     short loc_10009B32

loc_10009B30:
xor     esi, esi
;   } // starts at 10009B1F

loc_10009B32:
or      [ebp+var_4], 0FFFFFFFFh
test    esi, esi
jz      short loc_10009B7B
push    [ebp+arg_0]
mov     eax, [esi]
mov     ecx, esi
call    dword ptr [eax+4]
push    [ebp+arg_0]
lea     edi, [esi+4]
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+4]
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+0Ch]
cmp     eax, 1
jnz     short loc_10009B61
mov     eax, esi
jmp     short loc_10009B9B

loc_10009B61:
mov     eax, [esi]
push    1
mov     ecx, esi
call    dword ptr [eax]
call    sub_1000687F
test    eax, eax
jz      short loc_10009B99
push    offset aCouldNotLoadLi ; "Could not load library"
push    4Bh ; 'K'
jmp     short loc_10009B8B

loc_10009B7B:
call    sub_1000687F
test    eax, eax
jz      short loc_10009B99
push    offset aCouldNotCreate_0 ; "Could not create object"
push    4Fh ; 'O'

loc_10009B8B:
mov     edx, [eax]
push    offset aToolfactoryCpp ; ".\\ToolFactory.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009B99:
xor     eax, eax

loc_10009B9B:
call    __EH_epilog3
retn    4
; } // starts at 10009B03
sub_10009B03 endp



; Attributes: bp-based frame

sub_10009BA3 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019738 SIZE 00000025 BYTES

; __unwind { // loc_10019742
push    4
mov     eax, offset loc_10019742
call    __EH_prolog3
cmp     dword_100243E0, 0
jnz     short loc_10009C01
push    4               ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
mov     ecx, eax
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
test    ecx, ecx
jz      short loc_10009BD4
call    sub_10009AF3
jmp     short loc_10009BD6

loc_10009BD4:
xor     eax, eax
;   } // starts at 10009BC5

loc_10009BD6:
or      [ebp+var_4], 0FFFFFFFFh
mov     dword_100243E0, eax
test    eax, eax
jnz     short loc_10009C01
call    sub_1000687F
test    eax, eax
jz      short loc_10009C01
mov     edx, [eax]
push    offset aErrorWhileCrea ; "Error while create instance. Not enough"...
push    1Bh
push    offset aToolfactoryCpp ; ".\\ToolFactory.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10009C01:
mov     eax, dword_100243E0
call    __EH_epilog3
retn
; } // starts at 10009BA3
sub_10009BA3 endp




; int __thiscall sub_10009C0C(void *, char)
sub_10009C0C proc near

arg_0= byte ptr  4

push    esi
mov     esi, ecx
call    sub_10009AFC
test    [esp+4+arg_0], 1
jz      short loc_10009C22
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10009C22:
mov     eax, esi
pop     esi
retn    4
sub_10009C0C endp




sub_10009C28 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

cmp     [esp+arg_8], 0
jbe     short loc_10009C49
mov     ecx, [esp+arg_4]
mov     eax, [esp+arg_0]

loc_10009C37:
mov     dx, [eax]
cmp     dx, [ecx]
jnz     short loc_10009C4C
inc     eax
inc     eax
inc     ecx
inc     ecx
dec     [esp+arg_8]
jnz     short loc_10009C37

loc_10009C49:
xor     eax, eax
retn

loc_10009C4C:
movzx   eax, word ptr [eax]
cmp     ax, [ecx]
sbb     eax, eax
and     eax, 0FFFFFFFEh
inc     eax
retn
sub_10009C28 endp




sub_10009C59 proc near

arg_0= dword ptr  4

mov     edx, [esp+arg_0]
mov     eax, [edx]
push    esi
mov     esi, [eax+8]
mov     [edx], esi
mov     esi, [eax+8]
cmp     byte ptr [esi+2Dh], 0
jnz     short loc_10009C71
mov     [esi+4], edx

loc_10009C71:
mov     esi, [edx+4]
mov     [eax+4], esi
mov     ecx, [ecx+18h]
pop     esi
cmp     edx, [ecx+4]
jnz     short loc_10009C85
mov     [ecx+4], eax
jmp     short loc_10009C94

loc_10009C85:
mov     ecx, [edx+4]
cmp     edx, [ecx+8]
jnz     short loc_10009C92
mov     [ecx+8], eax
jmp     short loc_10009C94

loc_10009C92:
mov     [ecx], eax

loc_10009C94:
mov     [eax+8], edx
mov     [edx+4], eax
retn    4
sub_10009C59 endp




sub_10009C9D proc near

arg_0= dword ptr  4

push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
mov     edi, [esp+8+arg_0]
test    eax, eax
jz      short loc_10009CAF
cmp     eax, [edi]
jz      short loc_10009CB4

loc_10009CAF:
call    __invalid_parameter_noinfo

loc_10009CB4:
mov     eax, [esi+4]
sub     eax, [edi+4]
pop     edi
neg     eax
sbb     eax, eax
inc     eax
pop     esi
retn    4
sub_10009C9D endp




sub_10009CC4 proc near
push    esi
mov     esi, ecx
mov     eax, [esi]
test    eax, eax
jnz     short loc_10009CD8
call    __invalid_parameter_noinfo
mov     eax, [esi]
test    eax, eax
jz      short loc_10009CDC

loc_10009CD8:
mov     eax, [eax]
jmp     short loc_10009CDE

loc_10009CDC:
xor     eax, eax

loc_10009CDE:
mov     ecx, [esi+4]
cmp     ecx, [eax+18h]
jnz     short loc_10009CEB
call    __invalid_parameter_noinfo

loc_10009CEB:
mov     eax, [esi+4]
add     eax, 0Ch
pop     esi
retn
sub_10009CC4 endp




sub_10009CF3 proc near
push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
cmp     [esi], ebx
jnz     short loc_10009D02
call    __invalid_parameter_noinfo

loc_10009D02:
mov     eax, [esi+4]
cmp     [eax+2Dh], bl
jz      short loc_10009D11
pop     esi
pop     ebx
jmp     __invalid_parameter_noinfo

loc_10009D11:
mov     ecx, [eax+8]
cmp     [ecx+2Dh], bl
jnz     short loc_10009D34
jmp     short loc_10009D1D

loc_10009D1B:
mov     ecx, eax

loc_10009D1D:
mov     eax, [ecx]
cmp     [eax+2Dh], bl
jz      short loc_10009D1B
mov     [esi+4], ecx
jmp     short loc_10009D3F

loc_10009D29:
mov     ecx, [esi+4]
cmp     ecx, [eax+8]
jnz     short loc_10009D3C
mov     [esi+4], eax

loc_10009D34:
mov     eax, [eax+4]
cmp     [eax+2Dh], bl
jz      short loc_10009D29

loc_10009D3C:
mov     [esi+4], eax

loc_10009D3F:
pop     esi
pop     ebx
retn
sub_10009CF3 endp




sub_10009D42 proc near
push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
cmp     [esi], ebx
jnz     short loc_10009D51
call    __invalid_parameter_noinfo

loc_10009D51:
mov     eax, [esi+4]
cmp     [eax+2Dh], bl
jz      short loc_10009D6B
mov     eax, [eax+8]
mov     [esi+4], eax
cmp     [eax+2Dh], bl
jz      short loc_10009DA0

loc_10009D64:
pop     esi
pop     ebx
jmp     __invalid_parameter_noinfo

loc_10009D6B:
mov     ecx, [eax]
cmp     [ecx+2Dh], bl
jnz     short loc_10009D8D
jmp     short loc_10009D76

loc_10009D74:
mov     ecx, eax

loc_10009D76:
mov     eax, [ecx+8]
cmp     [eax+2Dh], bl
jz      short loc_10009D74
mov     [esi+4], ecx
jmp     short loc_10009DA0

loc_10009D83:
mov     ecx, [esi+4]
cmp     ecx, [eax]
jnz     short loc_10009D95
mov     [esi+4], eax

loc_10009D8D:
mov     eax, [eax+4]
cmp     [eax+2Dh], bl
jz      short loc_10009D83

loc_10009D95:
mov     ecx, [esi+4]
cmp     [ecx+2Dh], bl
jnz     short loc_10009D64
mov     [esi+4], eax

loc_10009DA0:
pop     esi
pop     ebx
retn
sub_10009D42 endp




sub_10009DA3 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     eax, [esp+arg_0]
mov     ecx, [esp+arg_4]
cmp     eax, ecx
jz      short locret_10009DB9
mov     dl, [eax]
push    ebx
mov     bl, [ecx]
mov     [eax], bl
mov     [ecx], dl
pop     ebx

locret_10009DB9:
retn
sub_10009DA3 endp



; Attributes: bp-based frame

sub_10009DBA proc near

pExceptionObject= byte ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
sub     esp, 0Ch
test    ecx, ecx
ja      short loc_10009DD5
xor     ecx, ecx

loc_10009DC9:
imul    ecx, 30h ; '0'
push    ecx             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
leave
retn

loc_10009DD5:
or      eax, 0FFFFFFFFh
xor     edx, edx
div     ecx
cmp     eax, 30h ; '0'
jnb     short loc_10009DC9
push    0               ; char *
lea     ecx, [ebp+pExceptionObject]
call    sub_10001065
push    offset pThrowInfo ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_10009DBA endp

align 2


; Attributes: bp-based frame

sub_10009DFA proc near

pExceptionObject= byte ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
sub     esp, 0Ch
test    ecx, ecx
ja      short loc_10009E17
xor     ecx, ecx

loc_10009E09:
mov     eax, ecx
shl     eax, 2
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
leave
retn

loc_10009E17:
or      eax, 0FFFFFFFFh
xor     edx, edx
div     ecx
cmp     eax, 4
jnb     short loc_10009E09
push    0               ; char *
lea     ecx, [ebp+pExceptionObject]
call    sub_10001065
push    offset pThrowInfo ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_10009DFA endp

align 4



sub_10009E3C proc near

arg_0= dword ptr  4

mov     edx, [esp+arg_0]
mov     eax, [edx+8]
push    esi
mov     esi, [eax]
mov     [edx+8], esi
mov     esi, [eax]
cmp     byte ptr [esi+2Dh], 0
jnz     short loc_10009E54
mov     [esi+4], edx

loc_10009E54:
mov     esi, [edx+4]
mov     [eax+4], esi
mov     ecx, [ecx+18h]
pop     esi
cmp     edx, [ecx+4]
jnz     short loc_10009E68
mov     [ecx+4], eax
jmp     short loc_10009E76

loc_10009E68:
mov     ecx, [edx+4]
cmp     edx, [ecx]
jnz     short loc_10009E73
mov     [ecx], eax
jmp     short loc_10009E76

loc_10009E73:
mov     [ecx+8], eax

loc_10009E76:
mov     [eax], edx
mov     [edx+4], eax
retn    4
sub_10009E3C endp

; START OF FUNCTION CHUNK FOR sub_100089EB
;   ADDITIONAL PARENT FUNCTION sub_10009EEE
;   ADDITIONAL PARENT FUNCTION sub_1000A046

; public: __thiscall Concurrency::SchedulerPolicy::~SchedulerPolicy(void)
??1SchedulerPolicy@Concurrency@@QAE@XZ: ; void *
; __unwind { // loc_10019EB3
push    dword ptr [ecx]
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
retn
; } // starts at 10009E7E
; END OF FUNCTION CHUNK FOR sub_100089EB


; Attributes: bp-based frame

sub_10009E87 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [esi+14h], edi
jnb     short loc_10009E9C
call    sub_1000B15A

loc_10009E9C:
mov     eax, [esi+14h]
mov     ebx, [ebp+arg_4]
sub     eax, edi
cmp     eax, ebx
jnb     short loc_10009EAA
mov     ebx, eax

loc_10009EAA:
mov     eax, [ebp+arg_C]
cmp     ebx, eax
jnb     short loc_10009EB3
mov     eax, ebx

loc_10009EB3:
cmp     dword ptr [esi+18h], 8
jb      short loc_10009EBE
mov     esi, [esi+4]
jmp     short loc_10009EC1

loc_10009EBE:
add     esi, 4

loc_10009EC1:
push    eax
push    [ebp+arg_8]
lea     eax, [esi+edi*2]
push    eax
call    sub_10009C28
add     esp, 0Ch
test    eax, eax
jnz     short loc_10009EE7
cmp     ebx, [ebp+arg_C]
jnb     short loc_10009EDF
or      eax, 0FFFFFFFFh
jmp     short loc_10009EE7

loc_10009EDF:
xor     eax, eax
cmp     ebx, [ebp+arg_C]
setnz   al

loc_10009EE7:
pop     edi
pop     esi
pop     ebx
pop     ebp
retn    10h
sub_10009E87 endp



; Attributes: bp-based frame

sub_10009EEE proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10009E7E SIZE 00000009 BYTES
; FUNCTION CHUNK AT 10019E21 SIZE 00000023 BYTES

; __unwind { // loc_10019E29
push    4
mov     eax, offset loc_10019E29
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
push    dword ptr [ecx] ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
call    __EH_epilog3
retn
; } // starts at 10009EEE
sub_10009EEE endp



; Attributes: bp-based frame

sub_10009F0F proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019E44 SIZE 0000001B BYTES

; __unwind { // loc_10019E44
push    8
mov     eax, offset loc_10019E44
call    __EH_prolog3_catch
xor     ebx, ebx
push    ebx
push    1
call    sub_10009DBA
pop     ecx
pop     ecx
mov     [ebp+var_14], eax
;   try {
mov     [ebp+var_4], ebx
cmp     eax, ebx
jz      short loc_10009F33
mov     [eax], ebx

loc_10009F33:
lea     ecx, [eax+4]
cmp     ecx, ebx
jz      short loc_10009F3C
mov     [ecx], ebx

loc_10009F3C:
lea     ecx, [eax+8]
cmp     ecx, ebx
jz      short loc_10009F45
mov     [ecx], ebx
;   } // starts at 10009F2A

loc_10009F45:
or      [ebp+var_4], 0FFFFFFFFh
mov     byte ptr [eax+2Ch], 1
mov     [eax+2Dh], bl
call    __EH_epilog3
retn

loc_10009F56:           ; void *
;   catch(...) // owned by 10009F2A
push    [ebp+var_14]
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
xor     ebx, ebx
push    ebx             ; pThrowInfo
push    ebx             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; } // starts at 10009F0F
sub_10009F0F endp

db 0CCh


; Attributes: bp-based frame

sub_10009F69 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019E5F SIZE 00000029 BYTES

; __unwind { // loc_10019E6D
push    8
mov     eax, offset loc_10019E6D
call    __EH_prolog3
mov     esi, ecx
push    0
push    1
call    sub_10009DFA
pop     ecx
pop     ecx
mov     [ebp+var_10], eax
mov     [ebp+var_14], eax
;   try {
and     [ebp+var_4], 0
test    eax, eax
jz      short loc_10009F94
mov     [eax], esi
jmp     short loc_10009F96

loc_10009F94:
xor     eax, eax
;   } // starts at 10009F88

loc_10009F96:
or      [ebp+var_4], 0FFFFFFFFh
mov     [esi], eax
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 10009F69
sub_10009F69 endp




sub_10009FA6 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
cmp     dword ptr [eax+18h], 8
mov     edx, [eax+14h]
jb      short loc_10009FB8
mov     eax, [eax+4]
jmp     short loc_10009FBB

loc_10009FB8:
add     eax, 4

loc_10009FBB:
push    edx
push    eax
push    dword ptr [ecx+14h]
push    0
call    sub_10009E87
retn    4
sub_10009FA6 endp




sub_10009FCA proc near

arg_0= dword ptr  4

mov     eax, [ecx+18h]
push    ecx
push    dword ptr [eax]
mov     ecx, [esp+8+arg_0]
call    sub_100040CA
mov     eax, [esp+arg_0]
retn    4
sub_10009FCA endp



; Attributes: bp-based frame

sub_10009FE0 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019E88 SIZE 00000023 BYTES

; __unwind { // loc_10019E90
push    4
mov     eax, offset loc_10019E90
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
call    sub_10009EEE
call    __EH_epilog3
retn
; } // starts at 10009FE0
sub_10009FE0 endp



; Attributes: bp-based frame

sub_10009FFE proc near

var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    ecx
push    [ebp+arg_8]
lea     ecx, [ebp+var_8]
call    sub_100040CA
mov     ecx, [ebp+var_8]
mov     eax, [ebp+arg_0]
mov     [eax], ecx
mov     ecx, [ebp+var_4]
mov     [eax+4], ecx
leave
retn    0Ch
sub_10009FFE endp




sub_1000A021 proc near
push    esi
mov     esi, ecx
call    sub_10009F0F
lea     ecx, [esi+18h]
mov     [ecx], eax
mov     byte ptr [eax+2Dh], 1
mov     eax, [ecx]
mov     [eax+4], eax
mov     eax, [ecx]
mov     [eax], eax
mov     ecx, [ecx]
mov     [ecx+8], ecx
and     dword ptr [esi+1Ch], 0
pop     esi
retn
sub_1000A021 endp



; Attributes: bp-based frame

sub_1000A046 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10009E7E SIZE 00000009 BYTES
; FUNCTION CHUNK AT 10019EAB SIZE 00000023 BYTES

; __unwind { // loc_10019EB3
push    8
mov     eax, offset loc_10019EB3
call    __EH_prolog3
mov     [ebp+var_10], ecx
push    ecx
mov     [ebp+var_14], esp
mov     [ebp+var_14], esp
call    sub_10009F69
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, [ebp+var_10]
call    __EH_epilog3
retn    8
; } // starts at 1000A046
sub_1000A046 endp




sub_1000A070 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    [esp+arg_4]
mov     ecx, [esp+4+arg_0]
call    sub_10009FA6
xor     ecx, ecx
test    eax, eax
setl    cl
mov     al, cl
retn
sub_1000A070 endp



; Attributes: bp-based frame

sub_1000A087 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018DF SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10019F7D SIZE 00000023 BYTES

; __unwind { // loc_10019F85
push    4
mov     eax, offset loc_10019F85
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
push    0               ; N
push    1               ; char
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
call    __EH_epilog3
retn
; } // starts at 1000A087
sub_1000A087 endp



; Attributes: bp-based frame

sub_1000A0A9 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019ECE SIZE 00000023 BYTES

; __unwind { // loc_10019ED6
push    4
mov     eax, offset loc_10019ED6
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
call    sub_10009FE0
call    __EH_epilog3
retn
; } // starts at 1000A0A9
sub_1000A0A9 endp




sub_1000A0C7 proc near

arg_0= dword ptr  4

mov     eax, [ecx+18h]
push    esi
mov     esi, [eax+4]
push    edi
mov     edi, eax
jmp     short loc_1000A0EF

loc_1000A0D3:
push    [esp+8+arg_0]
lea     eax, [esi+0Ch]
push    eax
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000A0EB
mov     esi, [esi+8]
jmp     short loc_1000A0EF

loc_1000A0EB:
mov     edi, esi
mov     esi, [esi]

loc_1000A0EF:
cmp     byte ptr [esi+2Dh], 0
jz      short loc_1000A0D3
mov     eax, edi
pop     edi
pop     esi
retn    4
sub_1000A0C7 endp



; Attributes: bp-based frame

sub_1000A0FC proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019EF1 SIZE 00000023 BYTES

; __unwind { // loc_10019EF9
push    8
mov     eax, offset loc_10019EF9
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     eax, [ebp+arg_0]
movzx   eax, byte ptr [eax]
push    ecx
mov     [ebp+var_14], esp
mov     [ebp+var_14], esp
push    eax
call    sub_1000A046
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, [ebp+var_10]
call    __EH_epilog3
retn    8
; } // starts at 1000A0FC
sub_1000A0FC endp



; Attributes: bp-based frame

sub_1000A12D proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019FE6 SIZE 00000026 BYTES

; __unwind { // loc_10019FF1
push    4
mov     eax, offset loc_10019FF1
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
add     ecx, 0Ch
call    sub_1000A087
call    __EH_epilog3
retn
; } // starts at 1000A12D
sub_1000A12D endp



; Attributes: bp-based frame

sub_1000A14E proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001A02F SIZE 0000002E BYTES

; __unwind { // loc_1001A042
push    4
mov     eax, offset loc_1001A042
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001D68C
;   try {
and     [ebp+var_4], 0
push    0               ; SourceSize
push    1               ; char
lea     ecx, [esi+0Ch]
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
;   } // starts at 1000A165
or      [ebp+var_4], 0FFFFFFFFh
mov     ecx, esi
call    sub_1000B27B
call    __EH_epilog3
retn
; } // starts at 1000A14E
sub_1000A14E endp

; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_6]

loc_1000A194:
push    esi
mov     esi, ecx
call    sub_1000A14E
test    byte ptr [esp+8], 1
jz      short loc_1000A1AA
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000A1AA:
mov     eax, esi
pop     esi
retn    4


; Attributes: bp-based frame

sub_1000A1B0 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019F14 SIZE 00000023 BYTES

; __unwind { // loc_10019F1C
push    4
mov     eax, offset loc_10019F1C
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
call    sub_1000A0A9
call    __EH_epilog3
retn
; } // starts at 1000A1B0
sub_1000A1B0 endp




sub_1000A1CE proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    esi
push    [esp+4+arg_4]
mov     esi, ecx
call    sub_1000A0C7
mov     ecx, [esp+4+arg_0]
push    esi
push    eax
call    sub_100040CA
mov     eax, [esp+4+arg_0]
pop     esi
retn    8
sub_1000A1CE endp



; Attributes: bp-based frame

sub_1000A1ED proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019F37 SIZE 00000023 BYTES

; __unwind { // loc_10019F3F
push    8
mov     eax, offset loc_10019F3F
call    __EH_prolog3
mov     [ebp+var_10], ecx
push    ecx
mov     [ebp+var_14], esp
mov     [ebp+var_14], esp
push    [ebp+arg_0]
call    sub_1000A0FC
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, [ebp+var_10]
call    __EH_epilog3
retn    8
; } // starts at 1000A1ED
sub_1000A1ED endp



; Attributes: bp-based frame

sub_1000A21A proc near

var_10= byte ptr -10h
var_8= byte ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 10h
push    esi
push    [ebp+arg_4]
lea     eax, [ebp+var_8]
push    eax
mov     esi, ecx
call    sub_1000A1CE
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_10]
call    sub_100040CA
lea     eax, [ebp+var_10]
push    eax
lea     ecx, [ebp+var_8]
call    sub_10009C9D
test    al, al
jnz     short loc_1000A265
mov     eax, [ebp+var_4]
add     eax, 0Ch
push    eax
push    [ebp+arg_4]
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jnz     short loc_1000A265
lea     ecx, [ebp+var_8]
jmp     short loc_1000A274

loc_1000A265:
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_10]
call    sub_100040CA
lea     ecx, [ebp+var_10]

loc_1000A274:
mov     edx, [ecx]
mov     eax, [ebp+arg_0]
mov     ecx, [ecx+4]
mov     [eax], edx
mov     [eax+4], ecx
pop     esi
leave
retn    8
sub_1000A21A endp



; Attributes: bp-based frame

sub_1000A286 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019F7D SIZE 00000023 BYTES

; __unwind { // loc_10019F85
push    4
mov     eax, offset loc_10019F85
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
push    [ebp+arg_0]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
;   try {
and     [ebp+var_4], 0
mov     eax, [ebp+arg_4]
mov     eax, [eax]
mov     [esi+1Ch], eax
;   } // starts at 1000A29F
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    8
; } // starts at 1000A286
sub_1000A286 endp



; Attributes: bp-based frame

sub_1000A2B9 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019F5A SIZE 00000023 BYTES

; __unwind { // loc_10019F62
push    8
mov     eax, offset loc_10019F62
call    __EH_prolog3
mov     [ebp+var_10], ecx
push    ecx
mov     [ebp+var_14], esp
mov     [ebp+var_14], esp
push    [ebp+arg_0]
call    sub_1000A1ED
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, [ebp+var_10]
call    __EH_epilog3
retn    8
; } // starts at 1000A2B9
sub_1000A2B9 endp



; Attributes: bp-based frame

sub_1000A2E6 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 10019F7D SIZE 00000023 BYTES

; __unwind { // loc_10019F85
push    4
mov     eax, offset loc_10019F85
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     edi, [ebp+arg_0]
push    edi
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
;   try {
and     [ebp+var_4], 0
mov     eax, [edi+1Ch]
mov     [esi+1Ch], eax
;   } // starts at 1000A300
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 1000A2E6
sub_1000A2E6 endp



; Attributes: bp-based frame

sub_1000A318 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 1001A02F SIZE 0000002E BYTES

; __unwind { // loc_1001A042
push    4
mov     eax, offset loc_1001A042
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
call    sub_1000B19D
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
lea     ecx, [esi+0Ch]
mov     dword ptr [esi], offset off_1001D68C
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
;   } // starts at 1000A32E
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 1000A318
sub_1000A318 endp

; [00000031 BYTES: COLLAPSED FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; [00000024 BYTES: COLLAPSED FUNCTION sub_1000A382]

loc_1000A3A6:
push    esi
mov     esi, ecx
call    sub_1000A382
test    byte ptr [esp+8], 1
jz      short loc_1000A3BC
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000A3BC:
mov     eax, esi
pop     esi
retn    4
; [00000031 BYTES: COLLAPSED FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; [00000024 BYTES: COLLAPSED FUNCTION sub_1000A3F3]

loc_1000A417:
push    esi
mov     esi, ecx
call    sub_1000A3F3
test    byte ptr [esp+8], 1
jz      short loc_1000A42D
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000A42D:
mov     eax, esi
pop     esi
retn    4


; Attributes: bp-based frame

sub_1000A433 proc near

var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10019FC3 SIZE 00000023 BYTES

; __unwind { // loc_10019FCB
push    8
mov     eax, offset loc_10019FCB
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
push    ecx
mov     [ebp+var_14], esp
mov     [ebp+var_14], esp
push    [ebp+arg_0]
call    sub_1000A2B9
;   try {
and     [ebp+var_4], 0
mov     ecx, esi
call    sub_1000A021
;   } // starts at 1000A453
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    8
; } // starts at 1000A433
sub_1000A433 endp



; Attributes: bp-based frame

sub_1000A46C proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h
arg_10= byte ptr  18h

; FUNCTION CHUNK AT 10019FE6 SIZE 00000026 BYTES

; __unwind { // loc_10019FF1
push    4
mov     eax, offset loc_10019FF1
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     eax, [ebp+arg_0]
push    [ebp+arg_C]
mov     [esi], eax
mov     eax, [ebp+arg_4]
mov     [esi+4], eax
mov     eax, [ebp+arg_8]
lea     ecx, [esi+0Ch]
mov     [esi+8], eax
call    sub_1000A2E6
;   try {
and     [ebp+var_4], 0
mov     al, [ebp+arg_10]
mov     [esi+2Ch], al
mov     byte ptr [esi+2Dh], 0
;   } // starts at 1000A499
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    14h
; } // starts at 1000A46C
sub_1000A46C endp



; Attributes: bp-based frame

; int __stdcall sub_1000A4B5(int, int, void *)
sub_1000A4B5 proc near

pExceptionObject= byte ptr -54h
var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001A00C SIZE 00000023 BYTES

; __unwind { // loc_1001A014
push    48h
mov     eax, offset loc_1001A014
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     ebx, [ebp+arg_8]
cmp     byte ptr [ebx+2Dh], 0
jz      short loc_1000A4F8
push    offset aInvalidMapSetT ; "invalid map/set<T> iterator"
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   try {
and     [ebp+var_4], 0
lea     eax, [ebp+var_2C]
push    eax             ; struct Concurrency::SchedulerPolicy *
lea     ecx, [ebp+pExceptionObject] ; this
call    ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z_1 ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
push    offset stru_10021014 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_1000A4F8:
lea     ecx, [ebp+arg_4]
call    sub_10009CF3
mov     edx, [ebx]
cmp     byte ptr [edx+2Dh], 0
jz      short loc_1000A50D
mov     edi, [ebx+8]
jmp     short loc_1000A526

loc_1000A50D:
mov     eax, [ebx+8]
cmp     byte ptr [eax+2Dh], 0
jz      short loc_1000A51A
mov     edi, edx
jmp     short loc_1000A526

loc_1000A51A:
mov     eax, [ebp+arg_8]
lea     ecx, [eax+8]
mov     edi, [ecx]
cmp     eax, ebx
jnz     short loc_1000A59C

loc_1000A526:
cmp     byte ptr [edi+2Dh], 0
mov     esi, [ebx+4]
jnz     short loc_1000A532
mov     [edi+4], esi

loc_1000A532:
mov     ecx, [ebp+var_10]
mov     eax, [ecx+18h]
cmp     [eax+4], ebx
jnz     short loc_1000A542
mov     [eax+4], edi
jmp     short loc_1000A54D

loc_1000A542:
cmp     [esi], ebx
jnz     short loc_1000A54A
mov     [esi], edi
jmp     short loc_1000A54D

loc_1000A54A:
mov     [esi+8], edi

loc_1000A54D:
mov     ecx, [ecx+18h]
cmp     [ecx], ebx
jnz     short loc_1000A570
cmp     byte ptr [edi+2Dh], 0
jz      short loc_1000A55E
mov     edx, esi
jmp     short loc_1000A56E

loc_1000A55E:
mov     eax, [edi]
mov     edx, edi
jmp     short loc_1000A568

loc_1000A564:
mov     edx, eax
mov     eax, [edx]

loc_1000A568:
cmp     byte ptr [eax+2Dh], 0
jz      short loc_1000A564

loc_1000A56E:
mov     [ecx], edx

loc_1000A570:
mov     eax, [ebp+var_10]
mov     ecx, [eax+18h]
cmp     [ecx+8], ebx
jnz     short loc_1000A5F8
cmp     byte ptr [edi+2Dh], 0
jz      short loc_1000A585
mov     edx, esi
jmp     short loc_1000A597

loc_1000A585:
mov     eax, [edi+8]
mov     edx, edi
jmp     short loc_1000A591

loc_1000A58C:
mov     edx, eax
mov     eax, [edx+8]

loc_1000A591:
cmp     byte ptr [eax+2Dh], 0
jz      short loc_1000A58C

loc_1000A597:
mov     [ecx+8], edx
jmp     short loc_1000A5F8

loc_1000A59C:
mov     [edx+4], eax
mov     edx, [ebx]
mov     [eax], edx
cmp     eax, [ebx+8]
jnz     short loc_1000A5AC
mov     esi, eax
jmp     short loc_1000A5C5

loc_1000A5AC:
cmp     byte ptr [edi+2Dh], 0
mov     esi, [eax+4]
jnz     short loc_1000A5B8
mov     [edi+4], esi

loc_1000A5B8:
mov     [esi], edi
mov     edx, [ebx+8]
mov     [ecx], edx
mov     ecx, [ebx+8]
mov     [ecx+4], eax

loc_1000A5C5:
mov     ecx, [ebp+var_10]
mov     ecx, [ecx+18h]
cmp     [ecx+4], ebx
jnz     short loc_1000A5D5
mov     [ecx+4], eax
jmp     short loc_1000A5E3

loc_1000A5D5:
mov     ecx, [ebx+4]
cmp     [ecx], ebx
jnz     short loc_1000A5E0
mov     [ecx], eax
jmp     short loc_1000A5E3

loc_1000A5E0:
mov     [ecx+8], eax

loc_1000A5E3:
mov     ecx, [ebx+4]
mov     [eax+4], ecx
lea     ecx, [ebx+2Ch]
push    ecx
add     eax, 2Ch ; ','
push    eax
call    sub_10009DA3
pop     ecx
pop     ecx

loc_1000A5F8:
cmp     byte ptr [ebx+2Ch], 1
jnz     loc_1000A705
jmp     loc_1000A6B9

loc_1000A607:
cmp     byte ptr [edi+2Ch], 1
jnz     loc_1000A701
mov     eax, [esi]
cmp     edi, eax
jnz     short loc_1000A683
mov     eax, [esi+8]
cmp     byte ptr [eax+2Ch], 0
jnz     short loc_1000A631
mov     byte ptr [eax+2Ch], 1
push    esi
mov     byte ptr [esi+2Ch], 0
call    sub_10009E3C
mov     eax, [esi+8]

loc_1000A631:
cmp     byte ptr [eax+2Dh], 0
jnz     short loc_1000A6B4
mov     ecx, [eax]
cmp     byte ptr [ecx+2Ch], 1
jnz     short loc_1000A648
mov     ecx, [eax+8]
cmp     byte ptr [ecx+2Ch], 1
jz      short loc_1000A6B0

loc_1000A648:
mov     ecx, [eax+8]
cmp     byte ptr [ecx+2Ch], 1
jnz     short loc_1000A667
mov     ecx, [eax]
mov     byte ptr [ecx+2Ch], 1
mov     ecx, [ebp+var_10]
push    eax
mov     byte ptr [eax+2Ch], 0
call    sub_10009C59
mov     eax, [esi+8]

loc_1000A667:
mov     cl, [esi+2Ch]
mov     [eax+2Ch], cl
mov     ecx, [ebp+var_10]
mov     byte ptr [esi+2Ch], 1
mov     eax, [eax+8]
push    esi
mov     byte ptr [eax+2Ch], 1
call    sub_10009E3C
jmp     short loc_1000A701

loc_1000A683:
cmp     byte ptr [eax+2Ch], 0
jnz     short loc_1000A699
mov     byte ptr [eax+2Ch], 1
push    esi
mov     byte ptr [esi+2Ch], 0
call    sub_10009C59
mov     eax, [esi]

loc_1000A699:
cmp     byte ptr [eax+2Dh], 0
jnz     short loc_1000A6B4
mov     ecx, [eax+8]
cmp     byte ptr [ecx+2Ch], 1
jnz     short loc_1000A6CA
mov     ecx, [eax]
cmp     byte ptr [ecx+2Ch], 1
jnz     short loc_1000A6CA

loc_1000A6B0:
mov     byte ptr [eax+2Ch], 0

loc_1000A6B4:
mov     edi, esi
mov     esi, [esi+4]

loc_1000A6B9:
mov     ecx, [ebp+var_10]
mov     eax, [ecx+18h]
cmp     edi, [eax+4]
jnz     loc_1000A607
jmp     short loc_1000A701

loc_1000A6CA:
mov     ecx, [eax]
cmp     byte ptr [ecx+2Ch], 1
jnz     short loc_1000A6E8
mov     ecx, [eax+8]
mov     byte ptr [ecx+2Ch], 1
mov     ecx, [ebp+var_10]
push    eax
mov     byte ptr [eax+2Ch], 0
call    sub_10009E3C
mov     eax, [esi]

loc_1000A6E8:
mov     cl, [esi+2Ch]
mov     [eax+2Ch], cl
mov     ecx, [ebp+var_10]
mov     byte ptr [esi+2Ch], 1
mov     eax, [eax]
push    esi
mov     byte ptr [eax+2Ch], 1
call    sub_10009C59

loc_1000A701:
mov     byte ptr [edi+2Ch], 1

loc_1000A705:
mov     ecx, ebx
call    sub_1000A12D
push    ebx             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
mov     ecx, [ebp+var_10]
mov     eax, [ecx+1Ch]
test    eax, eax
jbe     short loc_1000A721
dec     eax
mov     [ecx+1Ch], eax

loc_1000A721:
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
call    sub_10009FFE
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn    0Ch
;   } // starts at 1000A4DA
; } // starts at 1000A4B5
sub_1000A4B5 endp



; Attributes: bp-based frame

; int __stdcall sub_1000A73A(struct std::exception *)
sub_1000A73A proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 1001A02F SIZE 0000002E BYTES

; __unwind { // loc_1001A042
push    4
mov     eax, offset loc_1001A042
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     edi, [ebp+arg_0]
push    edi             ; struct std::exception *
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
;   try {
and     [ebp+var_4], 0
add     edi, 0Ch
push    edi
lea     ecx, [esi+0Ch]
mov     dword ptr [esi], offset off_1001D68C
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
;   } // starts at 1000A754
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 1000A73A
sub_1000A73A endp

; [00000031 BYTES: COLLAPSED FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; [00000039 BYTES: COLLAPSED FUNCTION sub_1000A7A9]


; Attributes: bp-based frame

sub_1000A7E2 proc near

var_18= dword ptr -18h
var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h
arg_10= dword ptr  18h

; FUNCTION CHUNK AT 1001A05D SIZE 00000029 BYTES

; __unwind { // loc_1001A06B
push    0Ch
mov     eax, offset loc_1001A06B
call    __EH_prolog3_catch
xor     ebx, ebx
push    ebx
push    1
call    sub_10009DBA
pop     ecx
pop     ecx
mov     esi, eax
mov     [ebp+var_14], esi
;   try {
mov     [ebp+var_4], ebx
mov     [ebp+var_18], esi
;   } // starts at 1000A7FF
;   try {
mov     byte ptr [ebp+var_4], 1
cmp     esi, ebx
jz      short loc_1000A823
push    [ebp+arg_10]
push    [ebp+arg_C]
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
mov     ecx, esi
call    sub_1000A46C
;   } // starts at 1000A805

loc_1000A823:
;   try {
mov     byte ptr [ebp+var_4], bl
;   } // starts at 1000A823
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    14h

loc_1000A834:           ; void *
;   catch(...) // owned by 1000A7FF
;   catch(...) // owned by 1000A805
;   catch(...) // owned by 1000A823
push    [ebp+var_14]
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
xor     ebx, ebx
push    ebx             ; pThrowInfo
push    ebx             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; } // starts at 1000A7E2
sub_1000A7E2 endp

db 0CCh


; Attributes: bp-based frame

sub_1000A847 proc near

var_10= dword ptr -10h
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 10h
push    esi
push    edi
push    [ebp+arg_0]
lea     esi, [ecx+4]
lea     eax, [ebp+var_8]
push    eax
mov     ecx, esi
xor     edi, edi
call    sub_1000A21A
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_10]
call    sub_100040CA
lea     eax, [ebp+var_10]
push    eax
lea     ecx, [ebp+var_8]
call    sub_10009C9D
test    al, al
jnz     short loc_1000A8C2
lea     ecx, [ebp+var_8]
call    sub_10009CC4
inc     edi
cmp     dword ptr [eax+1Ch], 0
jz      short loc_1000A8AF
lea     ecx, [ebp+var_8]
call    sub_10009CC4
mov     eax, [eax+1Ch]
test    eax, eax
jz      short loc_1000A8A3
mov     edx, [eax]
push    edi
mov     ecx, eax
call    dword ptr [edx]

loc_1000A8A3:
lea     ecx, [ebp+var_8]
call    sub_10009CC4
and     dword ptr [eax+1Ch], 0

loc_1000A8AF:           ; void *
push    [ebp+var_4]
lea     eax, [ebp+var_10]
push    [ebp+var_8]     ; int
mov     ecx, esi
push    eax             ; int
call    sub_1000A4B5
jmp     short loc_1000A8E0

loc_1000A8C2:
call    sub_1000687F
test    eax, eax
jz      short loc_1000A8E0
mov     edx, [eax]
push    offset aCouldNotFindTh ; "Could not find the instance"
push    73h ; 's'
push    offset aToolproviderCp ; ".\\ToolProvider.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000A8E0:
mov     eax, edi
pop     edi
pop     esi
leave
retn    4
sub_1000A847 endp




sub_1000A8E8 proc near
push    esi
push    edi
mov     edi, ecx
lea     esi, [edi+18h]
mov     eax, [esi]
push    dword ptr [eax+4] ; void *
call    sub_1000A7A9
mov     eax, [esi]
mov     [eax+4], eax
mov     eax, [esi]
and     dword ptr [edi+1Ch], 0
mov     [eax], eax
mov     esi, [esi]
pop     edi
mov     [esi+8], esi
pop     esi
retn
sub_1000A8E8 endp



; Attributes: bp-based frame

; int __stdcall sub_1000A90E(int, int, void *, char, int)
sub_1000A90E proc near

var_8= dword ptr -8
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= byte ptr  14h

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    esi
mov     esi, ecx
mov     eax, [esi+18h]
push    esi
push    dword ptr [eax]
lea     ecx, [ebp+var_8]
call    sub_100040CA
lea     eax, [ebp+var_8]
push    eax
lea     ecx, [ebp+arg_4]
call    sub_10009C9D
test    al, al
jz      short loc_1000A963
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_8]
call    sub_100040CA
lea     eax, [ebp+var_8]
push    eax
lea     ecx, [ebp+arg_C]
call    sub_10009C9D
test    al, al
jz      short loc_1000A963
mov     ecx, esi
call    sub_1000A8E8
push    [ebp+arg_0]
mov     ecx, esi
call    sub_10009FCA
jmp     short loc_1000A9B2

loc_1000A963:
lea     eax, [ebp+arg_C]
push    eax
lea     ecx, [ebp+arg_4]
call    sub_10009C9D
test    al, al
jnz     short loc_1000A9A2
push    ebx
push    edi

loc_1000A975:
mov     edi, [ebp+arg_4]
mov     ebx, [ebp+arg_8]
lea     ecx, [ebp+arg_4]
call    sub_10009CF3
push    ebx             ; void *
push    edi             ; int
lea     eax, [ebp+var_8]
push    eax             ; int
mov     ecx, esi
call    sub_1000A4B5
lea     eax, [ebp+arg_C]
push    eax
lea     ecx, [ebp+arg_4]
call    sub_10009C9D
test    al, al
jz      short loc_1000A975
pop     edi
pop     ebx

loc_1000A9A2:
push    [ebp+arg_8]
mov     ecx, esi
push    [ebp+arg_4]
push    [ebp+arg_0]
call    sub_10009FFE

loc_1000A9B2:
mov     eax, [ebp+arg_0]
pop     esi
leave
retn    14h
sub_1000A90E endp



; Attributes: bp-based frame

sub_1000A9BA proc near

pExceptionObject= byte ptr -50h
var_28= byte ptr -28h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001A086 SIZE 00000023 BYTES

; __unwind { // loc_1001A08E
push    44h
mov     eax, offset loc_1001A08E
call    __EH_prolog3
mov     edi, ecx
cmp     dword ptr [edi+1Ch], 7FFFFFEh
jb      short loc_1000A9FC
push    offset aMapSetTTooLong ; "map/set<T> too long"
lea     ecx, [ebp+var_28]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   try {
and     [ebp+var_4], 0
lea     eax, [ebp+var_28]
push    eax             ; struct Concurrency::SchedulerPolicy *
lea     ecx, [ebp+pExceptionObject] ; this
call    ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z_0 ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
push    offset stru_1002112C ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_1000A9FC:
mov     eax, [edi+18h]
mov     esi, [ebp+arg_8]
push    0
push    [ebp+arg_C]
push    eax
push    esi
push    eax
call    sub_1000A7E2
inc     dword ptr [edi+1Ch]
mov     ebx, eax
mov     eax, [edi+18h]
cmp     esi, eax
jnz     short loc_1000AA28
mov     [eax+4], ebx
mov     eax, [edi+18h]
mov     [eax], ebx
mov     eax, [edi+18h]
jmp     short loc_1000AA46

loc_1000AA28:
cmp     byte ptr [ebp+arg_4], 0
jz      short loc_1000AA3B
mov     [esi], ebx
mov     eax, [edi+18h]
cmp     esi, [eax]
jnz     short loc_1000AA49
mov     [eax], ebx
jmp     short loc_1000AA49

loc_1000AA3B:
mov     [esi+8], ebx
mov     eax, [edi+18h]
cmp     esi, [eax+8]
jnz     short loc_1000AA49

loc_1000AA46:
mov     [eax+8], ebx

loc_1000AA49:
mov     esi, ebx
lea     eax, [ebx+4]
jmp     loc_1000AAE3

loc_1000AA53:
mov     ecx, [eax]
mov     edx, [ecx+4]
cmp     ecx, [edx]
jnz     short loc_1000AA94
mov     edx, [edx+8]
cmp     byte ptr [edx+2Ch], 0
jz      short loc_1000AA9C
cmp     esi, [ecx+8]
jnz     short loc_1000AA74
mov     esi, ecx
push    esi
mov     ecx, edi
call    sub_10009E3C

loc_1000AA74:
mov     eax, [esi+4]
mov     byte ptr [eax+2Ch], 1
mov     eax, [esi+4]
mov     eax, [eax+4]
mov     byte ptr [eax+2Ch], 0
mov     eax, [esi+4]
push    dword ptr [eax+4]
mov     ecx, edi
call    sub_10009C59
jmp     short loc_1000AAE0

loc_1000AA94:
mov     edx, [edx]
cmp     byte ptr [edx+2Ch], 0
jnz     short loc_1000AAB4

loc_1000AA9C:
mov     byte ptr [ecx+2Ch], 1
mov     byte ptr [edx+2Ch], 1
mov     ecx, [eax]
mov     ecx, [ecx+4]
mov     byte ptr [ecx+2Ch], 0
mov     eax, [eax]
mov     esi, [eax+4]
jmp     short loc_1000AAE0

loc_1000AAB4:
cmp     esi, [ecx]
jnz     short loc_1000AAC2
mov     esi, ecx
push    esi
mov     ecx, edi
call    sub_10009C59

loc_1000AAC2:
mov     eax, [esi+4]
mov     byte ptr [eax+2Ch], 1
mov     eax, [esi+4]
mov     eax, [eax+4]
mov     byte ptr [eax+2Ch], 0
mov     eax, [esi+4]
push    dword ptr [eax+4]
mov     ecx, edi
call    sub_10009E3C

loc_1000AAE0:
lea     eax, [esi+4]

loc_1000AAE3:
mov     ecx, [eax]
cmp     byte ptr [ecx+2Ch], 0
jz      loc_1000AA53
mov     eax, [edi+18h]
mov     eax, [eax+4]
mov     ecx, [ebp+arg_0]
push    edi
push    ebx
mov     byte ptr [eax+2Ch], 1
call    sub_100040CA
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn    10h
;   } // starts at 1000A9DE
; } // starts at 1000A9BA
sub_1000A9BA endp

; [00000031 BYTES: COLLAPSED FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; [00000089 BYTES: COLLAPSED FUNCTION sub_1000AB3F]


; Attributes: bp-based frame

sub_1000ABC8 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= byte ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 10h
push    esi
mov     esi, ecx
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_8]
call    sub_100040CA
mov     eax, [esi+18h]
push    esi
push    dword ptr [eax]
lea     ecx, [ebp+var_10]
call    sub_100040CA
push    [ebp+var_4]     ; int
lea     eax, [ebp+var_10]
push    dword ptr [ebp+var_8] ; char
mov     ecx, esi
push    [ebp+var_C]     ; void *
push    [ebp+var_10]    ; int
push    eax             ; int
call    sub_1000A90E
push    dword ptr [esi+18h] ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
and     dword ptr [esi+18h], 0
and     dword ptr [esi+1Ch], 0
pop     ecx
pop     esi
leave
retn
sub_1000ABC8 endp



; Attributes: bp-based frame

sub_1000AC16 proc near

var_14= byte ptr -14h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 14h
push    ebx
push    esi
push    edi
mov     edi, ecx
mov     eax, [edi+18h]
mov     esi, [eax+4]
mov     ebx, eax
mov     byte ptr [ebp+var_4], 1
jmp     short loc_1000AC4D

loc_1000AC2F:
lea     eax, [esi+0Ch]
push    eax
push    [ebp+arg_4]
mov     ebx, esi
call    sub_1000A070
pop     ecx
pop     ecx
mov     byte ptr [ebp+var_4], al
test    al, al
jz      short loc_1000AC4A
mov     esi, [esi]
jmp     short loc_1000AC4D

loc_1000AC4A:
mov     esi, [esi+8]

loc_1000AC4D:
cmp     byte ptr [esi+2Dh], 0
jz      short loc_1000AC2F
push    edi
push    ebx
lea     ecx, [ebp+var_C]
call    sub_100040CA
cmp     byte ptr [ebp+var_4], 0
jz      short loc_1000ACAF
mov     eax, [edi+18h]
push    edi
push    dword ptr [eax]
lea     ecx, [ebp+var_14]
call    sub_100040CA
lea     eax, [ebp+var_14]
push    eax
lea     ecx, [ebp+var_C]
call    sub_10009C9D
test    al, al
jz      short loc_1000ACA7
push    [ebp+arg_4]
push    ebx
push    1

loc_1000AC87:
lea     eax, [ebp+var_14]
push    eax
mov     ecx, edi
call    sub_1000A9BA
mov     ecx, eax
mov     edx, [ecx]
mov     eax, [ebp+arg_0]
mov     ecx, [ecx+4]
mov     [eax], edx
mov     [eax+4], ecx
mov     byte ptr [eax+8], 1
jmp     short loc_1000ACDC

loc_1000ACA7:
lea     ecx, [ebp+var_C]
call    sub_10009D42

loc_1000ACAF:
mov     esi, [ebp+var_8]
push    [ebp+arg_4]
lea     eax, [esi+0Ch]
push    eax
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000ACCD
push    [ebp+arg_4]
push    ebx
push    [ebp+var_4]
jmp     short loc_1000AC87

loc_1000ACCD:
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+var_C]
mov     [eax], ecx
mov     [eax+4], esi
mov     byte ptr [eax+8], 0

loc_1000ACDC:
pop     edi
pop     esi
pop     ebx
leave
retn    8
sub_1000AC16 endp



; Attributes: bp-based frame

sub_1000ACE3 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001A0A9 SIZE 00000023 BYTES

; __unwind { // loc_1001A0B1
push    4
mov     eax, offset loc_1001A0B1
call    __EH_prolog3
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
call    sub_1000ABC8
;   } // starts at 1000ACF2
or      [ebp+var_4], 0FFFFFFFFh
mov     ecx, [ebp+var_10]
call    sub_1000A1B0
call    __EH_epilog3
retn
; } // starts at 1000ACE3
sub_1000ACE3 endp



; Attributes: bp-based frame

sub_1000AD0D proc near

var_14= byte ptr -14h
var_10= byte ptr -10h
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 14h
push    esi
mov     esi, ecx
cmp     dword ptr [esi+1Ch], 0
jnz     short loc_1000AD34
push    [ebp+arg_C]
push    dword ptr [esi+18h]
push    1
push    [ebp+arg_0]
call    sub_1000A9BA
mov     eax, [ebp+arg_0]
jmp     loc_1000AEA7

loc_1000AD34:
mov     eax, [esi+18h]
push    ebx
push    edi
push    esi
push    dword ptr [eax]
lea     ecx, [ebp+var_8]
call    sub_100040CA
lea     eax, [ebp+var_8]
push    eax
lea     ecx, [ebp+arg_4]
call    sub_10009C9D
test    al, al
jz      short loc_1000AD79
mov     eax, [ebp+arg_8]
mov     edi, [ebp+arg_C]
add     eax, 0Ch
push    eax
push    edi
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      loc_1000AE8A
push    edi
push    [ebp+arg_8]
mov     ecx, esi
jmp     loc_1000AE7B

loc_1000AD79:
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_8]
call    sub_100040CA
lea     eax, [ebp+var_8]
push    eax
lea     ecx, [ebp+arg_4]
call    sub_10009C9D
mov     edi, [ebp+arg_C]
test    al, al
jz      short loc_1000ADC2
mov     eax, [esi+18h]
mov     eax, [eax+8]
add     eax, 0Ch
push    edi
push    eax
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      loc_1000AE8A
mov     eax, [esi+18h]
push    edi
push    dword ptr [eax+8]
mov     ecx, esi
push    0
jmp     loc_1000AE7D

loc_1000ADC2:
mov     eax, [ebp+arg_8]
add     eax, 0Ch
push    eax
push    edi
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000AE10
mov     eax, [ebp+arg_4]
mov     [ebp+var_8], eax
mov     eax, [ebp+arg_8]
lea     ecx, [ebp+var_8]
mov     [ebp+var_4], eax
call    sub_10009D42
mov     ebx, [ebp+var_4]
lea     eax, [ebx+0Ch]
push    edi
push    eax
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000AE10
mov     eax, [ebx+8]
cmp     byte ptr [eax+2Dh], 0
push    edi
mov     ecx, esi
jz      short loc_1000AE0B
push    ebx
jmp     short loc_1000AE76

loc_1000AE0B:
push    [ebp+arg_8]
jmp     short loc_1000AE7B

loc_1000AE10:
mov     eax, [ebp+arg_8]
add     eax, 0Ch
push    edi
push    eax
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000AE8A
mov     eax, [ebp+arg_4]
push    esi
push    dword ptr [esi+18h]
mov     [ebp+var_8], eax
mov     eax, [ebp+arg_8]
lea     ecx, [ebp+var_10]
mov     [ebp+var_4], eax
call    sub_100040CA
lea     ecx, [ebp+var_8]
call    sub_10009CF3
lea     eax, [ebp+var_10]
push    eax
lea     ecx, [ebp+var_8]
call    sub_10009C9D
mov     ebx, [ebp+var_4]
test    al, al
jnz     short loc_1000AE66
lea     eax, [ebx+0Ch]
push    eax
push    edi
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000AE8A

loc_1000AE66:
mov     eax, [ebp+arg_8]
mov     ecx, [eax+8]
cmp     byte ptr [ecx+2Dh], 0
push    edi
mov     ecx, esi
jz      short loc_1000AE7A
push    eax

loc_1000AE76:
push    0
jmp     short loc_1000AE7D

loc_1000AE7A:
push    ebx

loc_1000AE7B:
push    1

loc_1000AE7D:
push    [ebp+arg_0]
call    sub_1000A9BA
mov     eax, [ebp+arg_0]
jmp     short loc_1000AEA5

loc_1000AE8A:
push    edi
lea     eax, [ebp+var_14]
push    eax
mov     ecx, esi
call    sub_1000AC16
mov     edx, [eax]
mov     ecx, [ebp+arg_0]
mov     [ecx], edx
mov     eax, [eax+4]
mov     [ecx+4], eax
mov     eax, ecx

loc_1000AEA5:
pop     edi
pop     ebx

loc_1000AEA7:
pop     esi
leave
retn    10h
sub_1000AD0D endp



; Attributes: bp-based frame

sub_1000AEAC proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001A0CC SIZE 00000023 BYTES

; __unwind { // loc_1001A0D4
push    4
mov     eax, offset loc_1001A0D4
call    __EH_prolog3
mov     [ebp+var_10], ecx
or      [ebp+var_4], 0FFFFFFFFh
call    sub_1000ACE3
call    __EH_epilog3
retn
; } // starts at 1000AEAC
sub_1000AEAC endp



; Attributes: bp-based frame

sub_1000AECA proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001A135 SIZE 00000026 BYTES

; __unwind { // loc_1001A140
push    4
mov     eax, offset loc_1001A140
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_1001D740
;   try {
and     [ebp+var_4], 0
call    sub_1000AB3F
;   } // starts at 1000AEE1
or      [ebp+var_4], 0FFFFFFFFh
lea     ecx, [esi+4]
call    sub_1000AEAC
call    __EH_epilog3
retn
; } // starts at 1000AECA
sub_1000AECA endp



; Attributes: bp-based frame

sub_1000AEFC proc near

var_14= dword ptr -14h
var_D= byte ptr -0Dh
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001A0EF SIZE 00000023 BYTES

; __unwind { // loc_1001A0F7
push    8
mov     eax, offset loc_1001A0F7
call    __EH_prolog3
mov     [ebp+var_14], ecx
lea     eax, [ebp+var_D]
push    eax
lea     eax, [ebp+var_D]
push    eax
call    sub_1000A433
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn
; } // starts at 1000AEFC
sub_1000AEFC endp



; Attributes: bp-based frame

sub_1000AF25 proc near

var_44= byte ptr -44h
var_24= byte ptr -24h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= byte ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001A112 SIZE 00000023 BYTES

; __unwind { // loc_1001A11A
push    38h
mov     eax, offset loc_1001A11A
call    __EH_prolog3
mov     esi, ecx
push    [ebp+arg_0]
lea     eax, [ebp+var_1C]
push    eax
call    sub_1000A1CE
mov     eax, [esi+18h]
push    esi
push    eax
lea     ecx, [ebp+var_14]
call    sub_100040CA
lea     eax, [ebp+var_14]
push    eax
lea     ecx, [ebp+var_1C]
call    sub_10009C9D
mov     edi, [ebp+var_18]
test    al, al
jnz     short loc_1000AF71
lea     eax, [edi+0Ch]
push    eax
push    [ebp+arg_0]
call    sub_1000A070
pop     ecx
pop     ecx
test    al, al
jz      short loc_1000AFAF

loc_1000AF71:
and     [ebp+var_10], 0
lea     eax, [ebp+var_10]
push    eax
push    [ebp+arg_0]
lea     ecx, [ebp+var_44]
call    sub_1000A286
;   try {
and     [ebp+var_4], 0
push    eax
push    edi
push    [ebp+var_1C]
lea     eax, [ebp+var_24]
push    eax
mov     ecx, esi
call    sub_1000AD0D
mov     ecx, [eax]
mov     eax, [eax+4]
mov     [ebp+var_1C], ecx
mov     [ebp+var_18], eax
;   } // starts at 1000AF84
or      [ebp+var_4], 0FFFFFFFFh
lea     ecx, [ebp+var_44]
call    sub_1000A087

loc_1000AFAF:
lea     ecx, [ebp+var_1C]
call    sub_10009CC4
add     eax, 1Ch
call    __EH_epilog3
retn    4
; } // starts at 1000AF25
sub_1000AF25 endp



; Attributes: bp-based frame

sub_1000AFC2 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 1001A135 SIZE 00000026 BYTES

; __unwind { // loc_1001A140
push    4
mov     eax, offset loc_1001A140
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
lea     ecx, [esi+4]
mov     dword ptr [esi], offset off_1001D740
call    sub_1000AEFC
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 1000AFC2
sub_1000AFC2 endp




; int __thiscall sub_1000AFED(void *, char)
sub_1000AFED proc near

arg_0= byte ptr  4

push    esi
mov     esi, ecx
call    sub_1000AECA
test    [esp+4+arg_0], 1
jz      short loc_1000B003
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000B003:
mov     eax, esi
pop     esi
retn    4
sub_1000AFED endp



; Attributes: bp-based frame

sub_1000B009 proc near

var_10= byte ptr -10h
var_8= byte ptr -8
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 10h
push    esi
push    edi
push    [ebp+arg_0]
lea     esi, [ecx+4]
lea     eax, [ebp+var_8]
push    eax
mov     ecx, esi
xor     edi, edi
call    sub_1000A21A
push    esi
push    dword ptr [esi+18h]
lea     ecx, [ebp+var_10]
call    sub_100040CA
lea     eax, [ebp+var_10]
push    eax
lea     ecx, [ebp+var_8]
call    sub_10009C9D
test    al, al
jnz     short loc_1000B04D
lea     ecx, [ebp+var_8]
call    sub_10009CC4
mov     edi, [eax+1Ch]
jmp     short loc_1000B0A4

loc_1000B04D:
call    sub_10009BA3
test    eax, eax
jz      short loc_1000B086
push    [ebp+arg_0]
mov     ecx, eax
call    sub_10009B03
mov     edi, eax
test    edi, edi
jz      short loc_1000B074
push    [ebp+arg_0]
mov     ecx, esi
call    sub_1000AF25
mov     [eax], edi
jmp     short loc_1000B0A4

loc_1000B074:
call    sub_1000687F
test    eax, eax
jz      short loc_1000B0A4
push    offset aCouldNotCreate_0 ; "Could not create object"
push    53h ; 'S'
jmp     short loc_1000B096

loc_1000B086:
call    sub_1000687F
test    eax, eax
jz      short loc_1000B0A4
push    offset aInvalidPointer ; "Invalid pointer"
push    58h ; 'X'

loc_1000B096:
mov     edx, [eax]
push    offset aToolproviderCp ; ".\\ToolProvider.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000B0A4:
mov     eax, edi
pop     edi
pop     esi
leave
retn    4
sub_1000B009 endp



; Attributes: bp-based frame

sub_1000B0AC proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10019738 SIZE 00000025 BYTES

; __unwind { // loc_10019742
push    4
mov     eax, offset loc_10019742
call    __EH_prolog3
cmp     dword_100243E4, 0
jnz     short loc_1000B10A
push    24h ; '$'       ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
mov     ecx, eax
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
test    ecx, ecx
jz      short loc_1000B0DD
call    sub_1000AFC2
jmp     short loc_1000B0DF

loc_1000B0DD:
xor     eax, eax
;   } // starts at 1000B0CE

loc_1000B0DF:
or      [ebp+var_4], 0FFFFFFFFh
mov     dword_100243E4, eax
test    eax, eax
jnz     short loc_1000B10A
call    sub_1000687F
test    eax, eax
jz      short loc_1000B10A
mov     edx, [eax]
push    offset aErrorWhileCrea ; "Error while create instance. Not enough"...
push    1Dh
push    offset aToolproviderCp ; ".\\ToolProvider.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000B10A:
mov     eax, dword_100243E4
call    __EH_epilog3
retn
; } // starts at 1000B0AC
sub_1000B0AC endp

align 2
; [00000006 BYTES: COLLAPSED FUNCTION CSecurity::SetSeedAndGetKey(ushort,ushort,ushort *)]
; [00000006 BYTES: COLLAPSED FUNCTION CSecurity::CSecurity(void)]


; Attributes: noreturn bp-based frame

sub_1000B122 proc near

pExceptionObject= byte ptr -50h
var_28= byte ptr -28h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100018C0 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001A15B SIZE 00000023 BYTES

; __unwind { // loc_1001A163
push    44h
mov     eax, offset loc_1001A163
call    __EH_prolog3
push    offset aStringTooLong ; "string too long"
lea     ecx, [ebp+var_28]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   try {
and     [ebp+var_4], 0
lea     eax, [ebp+var_28]
push    eax             ; struct Concurrency::SchedulerPolicy *
lea     ecx, [ebp+pExceptionObject] ; this
call    ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z_0 ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
push    offset stru_1002112C ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
;   } // starts at 1000B13B
; } // starts at 1000B122
sub_1000B122 endp

align 2


; Attributes: noreturn bp-based frame

sub_1000B15A proc near

pExceptionObject= byte ptr -50h
var_28= byte ptr -28h
var_4= dword ptr -4

; FUNCTION CHUNK AT 1001A15B SIZE 00000023 BYTES

; __unwind { // loc_1001A163
push    44h
mov     eax, offset loc_1001A163
call    __EH_prolog3
push    offset aInvalidStringP ; "invalid string position"
lea     ecx, [ebp+var_28]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   try {
and     [ebp+var_4], 0
lea     eax, [ebp+var_28]
push    eax             ; struct Concurrency::SchedulerPolicy *
lea     ecx, [ebp+pExceptionObject] ; this
call    ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z_1 ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
push    offset stru_10021014 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
;   } // starts at 1000B173
; } // starts at 1000B15A
sub_1000B15A endp

align 2
; [0000000B BYTES: COLLAPSED FUNCTION operator new[](uint)]



sub_1000B19D proc near
mov     eax, ecx
and     dword ptr [eax+4], 0
and     dword ptr [eax+8], 0
mov     dword ptr [eax], offset off_1001D770
retn
sub_1000B19D endp

; [00000053 BYTES: COLLAPSED FUNCTION std::exception::exception(char const * const &)]
; [0000001D BYTES: COLLAPSED FUNCTION std::exception::exception(char const * const &,int)]
; [0000005D BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &)]



sub_1000B27B proc near
cmp     dword ptr [ecx+8], 0
mov     dword ptr [ecx], offset off_1001D770
jz      short locret_1000B290
push    dword ptr [ecx+4] ; Block
call    _free
pop     ecx

locret_1000B290:
retn
sub_1000B27B endp

; [0000000D BYTES: COLLAPSED FUNCTION exception::what(void)]


; Attributes: bp-based frame

; int __thiscall sub_1000B29E(void *, char)
sub_1000B29E proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_1000B27B
test    [ebp+arg_0], 1
jz      short loc_1000B2B8
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000B2B8:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000B29E endp

; [0000002D BYTES: COLLAPSED FUNCTION _JumpToContinuation(void *,EHRegistrationNode *)]
pop     ebx
leave
retn    8
; [00000007 BYTES: COLLAPSED FUNCTION sub_1000B2F1]
; [00000054 BYTES: COLLAPSED FUNCTION _UnwindNestedFrames(EHRegistrationNode *,EHExceptionRecord *)]
; [00000036 BYTES: COLLAPSED FUNCTION ___CxxFrameHandler3]
; [00000033 BYTES: COLLAPSED FUNCTION CatchGuardHandler(EHExceptionRecord *,CatchGuardRN *,void *,void *)]
; [000000D7 BYTES: COLLAPSED FUNCTION _CallSETranslator(EHExceptionRecord *,EHRegistrationNode *,void *,void *,_s_FuncInfo const *,int,EHRegistrationNode *)]
; [0000009F BYTES: COLLAPSED FUNCTION TranslatorGuardHandler(EHExceptionRecord *,TranslatorGuardRN *,void *,void *)]
; [00000075 BYTES: COLLAPSED FUNCTION _GetRangeOfTrysToCheck(_s_FuncInfo const *,int,int,uint *,uint *)]
; [0000002C BYTES: COLLAPSED FUNCTION __CreateFrameInfo]
; [00000027 BYTES: COLLAPSED FUNCTION __IsExceptionObjectToBeDestroyed]
; [00000052 BYTES: COLLAPSED FUNCTION __FindAndUnlinkFrame]
; [00000060 BYTES: COLLAPSED FUNCTION _CallCatchBlock2(EHRegistrationNode *,_s_FuncInfo const *,void *,int,ulong)]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [00000033 BYTES: COLLAPSED FUNCTION __EH_prolog3]
; [00000036 BYTES: COLLAPSED FUNCTION __EH_prolog3_catch]
; [00000036 BYTES: COLLAPSED FUNCTION __EH_prolog3_GS]
; [00000039 BYTES: COLLAPSED FUNCTION __EH_prolog3_catch_GS]
; [00000014 BYTES: COLLAPSED FUNCTION __EH_epilog3]
; [0000000F BYTES: COLLAPSED FUNCTION __EH_epilog3_GS]
; [0000000F BYTES: COLLAPSED FUNCTION __EH_epilog3_catch_GS]



sub_1000B7BE proc near
mov     edi, edi
push    ecx             ; struct type_info *
mov     dword ptr [ecx], offset off_1001D790
call    ?_Type_info_dtor@type_info@@CAXPAV1@@Z ; type_info::_Type_info_dtor(type_info *)
pop     ecx
retn
sub_1000B7BE endp



; Attributes: bp-based frame

; int __thiscall sub_1000B7CE(void *, char)
sub_1000B7CE proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_1000B7BE
test    [ebp+arg_0], 1
jz      short loc_1000B7E8
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000B7E8:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000B7CE endp

; [00000020 BYTES: COLLAPSED FUNCTION type_info::operator==(type_info const &)]
; [0000000B BYTES: COLLAPSED FUNCTION operator delete(void *)]
; [0000007D BYTES: COLLAPSED FUNCTION _memcpy_s]
; [0000005D BYTES: COLLAPSED FUNCTION _memmove_s]
; [0000001A BYTES: COLLAPSED FUNCTION _wcslen]
align 10h
; [0000008B BYTES: COLLAPSED FUNCTION _strlen]
align 10h
; [0000007A BYTES: COLLAPSED FUNCTION _memset]
; [0000002A BYTES: COLLAPSED FUNCTION __purecall]
; [0000001B BYTES: COLLAPSED FUNCTION std::bad_alloc::bad_alloc(void)]
; [00000065 BYTES: COLLAPSED FUNCTION operator new(uint)]
; [0000004C BYTES: COLLAPSED FUNCTION _CxxThrowException(x,x)]


; Attributes: bp-based frame

sub_1000BB10 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_100243F8, eax
pop     ebp
retn
sub_1000BB10 endp

; [00000128 BYTES: COLLAPSED FUNCTION __invoke_watson]
; [00000026 BYTES: COLLAPSED FUNCTION __invalid_parameter]
; [00000010 BYTES: COLLAPSED FUNCTION __invalid_parameter_noinfo]
; [0000006A BYTES: COLLAPSED FUNCTION _vscan_fn]
; [00000022 BYTES: COLLAPSED FUNCTION _sscanf_s]
; [000000F6 BYTES: COLLAPSED FUNCTION xtow_s(x,x,x,x,x)]
; [0000002C BYTES: COLLAPSED FUNCTION __itow_s]
; [0000001E BYTES: COLLAPSED FUNCTION _sprintf_s]
; [000000BA BYTES: COLLAPSED FUNCTION __onexit_nolock]
; [00000031 BYTES: COLLAPSED FUNCTION ___onexitinit]
; [0000003C BYTES: COLLAPSED FUNCTION __onexit]
; [00000017 BYTES: COLLAPSED FUNCTION _atexit]
; [0000000B BYTES: COLLAPSED FUNCTION operator delete[](void *)]
; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *))]
; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *))]
; [0000006F BYTES: COLLAPSED FUNCTION _wcscpy_s]
; [000000F8 BYTES: COLLAPSED FUNCTION __vswprintf_helper]
; [0000002A BYTES: COLLAPSED FUNCTION __vswprintf_c_l]
; [0000008B BYTES: COLLAPSED FUNCTION __vswprintf_s_l]
; [0000008E BYTES: COLLAPSED FUNCTION _free]
; [0000001E BYTES: COLLAPSED FUNCTION _swprintf_s]
align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __alloca_probe]
; [00000058 BYTES: COLLAPSED FUNCTION __wcsdup]
; [00000220 BYTES: COLLAPSED FUNCTION __wsplitpath_s]
; [0000001F BYTES: COLLAPSED FUNCTION _wcsnlen]
; [00000135 BYTES: COLLAPSED FUNCTION _CRT_INIT(x,x,x)]
; [000000F6 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000068 BYTES: COLLAPSED FUNCTION _strcpy_s]
; [0000004F BYTES: COLLAPSED FUNCTION _V6_HeapAlloc]
; [000000CA BYTES: COLLAPSED FUNCTION _malloc]


; Attributes: bp-based frame

; int __stdcall sub_1000C9B1(char *)
sub_1000C9B1 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
lea     eax, [ebp+arg_0]
push    eax             ; char **
mov     esi, ecx
call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
mov     dword ptr [esi], offset off_1001D7C0
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000C9B1 endp




sub_1000C9CF proc near
mov     dword ptr [ecx], offset off_1001D7C0
jmp     sub_1000B27B
sub_1000C9CF endp



; Attributes: bp-based frame

; int __thiscall sub_1000C9DA(void *, char)
sub_1000C9DA proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_1001D7C0
call    sub_1000B27B
test    [ebp+arg_0], 1
jz      short loc_1000C9FA
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000C9FA:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000C9DA endp

; [0000005F BYTES: COLLAPSED FUNCTION ___TypeMatch]
; [00000049 BYTES: COLLAPSED FUNCTION ___FrameUnwindFilter]
; [000000E1 BYTES: COLLAPSED FUNCTION ___FrameUnwindToState]
; [00000045 BYTES: COLLAPSED FUNCTION ExFilterRethrow(_EXCEPTION_POINTERS *)]
; [00000055 BYTES: COLLAPSED FUNCTION ___DestructExceptionObject]
; [00000029 BYTES: COLLAPSED FUNCTION ___AdjustPointer]
; [0000007B BYTES: COLLAPSED FUNCTION IsInExceptionSpec(EHExceptionRecord *,_s_ESTypeList const *)]
; [00000028 BYTES: COLLAPSED FUNCTION CallUnexpected(_s_ESTypeList const *)]
or      dword ptr [ebp-4], 0FFFFFFFFh
call    ?terminate@@YAXXZ ; terminate(void)
; [00000017 BYTES: COLLAPSED CHUNK OF FUNCTION CallUnexpected(_s_ESTypeList const *)]
db 0CCh
; [0000019C BYTES: COLLAPSED FUNCTION CallCatchBlock(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,_s_FuncInfo const *,void *,int,ulong)]
; [0000017F BYTES: COLLAPSED FUNCTION ___BuildCatchObjectHelper]
; [00000092 BYTES: COLLAPSED FUNCTION ___BuildCatchObject]
; [0000006E BYTES: COLLAPSED FUNCTION CatchIt(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,_s_HandlerType const *,_s_CatchableType const *,_s_TryBlockMapEntry const *,int,EHRegistrationNode *,uchar)]
; [000000F4 BYTES: COLLAPSED FUNCTION FindHandlerForForeignException(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,int,int,EHRegistrationNode *)]
; [00000347 BYTES: COLLAPSED FUNCTION FindHandler(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,uchar,int,EHRegistrationNode *)]


; Attributes: bp-based frame

; int __stdcall sub_1000D567(struct std::exception *)
sub_1000D567 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct std::exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_1001D7C0
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000D567 endp

; [000000E6 BYTES: COLLAPSED FUNCTION ___InternalCxxFrameHandler]
; [00000072 BYTES: COLLAPSED FUNCTION __encode_pointer]
; [00000009 BYTES: COLLAPSED FUNCTION __encoded_null]
; [00000072 BYTES: COLLAPSED FUNCTION __decode_pointer]
; [00000009 BYTES: COLLAPSED FUNCTION __crtTlsAlloc(x)]
; [00000034 BYTES: COLLAPSED FUNCTION ___set_flsgetvalue]
; [0000003D BYTES: COLLAPSED FUNCTION __mtterm]
; [000000E7 BYTES: COLLAPSED FUNCTION __initptd]
; [00000079 BYTES: COLLAPSED FUNCTION __getptd_noexit]
; [0000001A BYTES: COLLAPSED FUNCTION __getptd]
; [0000012F BYTES: COLLAPSED FUNCTION _freefls(x)]
; [0000006E BYTES: COLLAPSED FUNCTION __freeptd]
; [0000018D BYTES: COLLAPSED FUNCTION __mtinit]
; [00000039 BYTES: COLLAPSED FUNCTION terminate(void)]
; [00000013 BYTES: COLLAPSED FUNCTION unexpected(void)]
; [00000038 BYTES: COLLAPSED FUNCTION _inconsistency(void)]
; [00000011 BYTES: COLLAPSED FUNCTION __initp_eh_hooks]
align 10h
; [0000004C BYTES: COLLAPSED FUNCTION _CallSettingFrame(x,x,x)]
; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [00000070 BYTES: COLLAPSED FUNCTION type_info::_Type_info_dtor(type_info *)]
align 10h
; [00000088 BYTES: COLLAPSED FUNCTION _strcmp]
align 10h
; [00000365 BYTES: COLLAPSED FUNCTION _memcpy]
; [00000042 BYTES: COLLAPSED FUNCTION __get_errno_from_oserr]
; [00000013 BYTES: COLLAPSED FUNCTION __errno]
; [00000013 BYTES: COLLAPSED FUNCTION ___doserrno]
; [00000023 BYTES: COLLAPSED FUNCTION __dosmaperr]
; [00000365 BYTES: COLLAPSED FUNCTION _memcpy_0]
; [00000057 BYTES: COLLAPSED FUNCTION _fastzero_I]
; [0000008F BYTES: COLLAPSED FUNCTION __VEC_memzero]
; [00000050 BYTES: COLLAPSED FUNCTION _has_osfxsr_set]
; [00000062 BYTES: COLLAPSED FUNCTION __get_sse2_info]



sub_1000E85D proc near
call    __get_sse2_info
mov     dword_10026018, eax
xor     eax, eax
retn
sub_1000E85D endp

; [00000117 BYTES: COLLAPSED FUNCTION _abort]
; [00000021 BYTES: COLLAPSED FUNCTION __set_abort_behavior]
; [000001AB BYTES: COLLAPSED FUNCTION __NMSG_WRITE]
; [00000039 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER]


; Attributes: bp-based frame

sub_1000EB86 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_10024A74, eax
pop     ebp
retn
sub_1000EB86 endp



; Attributes: bp-based frame

sub_1000EB95 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_10024A78, eax
pop     ebp
retn
sub_1000EB95 endp

; [00000028 BYTES: COLLAPSED FUNCTION __callnewh]



sub_1000EBCC proc near
and     dword_10026014, 0
retn
sub_1000EBCC endp

; [00000087 BYTES: COLLAPSED FUNCTION _LocaleUpdate::_LocaleUpdate(localeinfo_struct *)]
; [00000057 BYTES: COLLAPSED FUNCTION ___check_float_string]
; [00000020 BYTES: COLLAPSED FUNCTION __hextodec]
; [00000016 BYTES: COLLAPSED FUNCTION __inc]
; [00000013 BYTES: COLLAPSED FUNCTION __un_inc]
; [0000002A BYTES: COLLAPSED FUNCTION __whiteout]
; [00001124 BYTES: COLLAPSED FUNCTION __input_s_l]
align 10h
; [00000095 BYTES: COLLAPSED FUNCTION __aulldvrm]
; [00000164 BYTES: COLLAPSED FUNCTION __flsbuf]
; [000000CC BYTES: COLLAPSED FUNCTION __vsnprintf_helper]
; [00000088 BYTES: COLLAPSED FUNCTION __vsprintf_s_l]
; [00000045 BYTES: COLLAPSED FUNCTION __malloc_crt]
; [0000004C BYTES: COLLAPSED FUNCTION __calloc_crt]
; [0000004E BYTES: COLLAPSED FUNCTION __realloc_crt]
; [00000052 BYTES: COLLAPSED FUNCTION __recalloc_crt]
; [000000A3 BYTES: COLLAPSED FUNCTION __msize]
; [00000030 BYTES: COLLAPSED FUNCTION __crt_waiting_on_module_handle]
; [00000029 BYTES: COLLAPSED FUNCTION __amsg_exit]
; [0000002B BYTES: COLLAPSED FUNCTION ___crtCorExitProcess]
; [00000017 BYTES: COLLAPSED FUNCTION ___crtExitProcess]
db 0CCh
; [00000009 BYTES: COLLAPSED FUNCTION __lockexit]
; [00000009 BYTES: COLLAPSED FUNCTION __unlockexit]
; [0000001D BYTES: COLLAPSED FUNCTION __initterm]
; [00000024 BYTES: COLLAPSED FUNCTION __initterm_e]
; [00000085 BYTES: COLLAPSED FUNCTION __cinit]
; [0000012C BYTES: COLLAPSED FUNCTION _doexit]
; [00000016 BYTES: COLLAPSED FUNCTION __exit]
; [0000000F BYTES: COLLAPSED FUNCTION __cexit]
; [0000004E BYTES: COLLAPSED FUNCTION __init_pointers]
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
align 10h
; [0000018C BYTES: COLLAPSED FUNCTION SEH_10016F20]
; [0000002F BYTES: COLLAPSED FUNCTION _write_char]
; [00000027 BYTES: COLLAPSED FUNCTION _write_multi_char]
; [00000052 BYTES: COLLAPSED FUNCTION _write_string]
; [00000B75 BYTES: COLLAPSED FUNCTION __woutput_l]
align 4
jpt_10010A2E dd offset $NORMAL_STATE$29479 ; jump table for switch statement
dd offset loc_10010A35
dd offset loc_10010A67
dd offset loc_10010AC4
dd offset loc_10010B11
dd offset loc_10010B1D
dd offset loc_10010B64
dd offset loc_10010C74
; [00000B7E BYTES: COLLAPSED FUNCTION __woutput_s_l]
align 4
jpt_100115ED dd offset $NORMAL_STATE$29486 ; jump table for switch statement
dd offset loc_100115F4
dd offset loc_10011626
dd offset loc_10011681
dd offset loc_100116CD
dd offset loc_100116D9
dd offset loc_1001171F
dd offset loc_1001181E
; [00000030 BYTES: COLLAPSED FUNCTION __heap_init]
; [00000074 BYTES: COLLAPSED FUNCTION __heap_term]
; [0000004B BYTES: COLLAPSED FUNCTION __mtinitlocks]
; [00000057 BYTES: COLLAPSED FUNCTION __mtdeletelocks]
; [00000017 BYTES: COLLAPSED FUNCTION __unlock]
; [000000C3 BYTES: COLLAPSED FUNCTION __mtinitlocknum]
; [00000033 BYTES: COLLAPSED FUNCTION __lock]
; [00000030 BYTES: COLLAPSED FUNCTION ___sbh_find_block]
; [00000316 BYTES: COLLAPSED FUNCTION ___sbh_free_block]
; [000000B0 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_region]
; [00000108 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_group]
; [000002E1 BYTES: COLLAPSED FUNCTION ___sbh_resize_block]
; [000002E5 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block]
; [00000040 BYTES: COLLAPSED FUNCTION _calloc]
; [000000D3 BYTES: COLLAPSED FUNCTION _wcsncpy_s]
; [00000254 BYTES: COLLAPSED FUNCTION __ioinit]
; [0000004E BYTES: COLLAPSED FUNCTION __ioterm]
; [000000DE BYTES: COLLAPSED FUNCTION __setenvp]
; [0000019A BYTES: COLLAPSED FUNCTION _parse_cmdline]
; [000000BB BYTES: COLLAPSED FUNCTION __setargv]
; [00000137 BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsA]



sub_10013582 proc near
mov     edi, edi
push    esi
mov     eax, offset unk_1001FC64
mov     esi, offset unk_1001FC64
push    edi
mov     edi, eax
cmp     eax, esi
jnb     short loc_100135A5

loc_10013596:
mov     eax, [edi]
test    eax, eax
jz      short loc_1001359E
call    eax

loc_1001359E:
add     edi, 4
cmp     edi, esi
jb      short loc_10013596

loc_100135A5:
pop     edi
pop     esi
retn
sub_10013582 endp




; void __cdecl sub_100135A8()
sub_100135A8 proc near
mov     edi, edi
push    esi
mov     eax, offset unk_1001FC6C
mov     esi, offset unk_1001FC6C
push    edi
mov     edi, eax
cmp     eax, esi
jnb     short loc_100135CB

loc_100135BC:
mov     eax, [edi]
test    eax, eax
jz      short loc_100135C4
call    eax

loc_100135C4:
add     edi, 4
cmp     edi, esi
jb      short loc_100135BC

loc_100135CB:
pop     edi
pop     esi
retn
sub_100135A8 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1]
; [00000160 BYTES: COLLAPSED FUNCTION __XcptFilter]
; [00000020 BYTES: COLLAPSED FUNCTION ___CppXcptFilter]
; [00000096 BYTES: COLLAPSED FUNCTION ___security_init_cookie]
; [00000012 BYTES: COLLAPSED FUNCTION unknown_libname_7]
; [00000149 BYTES: COLLAPSED FUNCTION ___freetlocinfo]
; [0000008F BYTES: COLLAPSED FUNCTION ___addlocaleref]
; [00000099 BYTES: COLLAPSED FUNCTION ___removelocaleref]
; [0000003E BYTES: COLLAPSED FUNCTION __updatetlocinfoEx_nolock]
; [00000076 BYTES: COLLAPSED FUNCTION ___updatetlocinfo]
; [0000002F BYTES: COLLAPSED FUNCTION _CPtoLCID]
; [00000064 BYTES: COLLAPSED FUNCTION setSBCS(threadmbcinfostruct *)]
; [00000193 BYTES: COLLAPSED FUNCTION setSBUpLow(threadmbcinfostruct *)]
; [000000A4 BYTES: COLLAPSED FUNCTION ___updatetmbcinfo]
; [0000007C BYTES: COLLAPSED FUNCTION getSystemCP(int)]
; [000001E5 BYTES: COLLAPSED FUNCTION __setmbcp_nolock]
; [0000016A BYTES: COLLAPSED FUNCTION __setmbcp]
jmp     short loc_100141D8
; [0000002E BYTES: COLLAPSED CHUNK OF FUNCTION __setmbcp]
; [0000001E BYTES: COLLAPSED FUNCTION ___initmbctable]
align 10h
; [00000020 BYTES: COLLAPSED FUNCTION __global_unwind2]
; [00000045 BYTES: COLLAPSED FUNCTION __unwind_handler]
; [00000084 BYTES: COLLAPSED FUNCTION __local_unwind2]
; [00000023 BYTES: COLLAPSED FUNCTION __abnormal_termination]
; [00000009 BYTES: COLLAPSED FUNCTION __NLG_Notify1]
; [0000001F BYTES: COLLAPSED FUNCTION __NLG_Notify]
; [00000003 BYTES: COLLAPSED FUNCTION __NLG_Call]
align 4
; [00000090 BYTES: COLLAPSED FUNCTION __local_unwind4]
; [00000046 BYTES: COLLAPSED FUNCTION __unwind_handler4]
; [0000001C BYTES: COLLAPSED FUNCTION _seh_longjmp_unwind4(x)]
; [00000017 BYTES: COLLAPSED FUNCTION _EH4_CallFilterFunc(x,x)]
; [00000019 BYTES: COLLAPSED FUNCTION _EH4_TransferToHandler(x,x)]
; [0000001A BYTES: COLLAPSED FUNCTION _EH4_GlobalUnwind(x)]
; [00000017 BYTES: COLLAPSED FUNCTION _EH4_LocalUnwind(x,x,x,x)]
; [00000087 BYTES: COLLAPSED FUNCTION _fastcopy_I]
; [000000E3 BYTES: COLLAPSED FUNCTION __VEC_memcpy]
; [0000001E BYTES: COLLAPSED FUNCTION __initp_misc_winsig]
; [00000037 BYTES: COLLAPSED FUNCTION _siglookup]



sub_1001464A proc near
push    dword_10024DA4
call    __decode_pointer
pop     ecx
retn
sub_1001464A endp

; [000001B0 BYTES: COLLAPSED FUNCTION _raise]


; Attributes: bp-based frame

sub_10014807 proc near

lpProcName= dword ptr -24h
var_14= byte ptr -14h
var_C= byte ptr -0Ch
var_8= byte ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

mov     edi, edi
push    ebp
mov     ebp, esp
sub     esp, 14h
push    ebx
push    esi
push    edi
call    __encoded_null
and     [ebp+var_4], 0
cmp     dword_10024DB0, 0
mov     ebx, eax
jnz     loc_100148B8
push    offset LibFileName ; "USER32.DLL"
call    ds:LoadLibraryA
mov     edi, eax
test    edi, edi
jz      loc_10014969
mov     esi, ds:GetProcAddress
push    offset aMessageboxa ; "MessageBoxA"
push    edi             ; hModule
call    esi ; GetProcAddress
test    eax, eax
jz      loc_10014969
push    eax
call    __encode_pointer
mov     [esp+24h+lpProcName], offset aGetactiv ; "GetActiv"
push    edi             ; hModule
mov     dword_10024DB0, eax
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
mov     [esp+24h+lpProcName], offset aGetlastactivep ; "GetLastActivePopup"
push    edi             ; hModule
mov     dword_10024DB4, eax
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
mov     [esp+24h+lpProcName], offset aGetuserobjecti ; "GetUserObjectInformationA"
push    edi             ; hModule
mov     dword_10024DB8, eax
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
pop     ecx
mov     dword_10024DC0, eax
test    eax, eax
jz      short loc_100148B8
push    offset aGetprocesswind ; "GetProcessWindowStation"
push    edi             ; hModule
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
pop     ecx
mov     dword_10024DBC, eax

loc_100148B8:
mov     eax, dword_10024DBC
cmp     eax, ebx
jz      short loc_10014910
cmp     dword_10024DC0, ebx
jz      short loc_10014910
push    eax
call    __decode_pointer
push    dword_10024DC0
mov     esi, eax
call    __decode_pointer
pop     ecx
pop     ecx
mov     edi, eax
test    esi, esi
jz      short loc_10014910
test    edi, edi
jz      short loc_10014910
call    esi
test    eax, eax
jz      short loc_10014907
lea     ecx, [ebp+var_8]
push    ecx
push    0Ch
lea     ecx, [ebp+var_14]
push    ecx
push    1
push    eax
call    edi
test    eax, eax
jz      short loc_10014907
test    [ebp+var_C], 1
jnz     short loc_10014910

loc_10014907:
or      [ebp+arg_8], 200000h
jmp     short loc_10014949

loc_10014910:
mov     eax, dword_10024DB4
cmp     eax, ebx
jz      short loc_10014949
push    eax
call    __decode_pointer
pop     ecx
test    eax, eax
jz      short loc_10014949
call    eax
mov     [ebp+var_4], eax
test    eax, eax
jz      short loc_10014949
mov     eax, dword_10024DB8
cmp     eax, ebx
jz      short loc_10014949
push    eax
call    __decode_pointer
pop     ecx
test    eax, eax
jz      short loc_10014949
push    [ebp+var_4]
call    eax
mov     [ebp+var_4], eax

loc_10014949:
push    dword_10024DB0
call    __decode_pointer
pop     ecx
test    eax, eax
jz      short loc_10014969
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
push    [ebp+var_4]
call    eax
jmp     short loc_1001496B

loc_10014969:
xor     eax, eax

loc_1001496B:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10014807 endp

; [00000074 BYTES: COLLAPSED FUNCTION _strcat_s]
; [000000B5 BYTES: COLLAPSED FUNCTION _strncpy_s]
; [0000004B BYTES: COLLAPSED FUNCTION __set_error_mode]
; [00000051 BYTES: COLLAPSED FUNCTION __isdigit_l]
; [0000002E BYTES: COLLAPSED FUNCTION _isdigit]
; [00000056 BYTES: COLLAPSED FUNCTION __isxdigit_l]
; [00000030 BYTES: COLLAPSED FUNCTION _isxdigit]
; [00000051 BYTES: COLLAPSED FUNCTION __isspace_l]
; [0000002E BYTES: COLLAPSED FUNCTION _isspace]
; [00000020 BYTES: COLLAPSED FUNCTION __freea]
; [0000012B BYTES: COLLAPSED FUNCTION __filbuf]
; [000000F1 BYTES: COLLAPSED FUNCTION __ungetc_nolock]
; [00000117 BYTES: COLLAPSED FUNCTION __mbtowc_l]
; [0000001A BYTES: COLLAPSED FUNCTION _mbtowc]
; [00000038 BYTES: COLLAPSED FUNCTION __isleadbyte_l]
; [00000013 BYTES: COLLAPSED FUNCTION _isleadbyte]
; [00000021 BYTES: COLLAPSED FUNCTION __initp_misc_cfltcvt_tab]
; [00000032 BYTES: COLLAPSED FUNCTION __fileno]
align 10h
; [00000034 BYTES: COLLAPSED FUNCTION __allmul]
; [00000085 BYTES: COLLAPSED FUNCTION __lseeki64_nolock]
; [00000119 BYTES: COLLAPSED FUNCTION __lseeki64]
; [00000733 BYTES: COLLAPSED FUNCTION __write_nolock]
; [000000DC BYTES: COLLAPSED FUNCTION __write]
; [00000049 BYTES: COLLAPSED FUNCTION __getbuf]
; [00000064 BYTES: COLLAPSED FUNCTION __isatty]



sub_10015B0E proc near
mov     eax, offset off_10023DA0
retn
sub_10015B0E endp

; [000000B1 BYTES: COLLAPSED FUNCTION ___initstdio]
; [00000020 BYTES: COLLAPSED FUNCTION ___endstdio]
; [00000041 BYTES: COLLAPSED FUNCTION __lock_file]
; [00000032 BYTES: COLLAPSED FUNCTION __lock_file2]
; [0000003C BYTES: COLLAPSED FUNCTION __unlock_file]
; [0000002F BYTES: COLLAPSED FUNCTION __unlock_file2]
; [00000016 BYTES: COLLAPSED FUNCTION __get_printf_count_output]
; [0000016C BYTES: COLLAPSED FUNCTION __wctomb_s_l]
; [0000001D BYTES: COLLAPSED FUNCTION _wctomb_s]
; [00000033 BYTES: COLLAPSED FUNCTION _write_char_0]
; [00000026 BYTES: COLLAPSED FUNCTION _write_multi_char_0]
; [0000004D BYTES: COLLAPSED FUNCTION _write_string_0]
; [00000BAE BYTES: COLLAPSED FUNCTION __output_s_l]
align 4
jpt_1001609A dd offset $NORMAL_STATE$28987 ; jump table for switch statement
dd offset loc_100160A1
dd offset loc_100160D3
dd offset loc_1001612F
dd offset loc_1001617B
dd offset loc_10016187
dd offset loc_100161CD
dd offset loc_100162FD
; [0000011E BYTES: COLLAPSED FUNCTION __calloc_impl]
; [0000021B BYTES: COLLAPSED FUNCTION _realloc]
; [0000007B BYTES: COLLAPSED FUNCTION __recalloc]
align 10h
; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
align 10h
; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection]
align 10h
; [000000BD BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]


; Attributes: bp-based frame

sub_10016FDD proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_10024DCC, eax
pop     ebp
retn
sub_10016FDD endp



; Attributes: bp-based frame

sub_10016FEC proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_10024DD0, eax
pop     ebp
retn
sub_10016FEC endp

; [00000060 BYTES: COLLAPSED FUNCTION ___crtInitCritSecAndSpinCount]
; [00000187 BYTES: COLLAPSED FUNCTION __fputwc_nolock]
; [00000053 BYTES: COLLAPSED FUNCTION x_ismbbtype_l(localeinfo_struct *,uint,int,int)]
; [00000018 BYTES: COLLAPSED FUNCTION __ismbblead]
; [00000195 BYTES: COLLAPSED FUNCTION ___free_lc_time]
; [00000045 BYTES: COLLAPSED FUNCTION ___free_lconv_num]
; [0000008E BYTES: COLLAPSED FUNCTION ___free_lconv_mon]
align 10h
; [00000046 BYTES: COLLAPSED FUNCTION _strcspn]
; [000001BA BYTES: COLLAPSED FUNCTION __crtGetStringTypeA_stat(localeinfo_struct *,ulong,char const *,int,ushort *,int,int,int)]
; [00000042 BYTES: COLLAPSED FUNCTION ___crtGetStringTypeA]
align 10h
; [00000040 BYTES: COLLAPSED FUNCTION _strpbrk]
; [000003A5 BYTES: COLLAPSED FUNCTION __crtLCMapStringA_stat(localeinfo_struct *,ulong,ulong,char const *,int,char *,int,int,int)]
; [00000045 BYTES: COLLAPSED FUNCTION ___crtLCMapStringA]
; [00000016 BYTES: COLLAPSED FUNCTION _atol]
; [000000B8 BYTES: COLLAPSED FUNCTION __isctype_l]
align 10h
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_16]
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_8]
; [000005C2 BYTES: COLLAPSED FUNCTION __read_nolock]
; [000000FD BYTES: COLLAPSED FUNCTION __read]
; [00000009 BYTES: COLLAPSED FUNCTION __fptrap]
; [00000086 BYTES: COLLAPSED FUNCTION __free_osfhnd]
; [00000077 BYTES: COLLAPSED FUNCTION __get_osfhandle]
; [000000A0 BYTES: COLLAPSED FUNCTION ___lock_fhandle]
; [00000027 BYTES: COLLAPSED FUNCTION __unlock_fhandle]
; [000000C5 BYTES: COLLAPSED FUNCTION __putwch_nolock]
; [0000009F BYTES: COLLAPSED FUNCTION __fcloseall]
; [00000068 BYTES: COLLAPSED FUNCTION __flush]
; [00000048 BYTES: COLLAPSED FUNCTION __fflush_nolock]
; [000000DA BYTES: COLLAPSED FUNCTION _flsall]



sub_100187B6 proc near
push    1
call    _flsall
pop     ecx
retn
sub_100187B6 endp

; [0000022F BYTES: COLLAPSED FUNCTION strtoxl(localeinfo_struct *,char const *,char const * *,int,int)]
; [0000002B BYTES: COLLAPSED FUNCTION _strtol]
; [00000174 BYTES: COLLAPSED FUNCTION __flswbuf]
; [00000049 BYTES: COLLAPSED FUNCTION ___ansicp]
; [000001B4 BYTES: COLLAPSED FUNCTION ___convertcp]
; [0000001F BYTES: COLLAPSED FUNCTION ___initconout]
; [0000002D BYTES: COLLAPSED FUNCTION ___termcon]
; [00000077 BYTES: COLLAPSED FUNCTION __fclose_nolock]
; [0000007C BYTES: COLLAPSED FUNCTION _fclose]
; [000000E1 BYTES: COLLAPSED FUNCTION __commit]
align 10h
; [00000061 BYTES: COLLAPSED FUNCTION ___ascii_strnicmp]
; [0000009C BYTES: COLLAPSED FUNCTION __close_nolock]
; [000000CD BYTES: COLLAPSED FUNCTION __close]
; [00000031 BYTES: COLLAPSED FUNCTION __freebuf]
align 10h
; [00000005 BYTES: COLLAPSED FUNCTION found_bx]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strchr]
; [000000B8 BYTES: COLLAPSED FUNCTION ___from_strstr_to_strchr]
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
; START OF FUNCTION CHUNK FOR sub_10001065
;   ADDITIONAL PARENT FUNCTION sub_10001097
;   ADDITIONAL PARENT FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)

loc_10019284:
; __unwind { // loc_1001928C
;   cleanup() // owned by 1000107F
;   cleanup() // owned by 1000133F
mov     ecx, [ebp+var_10]
jmp     sub_1000B27B

loc_1001928C:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FC78
jmp     ___CxxFrameHandler3
; } // starts at 10019284
; END OF FUNCTION CHUNK FOR sub_10001065
; START OF FUNCTION CHUNK FOR sub_100011C0

loc_100192A7:
; __unwind { // loc_100192AF
;   cleanup() // owned by 100011D7
mov     ecx, [ebp+var_10]
jmp     loc_1000119C

loc_100192AF:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FCA4
jmp     ___CxxFrameHandler3
; } // starts at 100192A7
; END OF FUNCTION CHUNK FOR sub_100011C0
; START OF FUNCTION CHUNK FOR sub_100016C6

loc_100192CA:
; __unwind { // loc_100192CA
mov     edx, [esp-4+SourceSize]
lea     eax, [edx+0Ch]
mov     ecx, [edx-20h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FD5C
jmp     ___CxxFrameHandler3
; } // starts at 100192CA
; END OF FUNCTION CHUNK FOR sub_100016C6
; START OF FUNCTION CHUNK FOR sub_100017B6

loc_100192E5:
; __unwind { // loc_100192E5
mov     edx, [esp-4+N]
lea     eax, [edx+0Ch]
mov     ecx, [edx-20h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FDE8
jmp     ___CxxFrameHandler3
; } // starts at 100192E5
; END OF FUNCTION CHUNK FOR sub_100017B6
; START OF FUNCTION CHUNK FOR sub_10001F43

loc_10019300:
; __unwind { // loc_10019319
;   cleanup() // owned by 10001F54
;   cleanup() // owned by 10001F68
mov     eax, [ebp+var_18]
and     eax, 1
jz      locret_10019318
and     [ebp+var_18], 0FFFFFFFEh
mov     ecx, [ebp+var_10]
jmp     loc_100018C0

locret_10019318:
retn

loc_10019319:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-24h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FE3C
jmp     ___CxxFrameHandler3
; } // starts at 10019300
; END OF FUNCTION CHUNK FOR sub_10001F43
; START OF FUNCTION CHUNK FOR sub_10001FD8

loc_10019334:
; __unwind { // loc_1001934D
;   cleanup() // owned by 10001FE9
;   cleanup() // owned by 10001FFD
mov     eax, [ebp+var_18]
and     eax, 1
jz      locret_1001934C
and     [ebp+var_18], 0FFFFFFFEh
mov     ecx, [ebp+var_14]
jmp     loc_100018C0

locret_1001934C:
retn

loc_1001934D:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-24h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FE68
jmp     ___CxxFrameHandler3
; } // starts at 10019334
; END OF FUNCTION CHUNK FOR sub_10001FD8
; START OF FUNCTION CHUNK FOR sub_1000206C

loc_10019368:
; __unwind { // loc_10019381
;   cleanup() // owned by 1000207A
;   cleanup() // owned by 1000208E
mov     eax, [ebp+var_1C]
and     eax, 1
jz      locret_10019380
and     [ebp+var_1C], 0FFFFFFFEh
mov     ecx, [ebp+var_18]
jmp     loc_100018C0

locret_10019380:
retn

loc_10019381:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-20h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FE94
jmp     ___CxxFrameHandler3
; } // starts at 10019368
; END OF FUNCTION CHUNK FOR sub_1000206C
; START OF FUNCTION CHUNK FOR sub_100021FE

loc_1001939C:
; __unwind { // loc_100193AF
;   cleanup() // owned by 1000221D
mov     ecx, [ebp+var_58]
jmp     sub_1000B27B

loc_100193A4:
;   cleanup() // owned by 10002231
;   cleanup() // owned by 10002235
;   cleanup() // owned by 100022CE
;   cleanup() // owned by 100022E7
mov     ecx, [ebp+var_58]
add     ecx, 0Ch
jmp     loc_100018DF

loc_100193AF:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-60h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-8]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FEFC
jmp     ___CxxFrameHandler3
; } // starts at 1001939C
; END OF FUNCTION CHUNK FOR sub_100021FE
; START OF FUNCTION CHUNK FOR sub_10002319

loc_100193D4:
; __unwind { // loc_100193E7
;   cleanup() // owned by 10002330
mov     ecx, [ebp+var_10]
jmp     sub_1000B27B

loc_100193DC:
mov     ecx, [ebp+var_10]
add     ecx, 0Ch
jmp     loc_100018DF

loc_100193E7:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FF30
jmp     ___CxxFrameHandler3
; } // starts at 100193D4
; END OF FUNCTION CHUNK FOR sub_10002319
; START OF FUNCTION CHUNK FOR sub_1000236D

loc_10019402:
; __unwind { // loc_1001940A
;   cleanup() // owned by 10002384
mov     ecx, [ebp+var_18]
jmp     loc_1000119C

loc_1001940A:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FF6C
jmp     ___CxxFrameHandler3
; } // starts at 10019402
; END OF FUNCTION CHUNK FOR sub_1000236D
; START OF FUNCTION CHUNK FOR sub_100023FC

loc_10019425:
; __unwind { // loc_1001944E
;   cleanup() // owned by 1000240A
;   cleanup() // owned by 10002421
;   cleanup() // owned by 10002469
mov     eax, [ebp+var_18]
and     eax, 1
jz      locret_1001943D
and     [ebp+var_18], 0FFFFFFFEh
mov     ecx, [ebp+var_14]
jmp     loc_100018C0

locret_1001943D:
retn

loc_1001943E:
;   cleanup() // owned by 1000243C
;   cleanup() // owned by 1000245C
lea     ecx, [ebp+var_50]
jmp     loc_100018C0

loc_10019446:
;   cleanup() // owned by 1000244C
lea     ecx, [ebp+var_34]
jmp     loc_100018C0

loc_1001944E:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-54h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FFD0
jmp     ___CxxFrameHandler3
; } // starts at 10019425
; END OF FUNCTION CHUNK FOR sub_100023FC
; START OF FUNCTION CHUNK FOR sub_1000248D

loc_10019469:
; __unwind { // loc_10019482
;   cleanup() // owned by 1000249B
;   cleanup() // owned by 100024B1
mov     eax, [ebp+var_14]
and     eax, 1
jz      locret_10019481
and     [ebp+var_14], 0FFFFFFFEh
mov     ecx, [ebp+var_18]
jmp     loc_100018C0

locret_10019481:
retn

loc_10019482:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-1Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001FFFC
jmp     ___CxxFrameHandler3
; } // starts at 10019469
; END OF FUNCTION CHUNK FOR sub_1000248D
; START OF FUNCTION CHUNK FOR sub_1000250E

loc_1001949D:
; __unwind { // loc_100194B0
;   cleanup() // owned by 10002524
mov     ecx, [ebp+var_14]
jmp     sub_1000B27B

loc_100194A5:
;   cleanup() // owned by 10002536
;   cleanup() // owned by 1000253A
;   cleanup() // owned by 10002548
;   cleanup() // owned by 10002561
mov     ecx, [ebp+var_14]
add     ecx, 0Ch
jmp     loc_100018DF

loc_100194B0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020064
jmp     ___CxxFrameHandler3
; } // starts at 1001949D
; END OF FUNCTION CHUNK FOR sub_1000250E
; START OF FUNCTION CHUNK FOR sub_1000257F

loc_100194CB:
; __unwind { // loc_1001950C
;   cleanup() // owned by 1000258D
;   cleanup() // owned by 100025A4
;   cleanup() // owned by 10002629
;   cleanup() // owned by 1000266F
mov     eax, [ebp+var_38]
and     eax, 1
jz      locret_100194E3
and     [ebp+var_38], 0FFFFFFFEh
mov     ecx, [ebp+var_34]
jmp     loc_100018C0

locret_100194E3:
retn

loc_100194E4:
lea     ecx, [ebp+var_2C]
jmp     loc_100018C0

loc_100194EC:
lea     ecx, [ebp+var_70]
jmp     loc_100018C0

loc_100194F4:
lea     ecx, [ebp+var_54]
jmp     loc_100018C0

loc_100194FC:
;   cleanup() // owned by 100025C6
;   cleanup() // owned by 100025EC
;   cleanup() // owned by 100025FD
;   cleanup() // owned by 1000260D
;   cleanup() // owned by 1000261B
;   cleanup() // owned by 1000263D
;   cleanup() // owned by 10002661
lea     ecx, [ebp+var_54]
jmp     loc_100018C0

loc_10019504:
;   cleanup() // owned by 10002651
lea     ecx, [ebp+var_70]
jmp     loc_100018C0

loc_1001950C:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-74h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020088
jmp     ___CxxFrameHandler3
; } // starts at 100194CB
; END OF FUNCTION CHUNK FOR sub_1000257F
; START OF FUNCTION CHUNK FOR sub_1000276F
;   ADDITIONAL PARENT FUNCTION sub_1000511D

loc_10019531:
; __unwind { // loc_1001953C
;   cleanup() // owned by 1000513C
mov     ecx, [ebp+var_10]
add     ecx, 8
jmp     sub_100011C0

loc_1001953C:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100200E4
jmp     ___CxxFrameHandler3
; } // starts at 10019531
; END OF FUNCTION CHUNK FOR sub_1000276F
; START OF FUNCTION CHUNK FOR sub_1000292C
;   ADDITIONAL PARENT FUNCTION sub_10005A58

loc_10019557:
; __unwind { // loc_1001955F
;   cleanup() // owned by 10005A6E
mov     ecx, [ebp+var_10]
jmp     sub_1000276F

loc_1001955F:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020110
jmp     ___CxxFrameHandler3
; } // starts at 10019557
; END OF FUNCTION CHUNK FOR sub_1000292C
; START OF FUNCTION CHUNK FOR sub_10003360

loc_1001957A:           ; this
; __unwind { // loc_10019582
;   cleanup() // owned by 10003471
lea     ecx, [ebp+var_14]
jmp     ??1CSecurity@@UAE@XZ ; CSecurity::~CSecurity(void)

loc_10019582:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1002013C
jmp     ___CxxFrameHandler3
; } // starts at 1001957A
; END OF FUNCTION CHUNK FOR sub_10003360
; START OF FUNCTION CHUNK FOR sub_100040F0

loc_1001959D:
; __unwind { // loc_100195A5
;   cleanup() // owned by 10004235
lea     ecx, [ebp+var_4C]
jmp     loc_100018DF

loc_100195A5:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-50h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020168
jmp     ___CxxFrameHandler3
; } // starts at 1001959D
; END OF FUNCTION CHUNK FOR sub_100040F0
; START OF FUNCTION CHUNK FOR sub_100043D6
;   ADDITIONAL PARENT FUNCTION sub_10004584

loc_100195C0:
; __unwind { // loc_100195C8
;   cleanup() // owned by 10004515
;   cleanup() // owned by 100046C3
lea     ecx, [ebp+var_2C]
jmp     loc_100018C0

loc_100195C8:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-34h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020194
jmp     ___CxxFrameHandler3
; } // starts at 100195C0
; END OF FUNCTION CHUNK FOR sub_100043D6
; START OF FUNCTION CHUNK FOR sub_10004730
;   ADDITIONAL PARENT FUNCTION sub_10004832

loc_100195ED:
; __unwind { // loc_100195FD
lea     ecx, [ebp+var_4C]
jmp     loc_100018C0

loc_100195F5:
;   cleanup() // owned by 100047CF
;   cleanup() // owned by 100047E3
;   cleanup() // owned by 100048D1
;   cleanup() // owned by 100048E5
lea     ecx, [ebp+var_2C]
jmp     loc_100018C0

loc_100195FD:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-50h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100201D0
jmp     ___CxxFrameHandler3
; } // starts at 100195ED
; END OF FUNCTION CHUNK FOR sub_10004730
; START OF FUNCTION CHUNK FOR sub_10004D8E
;   ADDITIONAL PARENT FUNCTION sub_10004EFB
;   ADDITIONAL PARENT FUNCTION sub_10005CFC

loc_10019622:
; __unwind { // loc_10019632
;   cleanup() // owned by 10004E24
;   cleanup() // owned by 10004E9B
;   cleanup() // owned by 10004F91
;   cleanup() // owned by 10005008
;   cleanup() // owned by 10005D93
;   cleanup() // owned by 10005DD8
lea     ecx, [ebp+var_2C]
jmp     loc_100018C0

loc_1001962A:
;   cleanup() // owned by 10004E8D
;   cleanup() // owned by 10004FFA
;   cleanup() // owned by 10005DC7
lea     ecx, [ebp+var_54]
jmp     loc_100018C0

loc_10019632:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-58h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020204
jmp     ___CxxFrameHandler3
; } // starts at 10019622
; END OF FUNCTION CHUNK FOR sub_10004D8E
; START OF FUNCTION CHUNK FOR sub_100051DB

loc_10019657:
; __unwind { // loc_10019670
;   cleanup() // owned by 100051E7
;   cleanup() // owned by 10005271
mov     eax, [ebp+var_20]
and     eax, 1
jz      locret_1001966F
and     [ebp+var_20], 0FFFFFFFEh
mov     ecx, [ebp+var_1C]
jmp     loc_100018DF

locret_1001966F:
retn

loc_10019670:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-4Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1002026C
jmp     ___CxxFrameHandler3
; } // starts at 10019657
; END OF FUNCTION CHUNK FOR sub_100051DB
; START OF FUNCTION CHUNK FOR sub_10005292

loc_1001968B:
; __unwind { // loc_100196B4
;   cleanup() // owned by 100052B1
;   cleanup() // owned by 100052DC
lea     ecx, [ebp+var_2C]
jmp     loc_100018DF

loc_10019693:
;   cleanup() // owned by 100052CB
lea     ecx, [ebp+arg_4]
jmp     loc_100027F0

loc_1001969B:
;   cleanup() // owned by 100052EE
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_100196B3
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+arg_0]
jmp     loc_100018C0

locret_100196B3:
retn

loc_100196B4:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-30h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100202A8
jmp     ___CxxFrameHandler3
; } // starts at 1001968B
; END OF FUNCTION CHUNK FOR sub_10005292
; START OF FUNCTION CHUNK FOR sub_1000568E

loc_100196CF:
; __unwind { // loc_100196D7
;   cleanup() // owned by 10005741
lea     ecx, [ebp+var_2C]
jmp     loc_100018DF

loc_100196D7:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-3Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100202D4
jmp     ___CxxFrameHandler3
; } // starts at 100196CF
; END OF FUNCTION CHUNK FOR sub_1000568E
; START OF FUNCTION CHUNK FOR sub_1000603A
;   ADDITIONAL PARENT FUNCTION sub_100050AC
;   ADDITIONAL PARENT FUNCTION sub_100050E3

loc_100196F2:
; __unwind { // loc_100196FA
;   cleanup() // owned by 100050CB
;   cleanup() // owned by 10006053
mov     ecx, [ebp+var_10]
jmp     sub_10002319

loc_100196FA:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020300
jmp     ___CxxFrameHandler3
; } // starts at 100196F2
; END OF FUNCTION CHUNK FOR sub_1000603A
; START OF FUNCTION CHUNK FOR sub_100067FC
;   ADDITIONAL PARENT FUNCTION sub_10006848

loc_10019715:
; __unwind { // loc_1001971D
;   cleanup() // owned by 10006813
;   cleanup() // owned by 1000685F
mov     ecx, [ebp+var_10]
jmp     sub_10006447

loc_1001971D:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1002032C
jmp     ___CxxFrameHandler3
; } // starts at 10019715
; END OF FUNCTION CHUNK FOR sub_100067FC
; [00000025 BYTES: COLLAPSED CHUNK OF FUNCTION sub_10001357]
; START OF FUNCTION CHUNK FOR JNI_OnLoad(x,x)

loc_1001975D:
; __unwind { // loc_1001979D
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019765:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_1001976D:
;   cleanup() // owned by 100069CC
;   cleanup() // owned by 100069E1
;   cleanup() // owned by 10006A04
;   cleanup() // owned by 10006AED
;   cleanup() // owned by 10006AFE
;   cleanup() // owned by 10006B3D
;   cleanup() // owned by 10006B4D
;   cleanup() // owned by 10006B68
;   cleanup() // owned by 10006B79
;   cleanup() // owned by 10006BB8
;   cleanup() // owned by 10006BC8
;   cleanup() // owned by 10006C1F
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019775:
;   cleanup() // owned by 10006A29
;   cleanup() // owned by 10006AC3
;   cleanup() // owned by 10006AD8
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_1001977D:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_10019785:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_1001978D:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_10019795:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_1001979D:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020390
jmp     ___CxxFrameHandler3
; } // starts at 1001975D
; END OF FUNCTION CHUNK FOR JNI_OnLoad(x,x)
; START OF FUNCTION CHUNK FOR JNI_OnUnload(x,x)

loc_100197C2:
; __unwind { // loc_10019802
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100197CA:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100197D2:
;   cleanup() // owned by 10006C99
;   cleanup() // owned by 10006CAE
;   cleanup() // owned by 10006CD1
;   cleanup() // owned by 10006CEE
;   cleanup() // owned by 10006D42
;   cleanup() // owned by 10006D53
;   cleanup() // owned by 10006D92
;   cleanup() // owned by 10006DA2
;   cleanup() // owned by 10006DBD
;   cleanup() // owned by 10006DCE
;   cleanup() // owned by 10006E0D
;   cleanup() // owned by 10006E1D
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100197DA:
;   cleanup() // owned by 10006D18
;   cleanup() // owned by 10006D2D
;   cleanup() // owned by 10006E74
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100197E2:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_100197EA:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100197F2:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_100197FA:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019802:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-3Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020448
jmp     ___CxxFrameHandler3
; } // starts at 100197C2
; END OF FUNCTION CHUNK FOR JNI_OnUnload(x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance(x,x,x)

loc_10019827:
; __unwind { // loc_10019877
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_1001982F:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019837:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_1001983F:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019847:
;   cleanup() // owned by 10006EED
;   cleanup() // owned by 10006F02
;   cleanup() // owned by 10006F25
;   cleanup() // owned by 10006F5D
;   cleanup() // owned by 10006F89
;   cleanup() // owned by 10006F98
;   cleanup() // owned by 10006FF9
;   cleanup() // owned by 10007028
;   cleanup() // owned by 10007039
;   cleanup() // owned by 1000707B
;   cleanup() // owned by 1000708B
;   cleanup() // owned by 100070A6
;   cleanup() // owned by 100070B7
;   cleanup() // owned by 100070F9
;   cleanup() // owned by 10007109
;   cleanup() // owned by 10007166
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_1001984F:
;   cleanup() // owned by 10006F49
;   cleanup() // owned by 10006FCA
;   cleanup() // owned by 10007012
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019857:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_100050E3

loc_1001985F:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019867:
lea     ecx, [ebp+68h+var_64]
jmp     sub_10002319

loc_1001986F:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019877:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-40h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020500
jmp     ___CxxFrameHandler3
; } // starts at 10019827
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance(x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance(x,x,x)

loc_1001989C:
; __unwind { // loc_100198E4
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100198A4:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100198AC:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100198B4:
;   cleanup() // owned by 100071E3
;   cleanup() // owned by 100071F8
;   cleanup() // owned by 1000721E
;   cleanup() // owned by 10007257
;   cleanup() // owned by 100072C4
;   cleanup() // owned by 100072F3
;   cleanup() // owned by 10007304
;   cleanup() // owned by 10007346
;   cleanup() // owned by 10007356
;   cleanup() // owned by 10007371
;   cleanup() // owned by 10007382
;   cleanup() // owned by 100073C4
;   cleanup() // owned by 100073D4
;   cleanup() // owned by 10007431
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100198BC:
;   cleanup() // owned by 10007243
;   cleanup() // owned by 10007295
;   cleanup() // owned by 100072DD
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100198C4:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_100050E3

loc_100198CC:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100198D4:
lea     ecx, [ebp+68h+var_64]
jmp     sub_10002319

loc_100198DC:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100198E4:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-40h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100205C8
jmp     ___CxxFrameHandler3
; } // starts at 1001989C
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance(x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize(x,x,x,x)

loc_10019909:
; __unwind { // loc_10019969
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019911:
lea     ecx, [ebp+68h+var_C8]
jmp     loc_100018DF

loc_10019919:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019921:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019929:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019931:
lea     ecx, [ebp+68h+var_C8]
jmp     loc_100018DF

loc_10019939:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_10019941:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019949:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_10019951:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019959:
;   cleanup() // owned by 100074B7
;   cleanup() // owned by 100074CC
;   cleanup() // owned by 100074F3
;   cleanup() // owned by 1000751A
;   cleanup() // owned by 10007534
;   cleanup() // owned by 1000754D
;   cleanup() // owned by 1000756C
;   cleanup() // owned by 10007596
;   cleanup() // owned by 100075D2
;   cleanup() // owned by 100075E9
;   cleanup() // owned by 10007672
;   cleanup() // owned by 100076A0
;   cleanup() // owned by 100076B8
;   cleanup() // owned by 100076C9
;   cleanup() // owned by 1000770D
;   cleanup() // owned by 1000771C
;   cleanup() // owned by 10007732
;   cleanup() // owned by 10007743
;   cleanup() // owned by 10007787
;   cleanup() // owned by 10007796
;   cleanup() // owned by 100077F6
;   cleanup() // owned by 10007831
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019961:
;   cleanup() // owned by 1000780F
lea     ecx, [ebp+68h+var_C8]
jmp     loc_100018DF

loc_10019969:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-64h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020688
jmp     ___CxxFrameHandler3
; } // starts at 10019909
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize(x,x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties(x,x,x,x)

loc_1001998E:
; __unwind { // loc_100199DE
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019996:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_1001999E:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100199A6:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100199AE:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_100050E3

loc_100199B6:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100199BE:
lea     ecx, [ebp+68h+var_64]
jmp     sub_10002319

loc_100199C6:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100199CE:
;   cleanup() // owned by 100078B5
;   cleanup() // owned by 100078CA
;   cleanup() // owned by 100078F0
;   cleanup() // owned by 10007929
;   cleanup() // owned by 10007942
;   cleanup() // owned by 10007958
;   cleanup() // owned by 100079F9
;   cleanup() // owned by 10007A11
;   cleanup() // owned by 10007A22
;   cleanup() // owned by 10007A66
;   cleanup() // owned by 10007A75
;   cleanup() // owned by 10007A8B
;   cleanup() // owned by 10007A9C
;   cleanup() // owned by 10007AE0
;   cleanup() // owned by 10007AEF
;   cleanup() // owned by 10007B4A
;   cleanup() // owned by 10007B89
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_100199D6:
;   cleanup() // owned by 10007913
;   cleanup() // owned by 10007B63
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_100199DE:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-50h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020760
jmp     ___CxxFrameHandler3
; } // starts at 1001998E
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties(x,x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization(x,x,x)

loc_10019A03:
; __unwind { // loc_10019A5B
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A0B:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019A13:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019A1B:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A23:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A2B:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_10019A33:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A3B:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_10019A43:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019A4B:
;   cleanup() // owned by 10007C07
;   cleanup() // owned by 10007C1C
;   cleanup() // owned by 10007C42
;   cleanup() // owned by 10007C7B
;   cleanup() // owned by 10007C94
;   cleanup() // owned by 10007CB3
;   cleanup() // owned by 10007CF2
;   cleanup() // owned by 10007D09
;   cleanup() // owned by 10007D9C
;   cleanup() // owned by 10007DB4
;   cleanup() // owned by 10007DC5
;   cleanup() // owned by 10007E09
;   cleanup() // owned by 10007E18
;   cleanup() // owned by 10007E2E
;   cleanup() // owned by 10007E3F
;   cleanup() // owned by 10007E83
;   cleanup() // owned by 10007E92
;   cleanup() // owned by 10007EED
;   cleanup() // owned by 10007F2C
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A53:
;   cleanup() // owned by 10007C65
;   cleanup() // owned by 10007F06
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019A5B:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020828
jmp     ___CxxFrameHandler3
; } // starts at 10019A03
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization(x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData(x,x,x,x)

loc_10019A80:
; __unwind { // loc_10019AD0
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019A88:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A90:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019A98:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019AA0:
;   cleanup() // owned by 10007FAD
;   cleanup() // owned by 10007FC2
;   cleanup() // owned by 10007FE8
;   cleanup() // owned by 10008021
;   cleanup() // owned by 1000803A
;   cleanup() // owned by 10008059
;   cleanup() // owned by 1000810D
;   cleanup() // owned by 1000813C
;   cleanup() // owned by 1000814D
;   cleanup() // owned by 1000818F
;   cleanup() // owned by 1000819F
;   cleanup() // owned by 100081BA
;   cleanup() // owned by 100081CB
;   cleanup() // owned by 1000820D
;   cleanup() // owned by 1000821D
;   cleanup() // owned by 1000827A
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019AA8:
;   cleanup() // owned by 1000800D
;   cleanup() // owned by 100080DE
;   cleanup() // owned by 10008126
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019AB0:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_10019AB8:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019AC0:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_10019AC8:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019AD0:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100208F8
jmp     ___CxxFrameHandler3
; } // starts at 10019A80
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData(x,x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData(x,x,x)

loc_10019AF5:
; __unwind { // loc_10019B45
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019AFD:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B05:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B0D:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019B15:
;   cleanup() // owned by 100082F7
;   cleanup() // owned by 1000830C
;   cleanup() // owned by 10008332
;   cleanup() // owned by 1000836A
;   cleanup() // owned by 10008383
;   cleanup() // owned by 100083A4
;   cleanup() // owned by 1000846F
;   cleanup() // owned by 1000849E
;   cleanup() // owned by 100084AF
;   cleanup() // owned by 100084F1
;   cleanup() // owned by 10008501
;   cleanup() // owned by 1000851C
;   cleanup() // owned by 1000852D
;   cleanup() // owned by 1000856F
;   cleanup() // owned by 1000857F
;   cleanup() // owned by 100085DC
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019B1D:
;   cleanup() // owned by 10008356
;   cleanup() // owned by 10008441
;   cleanup() // owned by 10008488
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B25:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_10019B2D:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019B35:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_10019B3D:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B45:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100209C0
jmp     ___CxxFrameHandler3
; } // starts at 10019AF5
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData(x,x,x)
; START OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU(x,x,x,x)

loc_10019B6A:
; __unwind { // loc_10019BC2
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B72:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019B7A:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019B82:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B8A:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B92:
;   cleanup() // owned by 1000865F
;   cleanup() // owned by 10008674
;   cleanup() // owned by 1000869A
;   cleanup() // owned by 100086D2
;   cleanup() // owned by 100086EB
;   cleanup() // owned by 1000870C
;   cleanup() // owned by 10008736
;   cleanup() // owned by 100087C3
;   cleanup() // owned by 10008822
;   cleanup() // owned by 10008851
;   cleanup() // owned by 10008862
;   cleanup() // owned by 100088A4
;   cleanup() // owned by 100088B4
;   cleanup() // owned by 100088CF
;   cleanup() // owned by 100088E0
;   cleanup() // owned by 10008922
;   cleanup() // owned by 10008932
;   cleanup() // owned by 1000898F
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019B9A:
;   cleanup() // owned by 100086BE
;   cleanup() // owned by 100087F4
;   cleanup() // owned by 1000883B
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019BA2:
lea     ecx, [ebp+68h+var_64]
jmp     sub_100050E3

loc_10019BAA:
lea     ecx, [ebp+68h+var_20]
jmp     loc_100018DF

loc_10019BB2:
lea     ecx, [ebp+68h+var_A0]
jmp     sub_10002319

loc_10019BBA:
lea     ecx, [ebp+68h+var_3C]
jmp     loc_100018DF

loc_10019BC2:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+70h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020A88
jmp     ___CxxFrameHandler3
; } // starts at 10019B6A
; END OF FUNCTION CHUNK FOR Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU(x,x,x,x)
; START OF FUNCTION CHUNK FOR sub_100089EB
;   ADDITIONAL PARENT FUNCTION sub_10009637

loc_10019BE7:
; __unwind { // loc_10019C08
;   cleanup() // owned by 10008AAE
;   cleanup() // owned by 10009694
lea     ecx, [ebp+var_18]
jmp     ??1SchedulerPolicy@Concurrency@@QAE@XZ ; Concurrency::SchedulerPolicy::~SchedulerPolicy(void)

loc_10019BEF:
;   cleanup() // owned by 10008B33
;   cleanup() // owned by 10009713
mov     eax, [ebp+var_14]
and     eax, 1
jz      locret_10019C07
and     [ebp+var_14], 0FFFFFFFEh
mov     ecx, [ebp+arg_0]
jmp     loc_100018DF

locret_10019C07:
retn

loc_10019C08:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020B54
jmp     ___CxxFrameHandler3
; } // starts at 10019BE7
; END OF FUNCTION CHUNK FOR sub_100089EB
; START OF FUNCTION CHUNK FOR sub_10008B47

loc_10019C23:
; __unwind { // loc_10019C43
lea     ecx, [ebp+var_4C]
jmp     loc_100018DF

loc_10019C2B:
;   cleanup() // owned by 10008B74
;   cleanup() // owned by 10008B86
;   cleanup() // owned by 10008BFE
lea     ecx, [ebp+var_2C]
jmp     loc_100018DF

loc_10019C33:
;   cleanup() // owned by 10008BC9
;   cleanup() // owned by 10008BEF
lea     ecx, [ebp+var_68]
jmp     loc_100018DF

loc_10019C3B:
;   cleanup() // owned by 10008BDF
lea     ecx, [ebp+var_4C]
jmp     loc_100018DF

loc_10019C43:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-6Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020B78
jmp     ___CxxFrameHandler3
; } // starts at 10019C23
; END OF FUNCTION CHUNK FOR sub_10008B47
; START OF FUNCTION CHUNK FOR sub_100091E6
;   ADDITIONAL PARENT FUNCTION sub_10009211

loc_10019C68:
; __unwind { // loc_10019C70
;   cleanup() // owned by 100091FD
mov     ecx, [ebp+var_10]
jmp     sub_100091C2

loc_10019C70:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020BCC
jmp     ___CxxFrameHandler3
; } // starts at 10019C68
; END OF FUNCTION CHUNK FOR sub_100091E6
; START OF FUNCTION CHUNK FOR sub_10009276
;   ADDITIONAL PARENT FUNCTION sub_10009397

loc_10019C8B:
; __unwind { // loc_10019C93
;   cleanup() // owned by 100093AE
mov     ecx, [ebp+var_10]
jmp     sub_10009252

loc_10019C93:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020BF8
jmp     ___CxxFrameHandler3
; } // starts at 10019C8B
; END OF FUNCTION CHUNK FOR sub_10009276
; START OF FUNCTION CHUNK FOR sub_100093DE
;   ADDITIONAL PARENT FUNCTION sub_10009490

loc_10019CAE:
; __unwind { // loc_10019CED
;   cleanup() // owned by 100093F5
;   cleanup() // owned by 10009510
mov     ecx, [ebp+var_10]
jmp     sub_1000919E

loc_10019CB6:
;   cleanup() // owned by 10009403
;   cleanup() // owned by 10009505
mov     ecx, [ebp+var_10]
add     ecx, 4
jmp     sub_10009211

loc_10019CC1:
;   cleanup() // owned by 10009411
;   cleanup() // owned by 100094F5
mov     ecx, [ebp+var_10]
add     ecx, 8
jmp     sub_10009276

loc_10019CCC:
;   cleanup() // owned by 1000943D
;   cleanup() // owned by 100094E5
mov     ecx, [ebp+var_10]
add     ecx, 14h
jmp     loc_100018DF

loc_10019CD7:
;   cleanup() // owned by 10009449
;   cleanup() // owned by 100094D5
mov     ecx, [ebp+var_10]
add     ecx, 30h ; '0'
jmp     loc_100018DF

loc_10019CE2:
;   cleanup() // owned by 10009455
;   cleanup() // owned by 100094C7
mov     ecx, [ebp+var_10]
add     ecx, 4Ch ; 'L'
jmp     loc_100018DF

loc_10019CED:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020C1C
jmp     ___CxxFrameHandler3
; } // starts at 10019CAE
; END OF FUNCTION CHUNK FOR sub_100093DE
; START OF FUNCTION CHUNK FOR sub_10009547
;   ADDITIONAL PARENT FUNCTION sub_10009579

loc_10019D08:
; __unwind { // loc_10019D21
;   cleanup() // owned by 10009563
;   cleanup() // owned by 10009595
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_10019D20
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+arg_0]
jmp     loc_100018DF

locret_10019D20:
retn

loc_10019D21:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020C78
jmp     ___CxxFrameHandler3
; } // starts at 10019D08
; END OF FUNCTION CHUNK FOR sub_10009547
; START OF FUNCTION CHUNK FOR sub_10009727

loc_10019D3C:
; __unwind { // loc_10019D65
;   cleanup() // owned by 100097A4
;   cleanup() // owned by 1000987C
lea     ecx, [ebp+628h+var_628]
jmp     loc_100018DF

loc_10019D44:
;   cleanup() // owned by 10009862
lea     ecx, [ebp+628h+var_660]
jmp     loc_100018DF

loc_10019D4C:
;   cleanup() // owned by 1000988A
mov     eax, [ebp+628h+var_644]
and     eax, 1
jz      locret_10019D64
and     [ebp+628h+var_644], 0FFFFFFFEh
mov     ecx, [ebp+628h+var_640]
jmp     loc_100018DF

locret_10019D64:
retn

loc_10019D65:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-48h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+630h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020CB4
jmp     ___CxxFrameHandler3
; } // starts at 10019D3C
; END OF FUNCTION CHUNK FOR sub_10009727
; START OF FUNCTION CHUNK FOR sub_100098BF

loc_10019D8D:
; __unwind { // loc_10019DBD
lea     ecx, [ebp+78h+var_BC]
jmp     loc_100018DF

loc_10019D95:
lea     ecx, [ebp+78h+var_78]
jmp     loc_100018DF

loc_10019D9D:
lea     ecx, [ebp+78h+var_A0]
jmp     loc_100018DF

loc_10019DA5:
lea     ecx, [ebp+78h+var_5C]
jmp     loc_100018DF

loc_10019DAD:
;   cleanup() // owned by 100098EF
;   cleanup() // owned by 10009900
;   cleanup() // owned by 10009912
;   cleanup() // owned by 10009923
;   cleanup() // owned by 10009939
;   cleanup() // owned by 10009947
;   cleanup() // owned by 10009955
;   cleanup() // owned by 10009963
;   cleanup() // owned by 100099FB
lea     ecx, [ebp+78h+var_3C]
jmp     loc_100018DF

loc_10019DB5:
;   cleanup() // owned by 1000997E
lea     ecx, [ebp+78h+var_20]
jmp     loc_100018DF

loc_10019DBD:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-48h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+80h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020CD8
jmp     ___CxxFrameHandler3
; } // starts at 10019D8D
; END OF FUNCTION CHUNK FOR sub_100098BF
; START OF FUNCTION CHUNK FOR sub_100095E4
;   ADDITIONAL PARENT FUNCTION sub_10006942
;   ADDITIONAL PARENT FUNCTION sub_10009A71

loc_10019DE5:
; __unwind { // loc_10019E06
;   cleanup() // owned by 10006960
;   cleanup() // owned by 10009602
;   cleanup() // owned by 10009A97
lea     ecx, [ebp+var_2C]
jmp     loc_100018DF

loc_10019DED:
;   cleanup() // owned by 10006979
;   cleanup() // owned by 1000961F
;   cleanup() // owned by 10009AAB
;   cleanup() // owned by 10009AC6
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_10019E05
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+arg_0]
jmp     loc_100018DF

locret_10019E05:
retn

loc_10019E06:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-30h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020D5C
jmp     ___CxxFrameHandler3
; } // starts at 10019DE5
; END OF FUNCTION CHUNK FOR sub_100095E4
; START OF FUNCTION CHUNK FOR sub_10009EEE

loc_10019E21:
; __unwind { // loc_10019E29
mov     ecx, [ebp+var_10]
jmp     ??1SchedulerPolicy@Concurrency@@QAE@XZ ; Concurrency::SchedulerPolicy::~SchedulerPolicy(void)

loc_10019E29:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020D88
jmp     ___CxxFrameHandler3
; } // starts at 10019E21
; END OF FUNCTION CHUNK FOR sub_10009EEE
; START OF FUNCTION CHUNK FOR sub_10009F0F

loc_10019E44:
; __unwind { // loc_10019E44
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020DE0
jmp     ___CxxFrameHandler3
; } // starts at 10019E44
; END OF FUNCTION CHUNK FOR sub_10009F0F
; START OF FUNCTION CHUNK FOR sub_10009F69

loc_10019E5F:
; __unwind { // loc_10019E6D
;   cleanup() // owned by 10009F88
push    [ebp+var_10]
push    [ebp+var_14]
call    nullsub_1
pop     ecx
pop     ecx
retn

loc_10019E6D:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020E0C
jmp     ___CxxFrameHandler3
; } // starts at 10019E5F
; END OF FUNCTION CHUNK FOR sub_10009F69
; START OF FUNCTION CHUNK FOR sub_10009FE0

loc_10019E88:
; __unwind { // loc_10019E90
mov     ecx, [ebp+var_10]
jmp     sub_10009EEE

loc_10019E90:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020E38
jmp     ___CxxFrameHandler3
; } // starts at 10019E88
; END OF FUNCTION CHUNK FOR sub_10009FE0
; START OF FUNCTION CHUNK FOR sub_1000A046

loc_10019EAB:
; __unwind { // loc_10019EB3
mov     ecx, [ebp+var_10]
jmp     ??1SchedulerPolicy@Concurrency@@QAE@XZ ; Concurrency::SchedulerPolicy::~SchedulerPolicy(void)

loc_10019EB3:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020E64
jmp     ___CxxFrameHandler3
; } // starts at 10019EAB
; END OF FUNCTION CHUNK FOR sub_1000A046
; START OF FUNCTION CHUNK FOR sub_1000A0A9

loc_10019ECE:
; __unwind { // loc_10019ED6
mov     ecx, [ebp+var_10]
jmp     sub_10009FE0

loc_10019ED6:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020E90
jmp     ___CxxFrameHandler3
; } // starts at 10019ECE
; END OF FUNCTION CHUNK FOR sub_1000A0A9
; START OF FUNCTION CHUNK FOR sub_1000A0FC

loc_10019EF1:
; __unwind { // loc_10019EF9
mov     ecx, [ebp+var_10]
jmp     sub_10009EEE

loc_10019EF9:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020EBC
jmp     ___CxxFrameHandler3
; } // starts at 10019EF1
; END OF FUNCTION CHUNK FOR sub_1000A0FC
; START OF FUNCTION CHUNK FOR sub_1000A1B0

loc_10019F14:
; __unwind { // loc_10019F1C
mov     ecx, [ebp+var_10]
jmp     sub_1000A0A9

loc_10019F1C:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020EE8
jmp     ___CxxFrameHandler3
; } // starts at 10019F14
; END OF FUNCTION CHUNK FOR sub_1000A1B0
; START OF FUNCTION CHUNK FOR sub_1000A1ED

loc_10019F37:
; __unwind { // loc_10019F3F
mov     ecx, [ebp+var_10]
jmp     sub_10009FE0

loc_10019F3F:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020F14
jmp     ___CxxFrameHandler3
; } // starts at 10019F37
; END OF FUNCTION CHUNK FOR sub_1000A1ED
; START OF FUNCTION CHUNK FOR sub_1000A2B9

loc_10019F5A:
; __unwind { // loc_10019F62
mov     ecx, [ebp+var_10]
jmp     sub_1000A0A9

loc_10019F62:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020F40
jmp     ___CxxFrameHandler3
; } // starts at 10019F5A
; END OF FUNCTION CHUNK FOR sub_1000A2B9
; START OF FUNCTION CHUNK FOR sub_1000A087
;   ADDITIONAL PARENT FUNCTION sub_1000A286
;   ADDITIONAL PARENT FUNCTION sub_1000A2E6

loc_10019F7D:
; __unwind { // loc_10019F85
;   cleanup() // owned by 1000A29F
;   cleanup() // owned by 1000A300
mov     ecx, [ebp+var_10]
jmp     loc_100018DF

loc_10019F85:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020F6C
jmp     ___CxxFrameHandler3
; } // starts at 10019F7D
; END OF FUNCTION CHUNK FOR sub_1000A087
; [00000023 BYTES: COLLAPSED CHUNK OF FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; START OF FUNCTION CHUNK FOR sub_1000A433

loc_10019FC3:
; __unwind { // loc_10019FCB
;   cleanup() // owned by 1000A453
mov     ecx, [ebp+var_10]
jmp     sub_1000A1B0

loc_10019FCB:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020FC4
jmp     ___CxxFrameHandler3
; } // starts at 10019FC3
; END OF FUNCTION CHUNK FOR sub_1000A433
; START OF FUNCTION CHUNK FOR sub_1000A12D
;   ADDITIONAL PARENT FUNCTION sub_1000A46C

loc_10019FE6:
; __unwind { // loc_10019FF1
;   cleanup() // owned by 1000A499
mov     ecx, [ebp+var_10]
add     ecx, 0Ch
jmp     sub_1000A087

loc_10019FF1:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10020FF0
jmp     ___CxxFrameHandler3
; } // starts at 10019FE6
; END OF FUNCTION CHUNK FOR sub_1000A12D
; START OF FUNCTION CHUNK FOR sub_1000A4B5

loc_1001A00C:
; __unwind { // loc_1001A014
;   cleanup() // owned by 1000A4DA
lea     ecx, [ebp+var_2C]
jmp     loc_100018C0

loc_1001A014:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-58h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1002102C
jmp     ___CxxFrameHandler3
; } // starts at 1001A00C
; END OF FUNCTION CHUNK FOR sub_1000A4B5
; START OF FUNCTION CHUNK FOR sub_1000A14E
;   ADDITIONAL PARENT FUNCTION sub_1000A318
;   ADDITIONAL PARENT FUNCTION sub_1000A73A

loc_1001A02F:
; __unwind { // loc_1001A042
;   cleanup() // owned by 1000A165
;   cleanup() // owned by 1000A32E
;   cleanup() // owned by 1000A754
mov     ecx, [ebp+var_10]
jmp     sub_1000B27B

loc_1001A037:
mov     ecx, [ebp+var_10]
add     ecx, 0Ch
jmp     loc_100018C0

loc_1001A042:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100210A8
jmp     ___CxxFrameHandler3
; } // starts at 1001A02F
; END OF FUNCTION CHUNK FOR sub_1000A14E
; START OF FUNCTION CHUNK FOR sub_1000A7E2

loc_1001A05D:
; __unwind { // loc_1001A06B
;   cleanup() // owned by 1000A805
push    [ebp+var_14]
push    [ebp+var_18]
call    nullsub_1
pop     ecx
pop     ecx
retn

loc_1001A06B:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-1Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10021108
jmp     ___CxxFrameHandler3
; } // starts at 1001A05D
; END OF FUNCTION CHUNK FOR sub_1000A7E2
; START OF FUNCTION CHUNK FOR sub_1000A9BA

loc_1001A086:
; __unwind { // loc_1001A08E
;   cleanup() // owned by 1000A9DE
lea     ecx, [ebp+var_28]
jmp     loc_100018C0

loc_1001A08E:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-54h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10021144
jmp     ___CxxFrameHandler3
; } // starts at 1001A086
; END OF FUNCTION CHUNK FOR sub_1000A9BA
; START OF FUNCTION CHUNK FOR sub_1000ACE3

loc_1001A0A9:
; __unwind { // loc_1001A0B1
;   cleanup() // owned by 1000ACF2
mov     ecx, [ebp+var_10]
jmp     sub_1000A1B0

loc_1001A0B1:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1002119C
jmp     ___CxxFrameHandler3
; } // starts at 1001A0A9
; END OF FUNCTION CHUNK FOR sub_1000ACE3
; START OF FUNCTION CHUNK FOR sub_1000AEAC

loc_1001A0CC:
; __unwind { // loc_1001A0D4
mov     ecx, [ebp+var_10]
jmp     sub_1000ACE3

loc_1001A0D4:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100211C8
jmp     ___CxxFrameHandler3
; } // starts at 1001A0CC
; END OF FUNCTION CHUNK FOR sub_1000AEAC
; START OF FUNCTION CHUNK FOR sub_1000AEFC

loc_1001A0EF:
; __unwind { // loc_1001A0F7
mov     ecx, [ebp+var_14]
jmp     sub_1000ACE3

loc_1001A0F7:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100211F4
jmp     ___CxxFrameHandler3
; } // starts at 1001A0EF
; END OF FUNCTION CHUNK FOR sub_1000AEFC
; START OF FUNCTION CHUNK FOR sub_1000AF25

loc_1001A112:
; __unwind { // loc_1001A11A
;   cleanup() // owned by 1000AF84
lea     ecx, [ebp+var_44]
jmp     sub_1000A087

loc_1001A11A:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-48h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10021220
jmp     ___CxxFrameHandler3
; } // starts at 1001A112
; END OF FUNCTION CHUNK FOR sub_1000AF25
; START OF FUNCTION CHUNK FOR sub_1000AECA
;   ADDITIONAL PARENT FUNCTION sub_1000AFC2

loc_1001A135:
; __unwind { // loc_1001A140
;   cleanup() // owned by 1000AEE1
mov     ecx, [ebp+var_10]
add     ecx, 4
jmp     sub_1000AEAC

loc_1001A140:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1002124C
jmp     ___CxxFrameHandler3
; } // starts at 1001A135
; END OF FUNCTION CHUNK FOR sub_1000AECA
; START OF FUNCTION CHUNK FOR sub_1000B122
;   ADDITIONAL PARENT FUNCTION sub_1000B15A

loc_1001A15B:
; __unwind { // loc_1001A163
;   cleanup() // owned by 1000B13B
;   cleanup() // owned by 1000B173
lea     ecx, [ebp+var_28]
jmp     loc_100018C0

loc_1001A163:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-54h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10021278
jmp     ___CxxFrameHandler3
; } // starts at 1001A15B
; END OF FUNCTION CHUNK FOR sub_1000B122
; [0000001B BYTES: COLLAPSED CHUNK OF FUNCTION CallUnexpected(_s_ESTypeList const *)]



sub_1001A199 proc near
mov     ecx, offset unk_10024364
call    sub_1000236D
push    offset sub_1001A1F1 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_1001A199 endp




sub_1001A1AF proc near
mov     ecx, offset unk_10024384
call    sub_1000236D
push    offset sub_1001A1FB ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_1001A1AF endp




sub_1001A1C5 proc near
mov     ecx, offset unk_100243A4
call    sub_1000236D
push    offset sub_1001A205 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_1001A1C5 endp




sub_1001A1DB proc near
mov     ecx, offset unk_100243C0
call    sub_1000236D
push    offset sub_1001A20F ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_1001A1DB endp




; void __cdecl sub_1001A1F1()
sub_1001A1F1 proc near
mov     ecx, offset unk_10024364
jmp     sub_100011C0
sub_1001A1F1 endp




; void __cdecl sub_1001A1FB()
sub_1001A1FB proc near
mov     ecx, offset unk_10024384
jmp     sub_100011C0
sub_1001A1FB endp




; void __cdecl sub_1001A205()
sub_1001A205 proc near
mov     ecx, offset unk_100243A4
jmp     sub_100011C0
sub_1001A205 endp




; void __cdecl sub_1001A20F()
sub_1001A20F proc near
mov     ecx, offset unk_100243C0
jmp     sub_100011C0
sub_1001A20F endp




; void __cdecl sub_1001A219()
sub_1001A219 proc near
mov     dword_100243E8, offset off_1001B1A0
mov     ecx, offset dword_100243E8
jmp     sub_1000B27B
sub_1001A219 endp

align 200h
dd 300h dup(?)
_text ends

; Section 2. (virtual address 0001B000)
; Virtual size                  : 000073FE (  29694.)
; Section size in file          : 00007400 (  29696.)
; Offset to raw data for section: 00019800
; Flags 40000040: Data Readable
; Alignment     : default
;
; Imports from KERNEL32.dll
;

; Segment type: Externs
; _idata
; HANDLE (__stdcall *HeapCreate)(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
extrn HeapCreate:dword
; void (__stdcall *DeleteCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn DeleteCriticalSection:dword
; void (__stdcall *EnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn EnterCriticalSection:dword
; BOOL (__stdcall *TryEnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn TryEnterCriticalSection:dword
; void (__stdcall *LeaveCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn LeaveCriticalSection:dword
; BOOL (__stdcall *InitializeCriticalSectionAndSpinCount)(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount)
extrn InitializeCriticalSectionAndSpinCount:dword
; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
extrn WideCharToMultiByte:dword
; DWORD (__stdcall *SetFilePointer)(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
extrn SetFilePointer:dword
; HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
extrn CreateFileW:dword
; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
extrn CloseHandle:dword
; BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
extrn WriteFile:dword
; void (__stdcall *GetLocalTime)(LPSYSTEMTIME lpSystemTime)
extrn GetLocalTime:dword
; DWORD (__stdcall *GetLastError)()
extrn GetLastError:dword
; DWORD (__stdcall *GetEnvironmentVariableW)(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
extrn GetEnvironmentVariableW:dword
; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
extrn FreeLibrary:dword
; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
extrn GetProcAddress:dword
; DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
extrn GetModuleFileNameW:dword
; HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName)
extrn GetModuleHandleW:dword
; HMODULE (__stdcall *LoadLibraryW)(LPCWSTR lpLibFileName)
extrn LoadLibraryW:dword
; BOOL (__stdcall *FlushFileBuffers)(HANDLE hFile)
extrn FlushFileBuffers:dword
; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
extrn CreateFileA:dword
; void (__stdcall *RtlUnwind)(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
extrn __imp_RtlUnwind:dword
; void (__stdcall *RaiseException)(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments)
extrn RaiseException:dword
; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
extrn TerminateProcess:dword
; HANDLE (__stdcall *GetCurrentProcess)()
extrn GetCurrentProcess:dword
; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
extrn UnhandledExceptionFilter:dword
; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
extrn SetUnhandledExceptionFilter:dword
; BOOL (__stdcall *IsDebuggerPresent)()
extrn IsDebuggerPresent:dword
; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
extrn HeapFree:dword
; DWORD (__stdcall *GetCurrentThreadId)()
extrn GetCurrentThreadId:dword
; LPSTR (__stdcall *GetCommandLineA)()
extrn GetCommandLineA:dword
; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
extrn HeapAlloc:dword
; LPVOID (__stdcall *TlsGetValue)(DWORD dwTlsIndex)
extrn TlsGetValue:dword
; DWORD (__stdcall *TlsAlloc)()
extrn TlsAlloc:dword
; BOOL (__stdcall *TlsSetValue)(DWORD dwTlsIndex, LPVOID lpTlsValue)
extrn TlsSetValue:dword
; BOOL (__stdcall *TlsFree)(DWORD dwTlsIndex)
extrn TlsFree:dword
; LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend)
extrn InterlockedIncrement:dword
; void (__stdcall *SetLastError)(DWORD dwErrCode)
extrn SetLastError:dword
; LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend)
extrn InterlockedDecrement:dword
; HANDLE (__stdcall *GetStdHandle)(DWORD nStdHandle)
extrn GetStdHandle:dword
; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
extrn GetModuleFileNameA:dword
; void (__stdcall *Sleep)(DWORD dwMilliseconds)
extrn Sleep:dword
; SIZE_T (__stdcall *HeapSize)(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem)
extrn HeapSize:dword
; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
extrn ExitProcess:dword
; BOOL (__stdcall *HeapDestroy)(HANDLE hHeap)
extrn HeapDestroy:dword
; BOOL (__stdcall *VirtualFree)(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
extrn VirtualFree:dword
; LPVOID (__stdcall *VirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
extrn VirtualAlloc:dword
; LPVOID (__stdcall *HeapReAlloc)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
extrn HeapReAlloc:dword
; UINT (__stdcall *SetHandleCount)(UINT uNumber)
extrn SetHandleCount:dword
; DWORD (__stdcall *GetFileType)(HANDLE hFile)
extrn GetFileType:dword
; void (__stdcall *GetStartupInfoA)(LPSTARTUPINFOA lpStartupInfo)
extrn GetStartupInfoA:dword
; BOOL (__stdcall *FreeEnvironmentStringsA)(LPCH penv)
extrn FreeEnvironmentStringsA:dword
; LPCH (__stdcall *GetEnvironmentStrings)()
extrn GetEnvironmentStrings:dword
; BOOL (__stdcall *FreeEnvironmentStringsW)(LPWCH penv)
extrn FreeEnvironmentStringsW:dword
; LPWCH (__stdcall *GetEnvironmentStringsW)()
extrn GetEnvironmentStringsW:dword
; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
extrn QueryPerformanceCounter:dword
; DWORD (__stdcall *GetTickCount)()
extrn GetTickCount:dword
; DWORD (__stdcall *GetCurrentProcessId)()
extrn GetCurrentProcessId:dword
; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
extrn GetSystemTimeAsFileTime:dword
; BOOL (__stdcall *GetCPInfo)(UINT CodePage, LPCPINFO lpCPInfo)
extrn GetCPInfo:dword
; UINT (__stdcall *GetACP)()
extrn GetACP:dword
; UINT (__stdcall *GetOEMCP)()
extrn GetOEMCP:dword
; BOOL (__stdcall *IsValidCodePage)(UINT CodePage)
extrn IsValidCodePage:dword
; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
extrn LoadLibraryA:dword
; int (__stdcall *GetLocaleInfoA)(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
extrn GetLocaleInfoA:dword
; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
extrn MultiByteToWideChar:dword
; UINT (__stdcall *GetConsoleCP)()
extrn GetConsoleCP:dword
; BOOL (__stdcall *GetConsoleMode)(HANDLE hConsoleHandle, LPDWORD lpMode)
extrn GetConsoleMode:dword
; BOOL (__stdcall *GetStringTypeA)(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeA:dword
; BOOL (__stdcall *GetStringTypeW)(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeW:dword
; int (__stdcall *LCMapStringA)(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest)
extrn LCMapStringA:dword
; int (__stdcall *LCMapStringW)(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest)
extrn LCMapStringW:dword
; BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
extrn ReadFile:dword
; BOOL (__stdcall *SetStdHandle)(DWORD nStdHandle, HANDLE hHandle)
extrn SetStdHandle:dword
; BOOL (__stdcall *WriteConsoleA)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
extrn WriteConsoleA:dword
; UINT (__stdcall *GetConsoleOutputCP)()
extrn GetConsoleOutputCP:dword
; BOOL (__stdcall *WriteConsoleW)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
extrn WriteConsoleW:dword

;
; Imports from dllsecurity.dll
;
; __declspec(dllimport) public: __thiscall CSecurity::CSecurity(void)
extrn __imp_??0CSecurity@@QAE@XZ:dword
; __declspec(dllimport) public: long __thiscall CSecurity::SetSeedAndGetKey(unsigned short, unsigned short, unsigned short *)
extrn __imp_?SetSeedAndGetKey@CSecurity@@QAEJGGPAG@Z:dword

;
; Imports from ole32.dll
;
; LPVOID (__stdcall *CoTaskMemAlloc)(SIZE_T cb)
extrn CoTaskMemAlloc:dword
; void (__stdcall *CoTaskMemFree)(LPVOID pv)
extrn CoTaskMemFree:dword



; Segment type: Pure data
; Segment permissions: Read
_rdata segment para public 'DATA' use32
assume cs:_rdata
;org 1001B150h
unk_1001B150 db    0
db    0
db    0
db    0
dd offset sub_1001A199
dd offset sub_1001A1AF
dd offset sub_1001A1C5
dd offset sub_1001A1DB
; const _PVFV First
First dd 0
; const _PIFV dword_1001B168
dword_1001B168 dd 0
dd offset ___onexitinit
dd offset sub_1000E85D
dd offset ___initmbctable
dd offset ___initstdio
; const _PIFV Last
Last dd 0
unk_1001B180 db    0
db    0
db    0
db    0
dd offset ___termcon
dd offset ___endstdio
; const _PVFV dword_1001B18C
dword_1001B18C dd 0
unk_1001B190 db    0
db    0
db    0
db    0
; const _PVFV dword_1001B194
dword_1001B194 dd 0
db  10h
db    0
db    0
db    0
dd offset unk_1001F160
off_1001B1A0 dd offset loc_100010BB
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
dd offset unk_1001F1E0
off_1001B1AC dd offset unknown_libname_1 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F228
off_1001B1C0 dd offset loc_10001216
dd offset sub_100011F5
dd offset sub_10001200
dd offset sub_1000120B
; const char Format[]
Format db '%02x',0
align 4
; const wchar_t aExceptionInCon
aExceptionInCon:
text "UTF-16LE", 'Exception in construc'
text "UTF-16LE", 'tor',0
align 4
; const wchar_t aUnknownLine
aUnknownLine:
text "UTF-16LE", 'unknown line',0
align 4
; const wchar_t aLine
aLine:
text "UTF-16LE", 'Line: ',0
align 4
; const wchar_t aUnknownFile
aUnknownFile:
text "UTF-16LE", 'unknown file',0
align 4
; const wchar_t aFile
aFile:
text "UTF-16LE", 'File: ',0
align 4
; const wchar_t asc_1001B264
asc_1001B264:
text "UTF-16LE", ' ',0
; const wchar_t aEmptyMessage
aEmptyMessage:
text "UTF-16LE", 'empty message',0
; const wchar_t aMessage
aMessage:
text "UTF-16LE", 'Message: ',0
dd offset unk_1001F274
off_1001B29C dd offset loc_10002351
dd offset sub_10002305
dd offset sub_1000230B
aPleaseUseWhatW db 'Please use "what_w" member function'
db ' instead',0
align 8
aCouldNotCreate_5:
text "UTF-16LE", 'could not create crit'
text "UTF-16LE", 'ical section',0
align 10h
aCommonIncludeC:
text "UTF-16LE", '..\..\..\..\common\in'
text "UTF-16LE", 'clude\critsection\Bas'
text "UTF-16LE", 'icCriticalSection.h',0
align 10h
dd offset unk_1001F2C0
off_1001B3A4 dd offset loc_100027FE
dd offset __purecall
dd offset __purecall
dd offset sub_100051DB
dd offset sub_10005292
dd offset sub_1000536D
dd offset sub_10005308
dd offset sub_100053CC
dd offset sub_100054A1
dd offset sub_1000554C
dd offset sub_100055F9
dd offset sub_10005790
dd offset sub_1000568E
dd offset sub_100059B8
dd offset sub_10005878
dd offset sub_100058CA
dd offset sub_10005966
dd offset unk_1001F308
; Exported entry   4. ??_7CSecurity@@6B@
public ??_7CSecurity@@6B@
; const CSecurity::`vftable'
??_7CSecurity@@6B@ dd offset sub_1000283D
dd offset unk_1001F350
off_1001B3F4 dd offset sub_10003EE7
dd offset sub_10002950
dd offset sub_10005ADE
dd offset sub_100051DB
dd offset sub_10005292
dd offset sub_1000536D
dd offset sub_10005308
dd offset sub_100053CC
dd offset sub_100054A1
dd offset sub_1000554C
dd offset sub_100055F9
dd offset sub_10005790
dd offset sub_1000568E
dd offset sub_100059B8
dd offset sub_10005878
dd offset sub_100058CA
dd offset sub_10005966
aInvalidObject:
text "UTF-16LE", 'Invalid object',0
align 4
aInit db '<init>',0
align 10h
aV db '()V',0
aInvalidMethodI:
text "UTF-16LE", 'Invalid method id',0
aOnexception db 'onException',0
aLjavaLangExcep db '(Ljava/lang/Exception;)V',0
align 10h
aInvalidClassOb:
text "UTF-16LE", 'Invalid class object',0
align 4
aJnihelperCpp:
text "UTF-16LE", '.\JNIHelper.cpp',0
aInvalidJavaCal:
text "UTF-16LE", 'Invalid java callback'
text "UTF-16LE", ' object',0
align 4
aBytevalue db 'byteValue',0
align 4
aB db '()B',0
aJavaLangByte db 'java/lang/Byte',0
align 4
aGetidbyte db 'getIDByte',0
align 4
aLjavaLangByte db '()Ljava/lang/Byte;',0
align 4
aComEoosGmTis2w db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SSADa'
db 'ta',0
align 4
aGetstatus db 'getStatus',0
align 10h
aIntvalue db 'intValue',0
align 4
aI db '()I',0
aJavaLangIntege db 'java/lang/Integer',0
align 4
aGetversion db 'getVersion',0
align 10h
aLjavaLangInteg db '()Ljava/lang/Integer;',0
align 4
aGetfreeshots db 'getFreeShots',0
align 4
aGethardwaregro db 'getHardwareGroupID',0
align 4
aGetseedstatus db 'getSeedStatus',0
align 10h
aComEoosGmTis2w_0 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SSADa'
db 'ta$SeedTuple',0
align 4
aGetalgorithm db 'getAlgorithm',0
align 4
aGetseed db 'getSeed',0
align 10h
aComEoosGmTis2w_1 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/exception/Key'
db 'CalculationException',0
align 4
aGetkey db 'getKey',0
align 4
aSetidbyte db 'setIDByte',0
align 10h
aLjavaLangByteV db '(Ljava/lang/Byte;)V',0
aClassNotFound:
text "UTF-16LE", 'Class not found',0
align 8
aComEoosGmTis2w_7 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SSADa'
db 'taImpl',0
align 4
aSetstatus db 'setStatus',0
align 4
aSethardwarekey db 'setHardwareKey',0
align 4
aLcomEoosGmTis2_6 db '(Lcom/eoos/gm/tis2web/sas/common/mo'
db 'del/HardwareKey;)V',0
align 4
aSetversion db 'setVersion',0
align 4
aLjavaLangInteg_0 db '(Ljava/lang/Integer;)V',0
align 10h
aSetfreeshots db 'setFreeShots',0
align 10h
aSethardwaregro db 'setHardwareGroupID',0
align 4
aSetseedstatus db 'setSeedStatus',0
align 8
aComEoosGmTis2w_5 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SSADa'
db 'taImpl$SeedTupleImpl',0
align 4
aSetalgorithm db 'setAlgorithm',0
align 4
aSetseed db 'setSeed',0
aSetkey db 'setKey',0
align 4
aInvalidMethodI_0:
text "UTF-16LE", 'Invalid method ID',0
aCouldNotCreate_0:
text "UTF-16LE", 'Could not create obje'
text "UTF-16LE", 'ct',0
aUnknownResultC:
text "UTF-16LE", 'Unknown result code',0
aSetstatusska db 'setStatusSKA',0
align 10h
aSetstatussca db 'setStatusSCA',0
align 10h
aZV db '(Z)V',0
align 4
aComEoosGmTis2w_8 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SCASK'
db 'AResultImpl',0
align 10h
aFProjectsJavaG:
text "UTF-16LE", 'f:\projects_java\gm\t'
text "UTF-16LE", 'is2web\delivery.refac'
text "UTF-16LE", 'tored\head\sources\cp'
text "UTF-16LE", 'p\gm\tis2web\projects'
text "UTF-16LE", '\sas\implementation\s'
text "UTF-16LE", 'asbridge\StdAfx.h',0
align 4
aNotEnoughMemor:
text "UTF-16LE", 'Not enough memory',0
aFunctionFailed:
text "UTF-16LE", 'Function failed',0
aGetseedtuples db 'getSeedTuples',0
align 10h
aLcomEoosGmTis2 db '()[Lcom/eoos/gm/tis2web/sas/server/'
db 'implementation/tool/tech2/ssadata/S'
db 'SAData$SeedTuple;',0
aCouldNotGetArr:
text "UTF-16LE", 'Could not get array e'
text "UTF-16LE", 'lement',0
aCouldNotGetMet_0:
text "UTF-16LE", 'Could not get method '
text "UTF-16LE", 'id',0
aSecond db 'second',0
align 4
aCouldNotGetFie:
text "UTF-16LE", 'Could not get field i'
text "UTF-16LE", 'd',0
align 4
aCouldNotFindCl:
text "UTF-16LE", 'Could not find class',0
align 4
aInvalidInstanc:
text "UTF-16LE", 'Invalid instance type'
text "UTF-16LE", 0
aJavaLangString db 'java/lang/String',0
align 4
aFirst db 'first',0
align 4
aLjavaLangObjec db 'Ljava/lang/Object;',0
align 10h
aCouldNotGetEnv:
text "UTF-16LE", 'Could not get environ'
text "UTF-16LE", 'ment',0
aInvalidInputPo:
text "UTF-16LE", 'Invalid input pointer'
text "UTF-16LE", 0
aObjectIsEmpty:
text "UTF-16LE", 'Object is empty',0
aGetdecoded db 'getDecoded',0
align 4
aLjavaLangStrin db '()Ljava/lang/String;',0
align 4
aComEoosGmTis2w_6 db 'com/eoos/gm/tis2web/sas/common/mode'
db 'l/HardwareKey',0
align 4
aGethardwarekey db 'getHardwareKey',0
align 4
aLcomEoosGmTis2_5 db '()Lcom/eoos/gm/tis2web/sas/common/m'
db 'odel/HardwareKey;',0
align 10h
aTostring db 'toString',0
align 4
aComEoosGmTis2w_3 db 'com/eoos/gm/tis2web/sas/common/mode'
db 'l/VIN',0
align 4
aGetvin db 'getVIN',0
align 10h
aLcomEoosGmTis2_1 db '()Lcom/eoos/gm/tis2web/sas/common/m'
db 'odel/VIN;',0
align 10h
aComEoosGmTis2w_2 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SSADa'
db 'ta$VINTuple',0
align 4
aGetimmobilizer db 'getImmobilizerSecurityCode',0
align 10h
aGetinfotainmen db 'getInfotainmentSecurityCode',0
aGetvintuples db 'getVINTuples',0
align 10h
aLcomEoosGmTis2_0 db '()[Lcom/eoos/gm/tis2web/sas/server/'
db 'implementation/tool/tech2/ssadata/S'
db 'SAData$VINTuple;',0
align 4
aInvalidPointer:
text "UTF-16LE", 'Invalid pointer',0
aInvalidObjectT:
text "UTF-16LE", 'Invalid object type',0
aSetimmobilizer db 'setImmobilizerSecurityCode',0
align 4
aLjavaLangStrin_1 db '(Ljava/lang/String;)V',0
align 8
aComEoosGmTis2w_4 db 'com/eoos/gm/tis2web/sas/server/impl'
db 'ementation/tool/tech2/ssadata/SSADa'
db 'taImpl$VINTupleImpl',0
align 4
aSetinfotainmen db 'setInfotainmentSecurityCode',0
dd offset unk_1001F39C
off_1001C034 dd offset loc_10005101
dd offset sub_10002305
dd offset sub_1000230B
aCouldNotGetJni:
text "UTF-16LE", 'Could not get JNI env'
text "UTF-16LE", 'ironment',0
align 10h
aCommonIncludeJ:
text "UTF-16LE", '..\..\..\..\common\in'
text "UTF-16LE", 'clude\jni\jnihelperba'
text "UTF-16LE", 'se.h',0
align 10h
aCouldNotCreate:
text "UTF-16LE", 'Could not create stri'
text "UTF-16LE", 'ng object',0
align 10h
aInvalidMethod:
text "UTF-16LE", 'Invalid method',0
align 10h
aIV db '(I)V',0
align 4
aBV db '(B)V',0
align 10h
aCouldNotCreate_1:
text "UTF-16LE", 'Could not create arra'
text "UTF-16LE", 'y object',0
aAJavaException:
text "UTF-16LE", 'A java exception was '
text "UTF-16LE", 'thrown',0
aInvalidEnviron:
text "UTF-16LE", 'Invalid environment p'
text "UTF-16LE", 'ointer',0
aCouldNotCreate_2:
text "UTF-16LE", 'Could not create VIN '
text "UTF-16LE", 'object',0
aCouldNotGetMet:
text "UTF-16LE", 'Could not get method',0
align 10h
aGetinstance db 'getInstance',0
aLjavaLangStrin_0 db '(Ljava/lang/String;)Lcom/eoos/gm/ti'
db 's2web/sas/common/model/VIN;',0
align 4
aCouldNotCreate_3:
text "UTF-16LE", 'Could not create VIN '
text "UTF-16LE", 'tuple',0
align 4
aCouldNotCreate_4:
text "UTF-16LE", 'Could not create Seed'
text "UTF-16LE", ' tuple',0
aSetvin db 'setVIN',0
align 4
aLcomEoosGmTis2_3 db '(Lcom/eoos/gm/tis2web/sas/common/mo'
db 'del/VIN;)V',0
align 4
aSetseedtuples db 'setSeedTuples',0
align 8
aLcomEoosGmTis2_2 db '([Lcom/eoos/gm/tis2web/sas/server/i'
db 'mplementation/tool/tech2/ssadata/SS'
db 'AData$SeedTuple;)V',0
align 4
aSetvintuples db 'setVINTuples',0
align 8
aLcomEoosGmTis2_4 db '([Lcom/eoos/gm/tis2web/sas/server/i'
db 'mplementation/tool/tech2/ssadata/SS'
db 'AData$VINTuple;)V',0
aBadAllocation db 'bad allocation',0
align 10h
dd offset unk_1001F3EC
off_1001C444 dd offset unknown_libname_2 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
; const wchar_t aSS
aSS:
text "UTF-16LE", '%s%s',0
align 10h
; const wchar_t asc_1001C470
asc_1001C470:
text "UTF-16LE", 0Dh,0Ah,0
align 4
; const wchar_t aFromSAtSFileSL
aFromSAtSFileSL:
text "UTF-16LE", 'FROM: "%s" AT: %s',0Dh
text "UTF-16LE", 0Ah
text "UTF-16LE", 'FILE: %s LINE: %d',0Dh
text "UTF-16LE", 0Ah
text "UTF-16LE", '%s %s',0Dh,0Ah,0
; const wchar_t aInfo
aInfo:
text "UTF-16LE", 'INFO:',0
aError:
text "UTF-16LE", 'ERROR:',0
align 10h
aDebug:
text "UTF-16LE", 'DEBUG:',0
align 10h
aMessage_0:
text "UTF-16LE", 'MESSAGE:',0
align 4
; const wchar_t a02d02d02d02d02
a02d02d02d02d02:
text "UTF-16LE", '%02d:%02d:%02d %02d/%'
text "UTF-16LE", '02d/%02d',0
dd offset unk_1001F434
off_1001C554 dd offset loc_10006926
dd offset sub_100064B9
dd offset sub_10006546
dd offset sub_100068D9
dd offset sub_10006498
dd offset sub_1000662D
dd offset sub_10006672
dd offset sub_1000657A
; const wchar_t String
String:
text "UTF-16LE", '_APPLICATION_NAME_',0
align 4
aAnExceptionWas_0:
text "UTF-16LE", 'An exception was thro'
text "UTF-16LE", 'wn',0
; const wchar_t aAnExceptionWas
aAnExceptionWas:
text "UTF-16LE", 'An exception was thro'
text "UTF-16LE", 'wn: ',0
; const wchar_t aEndFunction
aEndFunction:
text "UTF-16LE", 'End Function: ',0
align 10h
aJniVersionNotS:
text "UTF-16LE", 'JNI version not suppo'
text "UTF-16LE", 'rted',0
aCouldNotSetJvm:
text "UTF-16LE", 'Could not set jvm',0
aSasbridgeCpp:
text "UTF-16LE", '.\SASBridge.cpp',0
; const wchar_t aJniOnload
aJniOnload:
text "UTF-16LE", 'JNI_OnLoad',0
align 10h
; const wchar_t aBeginFunction
aBeginFunction:
text "UTF-16LE", 'Begin Function: ',0
align 4
; const wchar_t aJniOnunload
aJniOnunload:
text "UTF-16LE", 'JNI_OnUnload',0
align 10h
; const wchar_t aJavaComEoosGmT_7
aJavaComEoosGmT_7:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeGetInst'
text "UTF-16LE", 'ance',0
align 4
aInvalidPointer_0:
text "UTF-16LE", 'Invalid pointer to th'
text "UTF-16LE", 'e factory',0
align 8
; const wchar_t aJavaComEoosGmT_8
aJavaComEoosGmT_8:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeDiscard'
text "UTF-16LE", 'Instance',0
align 4
aToolInitializa:
text "UTF-16LE", 'Tool initialization f'
text "UTF-16LE", 'ailed',0
align 4
aDeviceIsNotCon:
text "UTF-16LE", 'Device is not connect'
text "UTF-16LE", 'ed',0
align 10h
; const wchar_t aJavaComEoosGmT_9
aJavaComEoosGmT_9:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeInitial'
text "UTF-16LE", 'ize',0
aCouldNotGetToo:
text "UTF-16LE", 'Could not get tool ob'
text "UTF-16LE", 'ject',0
aSetDriverPrope_0:
text "UTF-16LE", 'Set driver properties'
text "UTF-16LE", ' - failed',0
align 8
aSetDriverPrope:
text "UTF-16LE", 'Set driver properties'
text "UTF-16LE", ' - success',0
; const wchar_t aJavaComEoosGmT_10
aJavaComEoosGmT_10:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeSetDriv'
text "UTF-16LE", 'erProperties',0
align 10h
; const wchar_t aJavaComEoosGmT_11
aJavaComEoosGmT_11:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeGetSale'
text "UTF-16LE", 'sOrganization',0
align 8
; const wchar_t aJavaComEoosGmT_12
aJavaComEoosGmT_12:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeSetSSAD'
text "UTF-16LE", 'ata',0
aFunstionFailed:
text "UTF-16LE", 'Funstion failed',0
; const wchar_t aJavaComEoosGmT_13
aJavaComEoosGmT_13:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeGetSSAD'
text "UTF-16LE", 'ata',0
; const wchar_t aJavaComEoosGmT_14
aJavaComEoosGmT_14:
text "UTF-16LE", 'Java_com_eoos_gm_tis2'
text "UTF-16LE", 'web_sas_server_implem'
text "UTF-16LE", 'entation_tool_ToolBri'
text "UTF-16LE", 'dgeImpl_nativeSCASKAE'
text "UTF-16LE", 'nableECU',0
align 8
; const wchar_t a827f7cb1A5e94d
a827f7cb1A5e94d:
text "UTF-16LE", '827F7CB1-A5E9-4DE2-B0'
text "UTF-16LE", 'E1-E571DD1D14F9',0
align 4
dd offset a827f7cb1A5e94d ; "827F7CB1-A5E9-4DE2-B0E1-E571DD1D14F9"
aCouldNotGetReq:
text "UTF-16LE", 'Could not get request'
text "UTF-16LE", 'ed environment variab'
text "UTF-16LE", 'le',0
align 8
aRequestedEnvir:
text "UTF-16LE", 'Requested environment'
text "UTF-16LE", ' variable does not ex'
text "UTF-16LE", 'ist',0
align 8
aInvalidEnviron_0:
text "UTF-16LE", 'Invalid environment v'
text "UTF-16LE", 'ariable name ( empty '
text "UTF-16LE", 'name )',0
align 10h
aCommonIncludeH:
text "UTF-16LE", '..\..\..\..\common\in'
text "UTF-16LE", 'clude\helper\commonfu'
text "UTF-16LE", 'nc.h',0
align 10h
; const wchar_t aSasbridgeLog
aSasbridgeLog:
text "UTF-16LE", 'SASBridge.LOG',0
; const wchar_t asc_1001D03C
asc_1001D03C:
text "UTF-16LE", '\',0
aSasToolBridgeS:
text "UTF-16LE", 'SAS Tool Bridge ( SAS'
text "UTF-16LE", 'Bridge.DLL )',0
aToolCpp:
text "UTF-16LE", '.\Tool.cpp',0
align 4
aCouldNotFreeLi:
text "UTF-16LE", 'Could not free librar'
text "UTF-16LE", 'y',0
align 4
aInstanceHandle:
text "UTF-16LE", 'Instance handle is NU'
text "UTF-16LE", 'LL',0
; const CHAR aChecksecuritya[]
aChecksecuritya db 'CheckSecurityAccessPermissions',0
align 4
; const CHAR aGetsalesorgani[]
aGetsalesorgani db 'GetSalesOrganization',0
align 4
; const CHAR aScaenableecu[]
aScaenableecu db 'SCAEnableECU',0
align 4
; const CHAR aGetssadata[]
aGetssadata db 'GetSSAData',0
align 10h
; const CHAR aSetssadata[]
aSetssadata db 'SetSSAData',0
align 10h
aCouldNotInitia:
text "UTF-16LE", 'Could not initialize '
text "UTF-16LE", 'function pointer',0
; const CHAR aSetdriverprope[]
aSetdriverprope db 'SetDriverProperties2',0
align 4
aCouldNotGetFun:
text "UTF-16LE", 'Could not get functio'
text "UTF-16LE", 'n pointer',0
align 4
; const CHAR aInit_0[]
aInit_0 db 'Init',0
align 4
dd offset unk_1001F480
off_1001D210 dd offset unknown_libname_3 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset unk_1001F4C8
off_1001D220 dd offset unknown_libname_4 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F510
off_1001D23C dd offset loc_10009236
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F55C
off_1001D260 dd offset unknown_libname_5 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset unk_1001F728
off_1001D270 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F714
off_1001D288 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F5A4
off_1001D2A4 dd offset loc_100092A9
dd offset __purecall
dd offset __purecall
dd offset unk_1001F73C
off_1001D2B4 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F750
off_1001D2D0 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001F8EC
off_1001D2E8 dd offset loc_10009486
dd offset loc_1000947C
dd offset loc_1000947C
dd offset sub_1000906D
dd offset sub_10009100
dd offset unk_1001F8D8
off_1001D300 dd offset loc_10008E2D
dd offset loc_10008E35
dd offset loc_10008E35
dd offset sub_10008ECA
dd offset sub_10008F60
dd offset sub_10008FF3
dd offset unk_1001F8C4
off_1001D31C dd offset loc_10009474
dd offset sub_10008E3A
dd offset sub_100092FA
dd offset unk_1001F8B0
off_1001D32C dd offset sub_1000946C
dd offset sub_100095BE
dd offset sub_10009579
dd offset sub_100098BF
dd offset sub_10008C82
dd offset sub_10008E29
dd offset sub_100095D1
dd offset sub_10009A71
dd offset unk_1001F764
off_1001D350 dd offset loc_1000952B
dd offset sub_100095AB
dd offset sub_10009547
aCouldNotGetMod:
text "UTF-16LE", 'Could not get module '
text "UTF-16LE", 'file name',0
align 4
aInvalidModuleH:
text "UTF-16LE", 'Invalid module handle'
text "UTF-16LE", 0
aInvalidModuleN:
text "UTF-16LE", 'Invalid module name ('
text "UTF-16LE", ' module name is empty'
text "UTF-16LE", ' )',0
align 4
aCouldNotSplitP_1:
text "UTF-16LE", 'Could not split path',0
align 10h
aCouldNotSplitP_0:
text "UTF-16LE", 'Could not split path:'
text "UTF-16LE", ' buffer to small',0
align 10h
aCouldNotSplitP:
text "UTF-16LE", 'Could not split path:'
text "UTF-16LE", ' invalid function par'
text "UTF-16LE", 'ameter',0
align 4
aCouldNotLoadLi:
text "UTF-16LE", 'Could not load librar'
text "UTF-16LE", 'y',0
align 8
aCouldNotGetFun_0:
text "UTF-16LE", 'Could not get functio'
text "UTF-16LE", 'n pointers',0
aLibrarySuccess:
text "UTF-16LE", 'Library successfully '
text "UTF-16LE", 'loaded',0
; const wchar_t aLoadLibrary
aLoadLibrary:
text "UTF-16LE", 'Load library: ',0
align 10h
; const wchar_t aDll
aDll:
text "UTF-16LE", '.DLL',0
align 4
; const wchar_t aSasbridgeDll_0
aSasbridgeDll_0:
text "UTF-16LE", 'SASBridge.DLL',0
dd offset unk_1001F900
off_1001D5FC dd offset sub_10009C0C
aToolfactoryCpp:
text "UTF-16LE", '.\ToolFactory.cpp',0
align 8
aErrorWhileCrea:
text "UTF-16LE", 'Error while create in'
text "UTF-16LE", 'stance. Not enough me'
text "UTF-16LE", 'mory',0
align 4
dd offset unk_1001F948
off_1001D68C dd offset loc_1000A194
dd offset unknown_libname_6 ; Microsoft VisualC 2-14/net runtime
dd offset unk_1001F994
off_1001D698 dd offset loc_1000A3A6
dd offset unknown_libname_6 ; Microsoft VisualC 2-14/net runtime
dd offset unk_1001F9E4
off_1001D6A4 dd offset loc_1000A417
dd offset unknown_libname_6 ; Microsoft VisualC 2-14/net runtime
; const char aInvalidMapSetT[]
aInvalidMapSetT db 'invalid map/set<T> iterator',0
aToolproviderCp:
text "UTF-16LE", '.\ToolProvider.cpp',0
align 10h
aCouldNotFindTh:
text "UTF-16LE", 'Could not find the in'
text "UTF-16LE", 'stance',0
; const char aMapSetTTooLong[]
aMapSetTTooLong db 'map/set<T> too long',0
dd offset unk_1001FA34
off_1001D740 dd offset sub_1000AFED
; const char aStringTooLong[]
aStringTooLong db 'string too long',0
; const char aInvalidStringP[]
aInvalidStringP db 'invalid string position',0
dd offset unk_1001FA7C
off_1001D770 dd offset sub_1000B29E
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
aUnknownExcepti db 'Unknown exception',0
align 4
dd offset unk_1001FA90
off_1001D790 dd offset sub_1000B7CE
unk_1001D794 db  63h ; c
db  73h ; s
db  6Dh ; m
db 0E0h
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db  20h
db    5
db  93h
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1001D7B4 dd 0
off_1001D7B8 dd offset ___DestructExceptionObject
dd offset unk_1001FAD8
off_1001D7C0 dd offset sub_1000C9DA
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
; const char aBadException[]
aBadException db 'bad exception',0
align 4
; const CHAR ProcName[]
ProcName db 'EncodePointer',0
align 4
; const WCHAR ModuleName
ModuleName:
text "UTF-16LE", 'KERNEL32.DLL',0
align 4
; const CHAR aDecodepointer[]
aDecodepointer db 'DecodePointer',0
align 4
; const CHAR aFlsfree[]
aFlsfree db 'FlsFree',0
; const CHAR aFlssetvalue[]
aFlssetvalue db 'FlsSetValue',0
; const CHAR aFlsgetvalue[]
aFlsgetvalue db 'FlsGetValue',0
; const CHAR aFlsalloc[]
aFlsalloc db 'FlsAlloc',0
align 10h
; const struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo _EXCEPTION_POINTERS <offset dword_10024428,\
                     offset dword_10024480>
aRuntimeError db 'runtime error ',0
align 4
asc_1001D858 db 0Dh,0Ah,0
align 4
aTlossError db 'TLOSS error',0Dh,0Ah,0
align 4
aSingError db 'SING error',0Dh,0Ah,0
align 4
aDomainError db 'DOMAIN error',0Dh,0Ah,0
align 10h
aR6034AnApplica db 'R6034',0Dh,0Ah
db 'An application has made an attempt '
db 'to load the C runtime library incor'
db 'rectly.',0Ah
db 'Please contact the application',27h
db 's support team for more information'
db '.',0Dh,0Ah,0
align 10h
aR6033AttemptTo db 'R6033',0Dh,0Ah
db '- Attempt to use MSIL code from thi'
db 's assembly during native code initi'
db 'alization',0Ah
db 'This indicates a bug in your applic'
db 'ation. It is most likely the result'
db ' of calling an MSIL-compiled (/clr)'
db ' function from a native constructor'
db ' or from DllMain.',0Dh,0Ah,0
align 4
aR6032NotEnough db 'R6032',0Dh,0Ah
db '- not enough space for locale infor'
db 'mation',0Dh,0Ah,0
align 10h
aR6031AttemptTo db 'R6031',0Dh,0Ah
db '- Attempt to initialize the CRT mor'
db 'e than once.',0Ah
db 'This indicates a bug in your applic'
db 'ation.',0Dh,0Ah,0
align 4
aR6030CrtNotIni db 'R6030',0Dh,0Ah
db '- CRT not initialized',0Dh,0Ah,0
align 4
aR6028UnableToI db 'R6028',0Dh,0Ah
db '- unable to initialize heap',0Dh,0Ah
db 0
align 4
aR6027NotEnough db 'R6027',0Dh,0Ah
db '- not enough space for lowio initia'
db 'lization',0Dh,0Ah,0
align 4
aR6026NotEnough db 'R6026',0Dh,0Ah
db '- not enough space for stdio initia'
db 'lization',0Dh,0Ah,0
align 4
aR6025PureVirtu db 'R6025',0Dh,0Ah
db '- pure virtual function call',0Dh,0Ah
db 0
align 4
aR6024NotEnough db 'R6024',0Dh,0Ah
db '- not enough space for _onexit/atex'
db 'it table',0Dh,0Ah,0
align 4
aR6019UnableToO db 'R6019',0Dh,0Ah
db '- unable to open console device',0Dh
db 0Ah,0
align 4
aR6018Unexpecte db 'R6018',0Dh,0Ah
db '- unexpected heap error',0Dh,0Ah,0
align 4
aR6017Unexpecte db 'R6017',0Dh,0Ah
db '- unexpected multithread lock error'
db 0Dh,0Ah,0
align 4
aR6016NotEnough db 'R6016',0Dh,0Ah
db '- not enough space for thread data',0Dh
db 0Ah,0
aThisApplicatio db 0Dh,0Ah
db 'This application has requested the '
db 'Runtime to terminate it in an unusu'
db 'al way.',0Ah
db 'Please contact the application',27h
db 's support team for more information'
db '.',0Dh,0Ah,0
align 10h
aR6009NotEnough db 'R6009',0Dh,0Ah
db '- not enough space for environment',0Dh
db 0Ah,0
aR6008NotEnough db 'R6008',0Dh,0Ah
db '- not enough space for arguments',0Dh
db 0Ah,0
align 4
aR6002FloatingP db 'R6002',0Dh,0Ah
db '- floating point support not loaded'
db 0Dh,0Ah,0
align 4
aMicrosoftVisua db 'Microsoft Visual C++ Runtime Librar'
db 'y',0
align 10h
; const char asc_1001DDD0[]
asc_1001DDD0 db 0Ah
db 0Ah,0
align 4
; const char asc_1001DDD4[]
asc_1001DDD4 db '...',0
; const char aProgramNameUnk[]
aProgramNameUnk db '<program name unknown>',0
align 10h
; const char Source[]
Source db 'Runtime Error!',0Ah
db 0Ah
db 'Program: ',0
align 4
aNull_0:
text "UTF-16LE", '(null)',0
align 4
aNull db '(null)',0
align 8
byte_1001DE28 db 6
db    0
db    0
db    6
db    0
db    1
db    0
db    0
db  10h
db    0
db    3
db    6
db    0
db    6
db    2
db  10h
db    4
db  45h ; E
db  45h ; E
db  45h ; E
db    5
db    5
db    5
db    5
db    5
db  35h ; 5
db  30h ; 0
db    0
db  50h ; P
db    0
db    0
db    0
db    0
db  28h ; (
db  20h
db  38h ; 8
db  50h ; P
db  58h ; X
db    7
db    8
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  57h ; W
db  50h ; P
db    7
db    0
db    0
db  20h
db  20h
db    8
db    0
db    0
db    0
db    0
db    8
db  60h ; `
db  68h ; h
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db    0
db    0
db  78h ; x
db  70h ; p
db  78h ; x
db  78h ; x
db  78h ; x
db  78h ; x
db    8
db    7
db    8
db    0
db    0
db    7
db    0
db    8
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
; const CHAR aCorexitprocess[]
aCorexitprocess db 'CorExitProcess',0
align 4
; const WCHAR aMscoreeDll
aMscoreeDll:
text "UTF-16LE", 'mscoree.dll',0
align 10h
unk_1001DEB0 db    5
db    0
db    0
db 0C0h
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Dh
db    0
db    0
db 0C0h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  96h
db    0
db    0
db 0C0h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Dh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Eh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Fh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  91h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  92h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  93h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db    0
unk_1001DFA8 db  3Dh ; =
db    0
unk_1001DFAA db    0
db    0
aCompleteObject db ' Complete Object Locator',27h,0
db    0
db    0
aClassHierarchy db ' Class Hierarchy Descriptor',27h,0
db    0
db    0
db    0
aBaseClassArray db ' Base Class Array',27h,0
db    0
aBaseClassDescr db ' Base Class Descriptor at (',0
aTypeDescriptor db ' Type Descriptor',27h,0
db    0
db    0
aLocalStaticThr db '`local static thread guard',27h,0
aManagedVectorC_0 db '`managed vector copy constructor it'
db 'erator',27h,0
db    0
aVectorVbaseCop db '`vector vbase copy constructor iter'
db 'ator',27h,0
db    0
db    0
db    0
aVectorCopyCons db '`vector copy constructor iterator',27h
db 0
db    0
aDynamicAtexitD db '`dynamic atexit destructor for ',27h
db 0
db    0
db    0
db    0
aDynamicInitial db '`dynamic initializer for ',27h,0
db    0
aEhVectorVbaseC_0 db '`eh vector vbase copy constructor i'
db 'terator',27h,0
aEhVectorCopyCo db '`eh vector copy constructor iterato'
db 'r',27h,0
db    0
db    0
aManagedVectorD db '`managed vector destructor iterator'
db 27h,0
db    0
db    0
db    0
aManagedVectorC db '`managed vector constructor iterato'
db 'r',27h,0
db    0
db    0
aPlacementDelet_0 db '`placement delete[] closure',27h,0
db    0
db    0
db    0
aPlacementDelet db '`placement delete closure',27h,0
db    0
aOmniCallsig db '`omni callsig',27h,0
db    0
aDelete_0 db ' delete[]',0
db    0
db    0
aNew_0 db ' new[]',0
db    0
aLocalVftableCo db '`local vftable constructor closure',27h
db 0
aLocalVftable db '`local vftable',27h,0
aRtti db '`RTTI',0
db    0
db    0
unk_1001E244 db  60h ; `
db  45h ; E
db  48h ; H
db    0
aUdtReturning db '`udt returning',27h,0
aCopyConstructo db '`copy constructor closure',27h,0
db    0
aEhVectorVbaseC db '`eh vector vbase constructor iterat'
db 'or',27h,0
db    0
aEhVectorDestru db '`eh vector destructor iterator',27h
db 0
aEhVectorConstr db '`eh vector constructor iterator',27h
db 0
db    0
db    0
db    0
aVirtualDisplac db '`virtual displacement map',27h,0
db    0
aVectorVbaseCon db '`vector vbase constructor iterator',27h
db 0
aVectorDestruct db '`vector destructor iterator',27h,0
db    0
db    0
db    0
aVectorConstruc db '`vector constructor iterator',27h,0
db    0
db    0
aScalarDeleting db '`scalar deleting destructor',27h,0
db    0
db    0
db    0
aDefaultConstru db '`default constructor closure',27h,0
db    0
db    0
aVectorDeleting db '`vector deleting destructor',27h,0
db    0
db    0
db    0
aVbaseDestructo db '`vbase destructor',27h,0
db    0
aString db '`string',27h,0
db    0
db    0
db    0
aLocalStaticGua db '`local static guard',27h,0
db    0
db    0
db    0
aTypeof db '`typeof',27h,0
db    0
db    0
db    0
aVcall db '`vcall',27h,0
aVbtable db '`vbtable',27h,0
db    0
db    0
aVftable db '`vftable',27h,0
db    0
db    0
unk_1001E424 db  5Eh ; ^
db  3Dh ; =
db    0
db    0
unk_1001E428 db  7Ch ; |
db  3Dh ; =
db    0
db    0
unk_1001E42C db  26h ; &
db  3Dh ; =
db    0
db    0
unk_1001E430 db  3Ch ; <
db  3Ch ; <
db  3Dh ; =
db    0
unk_1001E434 db  3Eh ; >
db  3Eh ; >
db  3Dh ; =
db    0
unk_1001E438 db  25h ; %
db  3Dh ; =
db    0
db    0
unk_1001E43C db  2Fh ; /
db  3Dh ; =
db    0
db    0
unk_1001E440 db  2Dh ; -
db  3Dh ; =
db    0
db    0
unk_1001E444 db  2Bh ; +
db  3Dh ; =
db    0
db    0
unk_1001E448 db  2Ah ; *
db  3Dh ; =
db    0
db    0
unk_1001E44C db  7Ch ; |
db  7Ch ; |
db    0
db    0
unk_1001E450 db  26h ; &
db  26h ; &
db    0
db    0
unk_1001E454 db  7Ch ; |
db    0
db    0
db    0
unk_1001E458 db  5Eh ; ^
db    0
db    0
db    0
unk_1001E45C db  7Eh ; ~
db    0
db    0
db    0
unk_1001E460 db  28h ; (
db  29h ; )
db    0
db    0
unk_1001E464 db  2Ch ; ,
db    0
db    0
db    0
unk_1001E468 db  3Eh ; >
db  3Dh ; =
db    0
db    0
unk_1001E46C db  3Eh ; >
db    0
db    0
db    0
unk_1001E470 db  3Ch ; <
db  3Dh ; =
db    0
db    0
unk_1001E474 db  3Ch ; <
db    0
db    0
db    0
unk_1001E478 db  25h ; %
db    0
db    0
db    0
unk_1001E47C db  2Fh ; /
db    0
db    0
db    0
unk_1001E480 db  2Dh ; -
db  3Eh ; >
db  2Ah ; *
db    0
unk_1001E484 db  26h ; &
db    0
db    0
db    0
unk_1001E488 db  2Bh ; +
db    0
db    0
db    0
unk_1001E48C db  2Dh ; -
db    0
db    0
db    0
unk_1001E490 db  2Dh ; -
db  2Dh ; -
db    0
db    0
unk_1001E494 db  2Bh ; +
db  2Bh ; +
db    0
db    0
unk_1001E498 db  2Ah ; *
db    0
db    0
db    0
unk_1001E49C db  2Dh ; -
db  3Eh ; >
db    0
db    0
aOperator db 'operator',0
db    0
db    0
db    0
unk_1001E4AC db  5Bh ; [
db  5Dh ; ]
db    0
db    0
unk_1001E4B0 db  21h ; !
db  3Dh ; =
db    0
db    0
unk_1001E4B4 db  3Dh ; =
db  3Dh ; =
db    0
db    0
unk_1001E4B8 db  21h ; !
db    0
db    0
db    0
unk_1001E4BC db  3Ch ; <
db  3Ch ; <
db    0
db    0
unk_1001E4C0 db  3Eh ; >
db  3Eh ; >
db    0
db    0
aDelete db ' delete',0
aNew db ' new',0
db    0
db    0
db    0
aUnaligned db '__unaligned',0
aRestrict db '__restrict',0
db    0
aPtr64 db '__ptr64',0
aClrcall db '__clrcall',0
db    0
db    0
aFastcall db '__fastcall',0
db    0
aThiscall db '__thiscall',0
db    0
aStdcall db '__stdcall',0
db    0
db    0
aPascal db '__pascal',0
db    0
db    0
db    0
aCdecl db '__cdecl',0
aBased db '__based(',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset aBased        ; "__based("
dd offset aCdecl        ; "__cdecl"
dd offset aPascal       ; "__pascal"
dd offset aStdcall      ; "__stdcall"
dd offset aThiscall     ; "__thiscall"
dd offset aFastcall     ; "__fastcall"
dd offset aClrcall      ; "__clrcall"
dd offset aPtr64        ; "__ptr64"
dd offset aRestrict     ; "__restrict"
dd offset aUnaligned    ; "__unaligned"
dd offset unk_1001DFAA
dd offset aTypeDescriptor ; " Type Descriptor'"
dd offset aBaseClassDescr ; " Base Class Descriptor at ("
dd offset aBaseClassArray ; " Base Class Array'"
dd offset aClassHierarchy ; " Class Hierarchy Descriptor'"
dd offset aCompleteObject ; " Complete Object Locator'"
dd offset aNew          ; " new"
dd offset aDelete       ; " delete"
dd offset unk_1001DFA8
dd offset unk_1001E4C0
dd offset unk_1001E4BC
dd offset unk_1001E4B8
dd offset unk_1001E4B4
dd offset unk_1001E4B0
dd offset unk_1001E4AC
dd offset aOperator     ; "operator"
dd offset unk_1001E49C
dd offset unk_1001E498
dd offset unk_1001E494
dd offset unk_1001E490
dd offset unk_1001E48C
dd offset unk_1001E488
dd offset unk_1001E484
dd offset unk_1001E480
dd offset unk_1001E47C
dd offset unk_1001E478
dd offset unk_1001E474
dd offset unk_1001E470
dd offset unk_1001E46C
dd offset unk_1001E468
dd offset unk_1001E464
dd offset unk_1001E460
dd offset unk_1001E45C
dd offset unk_1001E458
dd offset unk_1001E454
dd offset unk_1001E450
dd offset unk_1001E44C
dd offset unk_1001E448
dd offset unk_1001E444
dd offset unk_1001E440
dd offset unk_1001E43C
dd offset unk_1001E438
dd offset unk_1001E434
dd offset unk_1001E430
dd offset unk_1001E42C
dd offset unk_1001E428
dd offset unk_1001E424
dd offset aVftable      ; "`vftable'"
dd offset aVbtable      ; "`vbtable'"
dd offset aVcall        ; "`vcall'"
dd offset aTypeof       ; "`typeof'"
dd offset aLocalStaticGua ; "`local static guard'"
dd offset aString       ; "`string'"
dd offset aVbaseDestructo ; "`vbase destructor'"
dd offset aVectorDeleting ; "`vector deleting destructor'"
dd offset aDefaultConstru ; "`default constructor closure'"
dd offset aScalarDeleting ; "`scalar deleting destructor'"
dd offset aVectorConstruc ; "`vector constructor iterator'"
dd offset aVectorDestruct ; "`vector destructor iterator'"
dd offset aVectorVbaseCon ; "`vector vbase constructor iterator'"
dd offset aVirtualDisplac ; "`virtual displacement map'"
dd offset aEhVectorConstr ; "`eh vector constructor iterator'"
dd offset aEhVectorDestru ; "`eh vector destructor iterator'"
dd offset aEhVectorVbaseC ; "`eh vector vbase constructor iterator'"
dd offset aCopyConstructo ; "`copy constructor closure'"
dd offset aUdtReturning ; "`udt returning'"
dd offset unk_1001E244
dd offset aRtti         ; "`RTTI"
dd offset aLocalVftable ; "`local vftable'"
dd offset aLocalVftableCo ; "`local vftable constructor closure'"
dd offset aNew_0        ; " new[]"
dd offset aDelete_0     ; " delete[]"
dd offset aOmniCallsig  ; "`omni callsig'"
dd offset aPlacementDelet ; "`placement delete closure'"
dd offset aPlacementDelet_0 ; "`placement delete[] closure'"
dd offset aManagedVectorC ; "`managed vector constructor iterator'"
dd offset aManagedVectorD ; "`managed vector destructor iterator'"
dd offset aEhVectorCopyCo ; "`eh vector copy constructor iterator'"
dd offset aEhVectorVbaseC_0 ; "`eh vector vbase copy constructor itera"...
dd offset aDynamicInitial ; "`dynamic initializer for '"
dd offset aDynamicAtexitD ; "`dynamic atexit destructor for '"
dd offset aVectorCopyCons ; "`vector copy constructor iterator'"
dd offset aVectorVbaseCop ; "`vector vbase copy constructor iterator"...
dd offset aManagedVectorC_0 ; "`managed vector copy constructor iterat"...
dd offset aLocalStaticThr ; "`local static thread guard'"
dd offset unk_1001DFAA
; const CHAR aGetprocesswind[]
aGetprocesswind db 'GetProcessWindowStation',0
; const CHAR aGetuserobjecti[]
aGetuserobjecti db 'GetUserObjectInformationA',0
align 4
; const CHAR aGetlastactivep[]
aGetlastactivep db 'GetLastActivePopup',0
align 10h
; const CHAR aGetactiv[8]
aGetactiv db 'GetActiv'
byte_1001E718 db 65h
aWindow db 'Window',0
; const CHAR aMessageboxa[]
aMessageboxa db 'MessageBoxA',0
; const CHAR LibFileName[]
LibFileName db 'USER32.DLL',0
align 4
byte_1001E738 db 6
db  80h
db  80h
db  86h
db  80h
db  81h
db  80h
db    0
db    0
db  10h
db    3
db  86h
db  80h
db  86h
db  82h
db  80h
db  14h
db    5
db    5
db  45h ; E
db  45h ; E
db  45h ; E
db  85h
db  85h
db  85h
db    5
db    0
db    0
db  30h ; 0
db  30h ; 0
db  80h
db  50h ; P
db  80h
db  88h
db    0
db    8
db    0
db  28h ; (
db  27h ; '
db  38h ; 8
db  50h ; P
db  57h ; W
db  80h
db    0
db    7
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  50h ; P
db  50h ; P
db  88h
db    0
db    0
db    0
db  20h
db  28h ; (
db  80h
db  88h
db  80h
db  80h
db    0
db    0
db    0
db  60h ; `
db  68h ; h
db  60h ; `
db  68h ; h
db  68h ; h
db  68h ; h
db    8
db    8
db    7
db  78h ; x
db  70h ; p
db  70h ; p
db  77h ; w
db  70h ; p
db  70h ; p
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
asc_1001E898:
text "UTF-16LE", '         (((((       '
text "UTF-16LE", '           H'
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001EA9A db  20h
db    0
aHH:
text "UTF-16LE", '        h((((        '
text "UTF-16LE", '          H'
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  48h ; H
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  14h
db    0
db  14h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  14h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db  10h
db    0
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    1
db    1
db    0
db    0
db    0
db    0
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
unk_1001ED20 db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
unk_1001EEA0 db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
aHhMmSs db 'HH:mm:ss',0
db    0
db    0
db    0
aDdddMmmmDdYyyy db 'dddd, MMMM dd, yyyy',0
aMmDdYy db 'MM/dd/yy',0
db    0
db    0
db    0
unk_1001EFCC db  50h ; P
db  4Dh ; M
db    0
db    0
unk_1001EFD0 db  41h ; A
db  4Dh ; M
db    0
db    0
aDecember db 'December',0
db    0
db    0
db    0
aNovember db 'November',0
db    0
db    0
db    0
aOctober db 'October',0
aSeptember db 'September',0
db    0
db    0
aAugust db 'August',0
db    0
aJuly db 'July',0
db    0
db    0
db    0
aJune db 'June',0
db    0
db    0
db    0
aApril db 'April',0
db    0
db    0
aMarch db 'March',0
db    0
db    0
aFebruary db 'February',0
db    0
db    0
db    0
aJanuary db 'January',0
unk_1001F03C db  44h ; D
db  65h ; e
db  63h ; c
db    0
unk_1001F040 db  4Eh ; N
db  6Fh ; o
db  76h ; v
db    0
unk_1001F044 db  4Fh ; O
db  63h ; c
db  74h ; t
db    0
unk_1001F048 db  53h ; S
db  65h ; e
db  70h ; p
db    0
unk_1001F04C db  41h ; A
db  75h ; u
db  67h ; g
db    0
unk_1001F050 db  4Ah ; J
db  75h ; u
db  6Ch ; l
db    0
unk_1001F054 db  4Ah ; J
db  75h ; u
db  6Eh ; n
db    0
unk_1001F058 db  4Dh ; M
db  61h ; a
db  79h ; y
db    0
unk_1001F05C db  41h ; A
db  70h ; p
db  72h ; r
db    0
unk_1001F060 db  4Dh ; M
db  61h ; a
db  72h ; r
db    0
unk_1001F064 db  46h ; F
db  65h ; e
db  62h ; b
db    0
unk_1001F068 db  4Ah ; J
db  61h ; a
db  6Eh ; n
db    0
aSaturday db 'Saturday',0
db    0
db    0
db    0
aFriday db 'Friday',0
db    0
aThursday db 'Thursday',0
db    0
db    0
db    0
aWednesday db 'Wednesday',0
db    0
db    0
aTuesday db 'Tuesday',0
aMonday db 'Monday',0
db    0
aSunday db 'Sunday',0
db    0
unk_1001F0B0 db  53h ; S
db  61h ; a
db  74h ; t
db    0
unk_1001F0B4 db  46h ; F
db  72h ; r
db  69h ; i
db    0
unk_1001F0B8 db  54h ; T
db  68h ; h
db  75h ; u
db    0
unk_1001F0BC db  57h ; W
db  65h ; e
db  64h ; d
db    0
unk_1001F0C0 db  54h ; T
db  75h ; u
db  65h ; e
db    0
unk_1001F0C4 db  4Dh ; M
db  6Fh ; o
db  6Eh ; n
db    0
unk_1001F0C8 db  53h ; S
db  75h ; u
db  6Eh ; n
db    0
; const WCHAR SrcStr
SrcStr dw 0
align 10h
aSunmontuewedth db 'SunMonTueWedThuFriSat',0
align 4
aJanfebmaraprma db 'JanFebMarAprMayJunJulAugSepOctNovDe'
db 'c',0
align 10h
; const CHAR FileName[]
FileName db 'CONOUT$',0
__load_config_used dd 48h ; Size
dd 0                    ; Time stamp
dw 2 dup(0)             ; Version: 0.0
dd 0                    ; GlobalFlagsClear
dd 0                    ; GlobalFlagsSet
dd 0                    ; CriticalSectionDefaultTimeout
dd 0                    ; DeCommitFreeBlockThreshold
dd 0                    ; DeCommitTotalFreeThreshold
dd 0                    ; LockPrefixTable
dd 0                    ; MaximumAllocationSize
dd 0                    ; VirtualMemoryThreshold
dd 0                    ; ProcessHeapFlags
dd 0                    ; ProcessAffinityMask
dw 0                    ; CSDVersion
dw 0                    ; Reserved1
dd 0                    ; EditList
dd offset ___security_cookie ; SecurityCookie
dd offset ___safe_se_handler_table ; SEHandlerTable
dd 4Ch                  ; SEHandlerCount
unk_1001F160 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023000
dd offset unk_1001F174
unk_1001F174 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F184
off_1001F184 dd offset off_1001F190
dd offset off_1001F1AC
align 10h
off_1001F190 dd offset off_10023000
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F174
off_1001F1AC dd offset off_1002301C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F1C8
unk_1001F1C8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F1D8
off_1001F1D8 dd offset off_1001F1AC
align 10h
unk_1001F1E0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023038
dd offset unk_1001F1F4
unk_1001F1F4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F204
off_1001F204 dd offset off_1001F20C
db    0
db    0
db    0
db    0
off_1001F20C dd offset off_10023038
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F1F4
unk_1001F228 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023064
dd offset unk_1001F23C
unk_1001F23C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F24C
off_1001F24C dd offset off_1001F258
dd offset off_1001F20C
align 8
off_1001F258 dd offset off_10023064
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F23C
unk_1001F274 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset stru_10023094
dd offset unk_1001F288
unk_1001F288 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F298
off_1001F298 dd offset off_1001F2A4
dd offset off_1001F1AC
db    0
db    0
db    0
db    0
off_1001F2A4 dd offset stru_10023094
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F288
unk_1001F2C0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100230B8
dd offset unk_1001F2D4
unk_1001F2D4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F2E4
off_1001F2E4 dd offset off_1001F2EC
db    0
db    0
db    0
db    0
off_1001F2EC dd offset off_100230B8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F2D4
unk_1001F308 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100230E0
dd offset unk_1001F31C
unk_1001F31C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F32C
off_1001F32C dd offset off_1001F334
db    0
db    0
db    0
db    0
off_1001F334 dd offset off_100230E0
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F31C
unk_1001F350 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100230F8
dd offset unk_1001F364
unk_1001F364 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F374
off_1001F374 dd offset off_1001F380
dd offset off_1001F2EC
align 10h
off_1001F380 dd offset off_100230F8
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F364
unk_1001F39C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset stru_10023114
dd offset unk_1001F3B0
unk_1001F3B0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_1001F3C0
off_1001F3C0 dd offset off_1001F3D0
dd offset off_1001F2A4
dd offset off_1001F1AC
align 10h
off_1001F3D0 dd offset stru_10023114
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F3B0
unk_1001F3EC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023140
dd offset unk_1001F400
unk_1001F400 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F410
off_1001F410 dd offset off_1001F418
align 8
off_1001F418 dd offset off_10023140
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F400
unk_1001F434 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023164
dd offset unk_1001F448
unk_1001F448 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F458
off_1001F458 dd offset off_1001F464
dd offset off_1001F418
db    0
db    0
db    0
db    0
off_1001F464 dd offset off_10023164
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F448
unk_1001F480 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1002318C
dd offset unk_1001F494
unk_1001F494 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F4A4
off_1001F4A4 dd offset off_1001F4AC
db    0
db    0
db    0
db    0
off_1001F4AC dd offset off_1002318C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F494
unk_1001F4C8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100231A8
dd offset unk_1001F4DC
unk_1001F4DC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F4EC
off_1001F4EC dd offset off_1001F4F4
db    0
db    0
db    0
db    0
off_1001F4F4 dd offset off_100231A8
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F4DC
unk_1001F510 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100231C0
dd offset unk_1001F524
unk_1001F524 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F534
off_1001F534 dd offset off_1001F540
dd offset off_1001F4F4
align 10h
off_1001F540 dd offset off_100231C0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F524
unk_1001F55C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100231D8
dd offset unk_1001F570
unk_1001F570 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F580
off_1001F580 dd offset off_1001F588
align 8
off_1001F588 dd offset off_100231D8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F570
unk_1001F5A4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100231EC
dd offset unk_1001F5B8
unk_1001F5B8 db    0
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db    6
db    0
db    0
db    0
dd offset off_1001F5C8
off_1001F5C8 dd offset off_1001F5E4
dd offset off_1001F588
dd offset off_1001F600
dd offset off_1001F688
dd offset off_1001F6A4
dd offset off_1001F6F8
db    0
db    0
db    0
db    0
off_1001F5E4 dd offset off_100231EC
db    5
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F5B8
off_1001F600 dd offset off_1002320C
db    1
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F61C
unk_1001F61C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F62C
off_1001F62C dd offset off_1001F638
dd offset off_1001F654
align 8
off_1001F638 dd offset off_1002320C
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F61C
off_1001F654 dd offset off_10023220
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F670
unk_1001F670 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F680
off_1001F680 dd offset off_1001F654
align 8
off_1001F688 dd offset off_10023220
align 10h
db    4
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_1001F670
off_1001F6A4 dd offset off_10023238
db    1
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F6C0
unk_1001F6C0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F6D0
off_1001F6D0 dd offset off_1001F6DC
dd offset off_1001F654
db    0
db    0
db    0
db    0
off_1001F6DC dd offset off_10023238
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F6C0
off_1001F6F8 dd offset off_10023220
align 10h
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_1001F670
unk_1001F714 db    0
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100231EC
dd offset unk_1001F5B8
unk_1001F728 db    0
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100231EC
dd offset unk_1001F5B8
unk_1001F73C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1002320C
dd offset unk_1001F61C
unk_1001F750 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023238
dd offset unk_1001F6C0
unk_1001F764 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023264
dd offset unk_1001F778
unk_1001F778 db    0
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
dd offset off_1001F788
off_1001F788 dd offset off_1001F7B4
dd offset off_1001F4AC
dd offset off_1001F7D0
dd offset off_1001F7EC
dd offset off_1001F808
dd offset off_1001F824
dd offset off_1001F840
dd offset off_1001F85C
dd offset off_1001F878
dd offset off_1001F894
db    0
db    0
db    0
db    0
off_1001F7B4 dd offset off_10023264
db    9
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F778
off_1001F7D0 dd offset off_100231C0
db    1
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F524
off_1001F7EC dd offset off_100231A8
db    0
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F4DC
off_1001F808 dd offset off_100231EC
db    5
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F5B8
off_1001F824 dd offset off_100231D8
db    0
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F570
off_1001F840 dd offset off_1002320C
db    1
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F61C
off_1001F85C dd offset off_10023220
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_1001F670
off_1001F878 dd offset off_10023238
db    1
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F6C0
off_1001F894 dd offset off_10023220
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_1001F670
unk_1001F8B0 db    0
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023264
dd offset unk_1001F778
unk_1001F8C4 db    0
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023264
dd offset unk_1001F778
unk_1001F8D8 db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023264
dd offset unk_1001F778
unk_1001F8EC db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023264
dd offset unk_1001F778
unk_1001F900 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023278
dd offset unk_1001F914
unk_1001F914 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001F924
off_1001F924 dd offset off_1001F92C
db    0
db    0
db    0
db    0
off_1001F92C dd offset off_10023278
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F914
unk_1001F948 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023294
dd offset unk_1001F95C
unk_1001F95C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001F96C
off_1001F96C dd offset off_1001F978
dd offset off_1001F1AC
align 8
off_1001F978 dd offset off_10023294
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F95C
unk_1001F994 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100232B4
dd offset unk_1001F9A8
unk_1001F9A8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_1001F9B8
off_1001F9B8 dd offset off_1001F9C8
dd offset off_1001F978
dd offset off_1001F1AC
align 8
off_1001F9C8 dd offset off_100232B4
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F9A8
unk_1001F9E4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100232D4
dd offset unk_1001F9F8
unk_1001F9F8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_1001FA08
off_1001FA08 dd offset off_1001FA18
dd offset off_1001F978
dd offset off_1001F1AC
align 8
off_1001FA18 dd offset off_100232D4
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001F9F8
unk_1001FA34 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100232F4
dd offset unk_1001FA48
unk_1001FA48 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001FA58
off_1001FA58 dd offset off_1001FA60
align 10h
off_1001FA60 dd offset off_100232F4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001FA48
unk_1001FA7C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1002301C
dd offset unk_1001F1C8
unk_1001FA90 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023320
dd offset unk_1001FAA4
unk_1001FAA4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001FAB4
off_1001FAB4 dd offset off_1001FABC
db    0
db    0
db    0
db    0
off_1001FABC dd offset off_10023320
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001FAA4
unk_1001FAD8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10023354
dd offset unk_1001FAEC
unk_1001FAEC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_1001FAFC
off_1001FAFC dd offset off_1001FB08
dd offset off_1001F1AC
align 8
off_1001FB08 dd offset off_10023354
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001FAEC
align 10h
___safe_se_handler_table dd rva ?CatchGuardHandler@@YA?AW4_EXCEPTION_DISPOSITION@@PAUEHExceptionRecord@@PAUCatchGuardRN@@PAX2@Z ; CatchGuardHandler(EHExceptionRecord *,CatchGuardRN *,void *,void *)
dd rva ?TranslatorGuardHandler@@YA?AW4_EXCEPTION_DISPOSITION@@PAUEHExceptionRecord@@PAUTranslatorGuardRN@@PAX2@Z ; TranslatorGuardHandler(EHExceptionRecord *,TranslatorGuardRN *,void *,void *)
dd rva SEH_10016F20
dd rva __unwind_handler
dd rva __unwind_handler4
dd rva loc_1001928C
dd rva loc_100192AF
dd rva loc_100192CA
dd rva loc_100192E5
dd rva loc_10019319
dd rva loc_1001934D
dd rva loc_10019381
dd rva loc_100193AF
dd rva loc_100193E7
dd rva loc_1001940A
dd rva loc_1001944E
dd rva loc_10019482
dd rva loc_100194B0
dd rva loc_1001950C
dd rva loc_1001953C
dd rva loc_1001955F
dd rva loc_10019582
dd rva loc_100195A5
dd rva loc_100195C8
dd rva loc_100195FD
dd rva loc_10019632
dd rva loc_10019670
dd rva loc_100196B4
dd rva loc_100196D7
dd rva loc_100196FA
dd rva loc_1001971D
dd rva loc_10019742
dd rva loc_1001979D
dd rva loc_10019802
dd rva loc_10019877
dd rva loc_100198E4
dd rva loc_10019969
dd rva loc_100199DE
dd rva loc_10019A5B
dd rva loc_10019AD0
dd rva loc_10019B45
dd rva loc_10019BC2
dd rva loc_10019C08
dd rva loc_10019C43
dd rva loc_10019C70
dd rva loc_10019C93
dd rva loc_10019CED
dd rva loc_10019D21
dd rva loc_10019D65
dd rva loc_10019DBD
dd rva loc_10019E06
dd rva loc_10019E29
dd rva loc_10019E44
dd rva loc_10019E6D
dd rva loc_10019E90
dd rva loc_10019EB3
dd rva loc_10019ED6
dd rva loc_10019EF9
dd rva loc_10019F1C
dd rva loc_10019F3F
dd rva loc_10019F62
dd rva loc_10019F85
dd rva loc_10019FA8
dd rva loc_10019FCB
dd rva loc_10019FF1
dd rva loc_1001A014
dd rva loc_1001A042
dd rva loc_1001A06B
dd rva loc_1001A08E
dd rva loc_1001A0B1
dd rva loc_1001A0D4
dd rva loc_1001A0F7
dd rva loc_1001A11A
dd rva loc_1001A140
dd rva loc_1001A163
dd rva loc_1001A17E
db    0
db    0
db    0
db    0
unk_1001FC64 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001FC6C db    0
db    0
db    0
db    0
stru_1001FC70 UnwindMapEntry <-1, offset loc_10019284>
stru_1001FC78 FuncInfo <19930522h, 0, 1, \
          offset stru_1001FC70, 0, 0, 0,\
          0, 0, 0>
stru_1001FC9C UnwindMapEntry <-1, offset loc_100192A7>
stru_1001FCA4 FuncInfo <19930522h, 0, 1, \
          offset stru_1001FC9C, 0, 0, 0,\
          0, 0, 0>
; const _ThrowInfo pThrowInfo
pThrowInfo _ThrowInfo <0, offset sub_10001097, 0, \
            offset unk_1001FCD8>
unk_1001FCD8 db    2
db    0
db    0
db    0
dd offset unk_1001FCE4
dd offset unk_1001FD00
unk_1001FCE4 db    0
db    0
db    0
db    0
dd offset off_10023000
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
unk_1001FD00 db    0
db    0
db    0
db    0
dd offset off_1002301C
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
stru_1001FD1C HandlerType <0, 0, 0, \
             offset loc_10001726>
stru_1001FD2C HandlerType <0, 0, 0, \
             offset loc_100017A1>
stru_1001FD3C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_1001FD5C FuncInfo <19930522h, 0, 4, \
          offset stru_1001FD3C, 2, \
          offset stru_1001FD80, 0, 0, 0,\
          0>
stru_1001FD80 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_1001FD2C>
TryBlockMapEntry <0, 0, 3, 1, \
                  offset stru_1001FD1C>
stru_1001FDA8 HandlerType <0, 0, 0, \
             offset loc_1000181B>
stru_1001FDB8 HandlerType <0, 0, 0, \
             offset loc_10001896>
stru_1001FDC8 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_1001FDE8 FuncInfo <19930522h, 0, 4, \
          offset stru_1001FDC8, 2, \
          offset stru_1001FE0C, 0, 0, 0,\
          0>
stru_1001FE0C TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_1001FDB8>
TryBlockMapEntry <0, 0, 3, 1, \
                  offset stru_1001FDA8>
stru_1001FE34 UnwindMapEntry <-1, offset loc_10019300>
stru_1001FE3C FuncInfo <19930522h, 0, 1, \
          offset stru_1001FE34, 0, 0, 0,\
          0, 0, 0>
stru_1001FE60 UnwindMapEntry <-1, offset loc_10019334>
stru_1001FE68 FuncInfo <19930522h, 0, 1, \
          offset stru_1001FE60, 0, 0, 0,\
          0, 0, 0>
stru_1001FE8C UnwindMapEntry <-1, offset loc_10019368>
stru_1001FE94 FuncInfo <19930522h, 0, 1, \
          offset stru_1001FE8C, 0, 0, 0,\
          0, 0, 0>
stru_1001FEB8 HandlerType <0, 0, 0, \
             offset loc_100022D7>
stru_1001FEC8 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_1001FEB8>
stru_1001FEDC UnwindMapEntry <-1, offset loc_1001939C>
UnwindMapEntry <0, offset loc_100193A4>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_1001FEFC FuncInfo <19930522h, 0, 4, \
          offset stru_1001FEDC, 1, \
          offset stru_1001FEC8, 0, 0, 0,\
          0>
stru_1001FF20 UnwindMapEntry <-1, offset loc_100193D4>
UnwindMapEntry <0, offset loc_100193DC>
stru_1001FF30 FuncInfo <19930522h, 0, 2, \
          offset stru_1001FF20, 0, 0, 0,\
          0, 0, 0>
; const _ThrowInfo stru_1001FF54
stru_1001FF54 _ThrowInfo <0, offset sub_10002319, 0, \
            offset unk_1001FF90>
stru_1001FF64 UnwindMapEntry <-1, offset loc_10019402>
stru_1001FF6C FuncInfo <19930522h, 0, 1, \
          offset stru_1001FF64, 0, 0, 0,\
          0, 0, 0>
unk_1001FF90 db    2
db    0
db    0
db    0
dd offset unk_1001FF9C
dd offset unk_1001FD00
unk_1001FF9C db    0
db    0
db    0
db    0
dd offset stru_10023094
align 8
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_1000250E
stru_1001FFB8 UnwindMapEntry <-1, offset loc_10019425>
UnwindMapEntry <0, offset loc_1001943E>
UnwindMapEntry <1, offset loc_10019446>
stru_1001FFD0 FuncInfo <19930522h, 0, 3, \
          offset stru_1001FFB8, 0, 0, 0,\
          0, 0, 0>
stru_1001FFF4 UnwindMapEntry <-1, offset loc_10019469>
stru_1001FFFC FuncInfo <19930522h, 0, 1, \
          offset stru_1001FFF4, 0, 0, 0,\
          0, 0, 0>
stru_10020020 HandlerType <0, 0, 0, \
             offset loc_10002551>
stru_10020030 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_10020020>
stru_10020044 UnwindMapEntry <-1, offset loc_1001949D>
UnwindMapEntry <0, offset loc_100194A5>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_10020064 FuncInfo <19930522h, 0, 4, \
          offset stru_10020044, 1, \
          offset stru_10020030, 0, 0, 0,\
          0>
stru_10020088 FuncInfo <19930522h, 0, 6, \
          offset stru_100200AC, 0, 0, 0,\
          0, 0, 0>
stru_100200AC UnwindMapEntry <-1, offset loc_100194CB>
UnwindMapEntry <0, offset loc_100194E4>
UnwindMapEntry <1, offset loc_100194EC>
UnwindMapEntry <2, offset loc_100194F4>
UnwindMapEntry <0, offset loc_100194FC>
UnwindMapEntry <4, offset loc_10019504>
stru_100200DC UnwindMapEntry <-1, offset loc_10019531>
stru_100200E4 FuncInfo <19930522h, 0, 1, \
          offset stru_100200DC, 0, 0, 0,\
          0, 0, 0>
stru_10020108 UnwindMapEntry <-1, offset loc_10019557>
stru_10020110 FuncInfo <19930522h, 0, 1, \
          offset stru_10020108, 0, 0, 0,\
          0, 0, 0>
stru_10020134 UnwindMapEntry <-1, offset loc_1001957A>
stru_1002013C FuncInfo <19930522h, 0, 1, \
          offset stru_10020134, 0, 0, 0,\
          0, 0, 0>
stru_10020160 UnwindMapEntry <-1, offset loc_1001959D>
stru_10020168 FuncInfo <19930522h, 0, 1, \
          offset stru_10020160, 0, 0, 0,\
          0, 0, 0>
stru_1002018C UnwindMapEntry <-1, offset loc_100195C0>
stru_10020194 FuncInfo <19930522h, 0, 1, \
          offset stru_1002018C, 0, 0, 0,\
          0, 0, 0>
stru_100201B8 UnwindMapEntry <-1, offset loc_100195ED>
UnwindMapEntry <0, offset loc_100195F5>
UnwindMapEntry <-1, offset loc_100195F5>
stru_100201D0 FuncInfo <19930522h, 0, 3, \
          offset stru_100201B8, 0, 0, 0,\
          0, 0, 0>
stru_100201F4 UnwindMapEntry <-1, offset loc_10019622>
UnwindMapEntry <0, offset loc_1001962A>
stru_10020204 FuncInfo <19930522h, 0, 2, \
          offset stru_100201F4, 0, 0, 0,\
          0, 0, 0>
; const _ThrowInfo stru_10020228
stru_10020228 _ThrowInfo <0, offset sub_100050E3, 0, \
            offset unk_10020238>
unk_10020238 db    3
db    0
db    0
db    0
dd offset unk_10020248
dd offset unk_1001FF9C
dd offset unk_1001FD00
unk_10020248 db    0
db    0
db    0
db    0
dd offset stru_10023114
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_1000603A
stru_10020264 UnwindMapEntry <-1, offset loc_10019657>
stru_1002026C FuncInfo <19930522h, 0, 1, \
          offset stru_10020264, 0, 0, 0,\
          0, 0, 0>
stru_10020290 UnwindMapEntry <-1, offset loc_1001969B>
UnwindMapEntry <0, offset loc_1001968B>
UnwindMapEntry <1, offset loc_10019693>
stru_100202A8 FuncInfo <19930522h, 0, 3, \
          offset stru_10020290, 0, 0, 0,\
          0, 0, 0>
stru_100202CC UnwindMapEntry <-1, offset loc_100196CF>
stru_100202D4 FuncInfo <19930522h, 0, 1, \
          offset stru_100202CC, 0, 0, 0,\
          0, 0, 0>
stru_100202F8 UnwindMapEntry <-1, offset loc_100196F2>
stru_10020300 FuncInfo <19930522h, 0, 1, \
          offset stru_100202F8, 0, 0, 0,\
          0, 0, 0>
stru_10020324 UnwindMapEntry <-1, offset loc_10019715>
stru_1002032C FuncInfo <19930522h, 0, 1, \
          offset stru_10020324, 0, 0, 0,\
          0, 0, 0>
stru_10020350 UnwindMapEntry <-1, offset loc_10019738>
stru_10020358 FuncInfo <19930522h, 0, 1, \
          offset stru_10020350, 0, 0, 0,\
          0, 0, 0>
stru_1002037C TryBlockMapEntry <2, 2, 7, 3, \
                  offset stru_100203B4>
stru_10020390 FuncInfo <19930522h, 0, 10, \
          offset stru_100203E4, 1, \
          offset stru_1002037C, 0, 0, 0,\
          0>
stru_100203B4 HandlerType <0, offset stru_10023114, 4,\
             offset loc_10006AED>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_10006B68>
HandlerType <0, 0, 0, \
             offset loc_10006BE3>
stru_100203E4 UnwindMapEntry <-1, offset loc_1001975D>
UnwindMapEntry <0, offset loc_10019765>
UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <3, offset loc_1001977D>
UnwindMapEntry <4, offset loc_10019785>
UnwindMapEntry <3, offset loc_1001978D>
UnwindMapEntry <6, offset loc_10019795>
UnwindMapEntry <-1, offset loc_1001976D>
UnwindMapEntry <8, offset loc_10019775>
stru_10020434 TryBlockMapEntry <2, 2, 7, 3, \
                  offset stru_1002046C>
stru_10020448 FuncInfo <19930522h, 0, 10, \
          offset stru_1002049C, 1, \
          offset stru_10020434, 0, 0, 0,\
          0>
stru_1002046C HandlerType <0, offset stru_10023114, 4,\
             offset loc_10006D42>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_10006DBD>
HandlerType <0, 0, 0, \
             offset loc_10006E38>
stru_1002049C UnwindMapEntry <-1, offset loc_100197C2>
UnwindMapEntry <0, offset loc_100197CA>
UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <3, offset loc_100197E2>
UnwindMapEntry <4, offset loc_100197EA>
UnwindMapEntry <3, offset loc_100197F2>
UnwindMapEntry <6, offset loc_100197FA>
UnwindMapEntry <-1, offset loc_100197D2>
UnwindMapEntry <8, offset loc_100197DA>
stru_100204EC TryBlockMapEntry <2, 4, 9, 3, \
                  offset stru_10020524>
stru_10020500 FuncInfo <19930522h, 0, 12, \
          offset stru_10020554, 1, \
          offset stru_100204EC, 0, 0, 0,\
          0>
stru_10020524 HandlerType <0, offset stru_10023114, \
             -56, offset loc_10007028>
HandlerType <0, offset stru_10023094, 4,\
             offset loc_100070A6>
HandlerType <0, 0, 0, \
             offset loc_10007124>
stru_10020554 UnwindMapEntry <-1, offset loc_10019827>
UnwindMapEntry <0, offset loc_1001982F>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_10019837>
UnwindMapEntry <3, offset loc_1001983F>
UnwindMapEntry <-1, 0>
UnwindMapEntry <5, offset loc_10019857>
UnwindMapEntry <6, offset loc_1001985F>
UnwindMapEntry <5, offset loc_10019867>
UnwindMapEntry <8, offset loc_1001986F>
UnwindMapEntry <-1, offset loc_10019847>
UnwindMapEntry <10, offset loc_1001984F>
stru_100205B4 TryBlockMapEntry <2, 3, 8, 3, \
                  offset stru_100205EC>
stru_100205C8 FuncInfo <19930522h, 0, 11, \
          offset stru_1002061C, 1, \
          offset stru_100205B4, 0, 0, 0,\
          0>
stru_100205EC HandlerType <0, offset stru_10023114, \
             -56, offset loc_100072F3>
HandlerType <0, offset stru_10023094, 4,\
             offset loc_10007371>
HandlerType <0, 0, 0, \
             offset loc_100073EF>
stru_1002061C UnwindMapEntry <-1, offset loc_1001989C>
UnwindMapEntry <0, offset loc_100198A4>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_100198AC>
UnwindMapEntry <-1, 0>
UnwindMapEntry <4, offset loc_100198C4>
UnwindMapEntry <5, offset loc_100198CC>
UnwindMapEntry <4, offset loc_100198D4>
UnwindMapEntry <7, offset loc_100198DC>
UnwindMapEntry <-1, offset loc_100198B4>
UnwindMapEntry <9, offset loc_100198BC>
stru_10020674 TryBlockMapEntry <2, 6, 11, 3, \
                  offset stru_100206AC>
stru_10020688 FuncInfo <19930522h, 0, 14, \
          offset stru_100206DC, 1, \
          offset stru_10020674, 0, 0, 0,\
          0>
stru_100206AC HandlerType <0, offset stru_10023114, 4,\
             offset loc_100076B8>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_10007732>
HandlerType <0, 0, 0, \
             offset loc_100077AC>
stru_100206DC UnwindMapEntry <-1, offset loc_10019909>
UnwindMapEntry <0, offset loc_10019911>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_10019919>
UnwindMapEntry <3, offset loc_10019921>
UnwindMapEntry <3, offset loc_10019929>
UnwindMapEntry <5, offset loc_10019931>
UnwindMapEntry <-1, 0>
UnwindMapEntry <7, offset loc_10019939>
UnwindMapEntry <8, offset loc_10019941>
UnwindMapEntry <7, offset loc_10019949>
UnwindMapEntry <10, offset loc_10019951>
UnwindMapEntry <-1, offset loc_10019959>
UnwindMapEntry <12, offset loc_10019961>
stru_1002074C TryBlockMapEntry <2, 4, 9, 3, \
                  offset stru_10020784>
stru_10020760 FuncInfo <19930522h, 0, 12, \
          offset stru_100207B4, 1, \
          offset stru_1002074C, 0, 0, 0,\
          0>
stru_10020784 HandlerType <0, offset stru_10023114, \
             -56, offset loc_10007A11>
HandlerType <0, offset stru_10023094, 4,\
             offset loc_10007A8B>
HandlerType <0, 0, 0, \
             offset loc_10007B05>
stru_100207B4 UnwindMapEntry <-1, offset loc_1001998E>
UnwindMapEntry <0, offset loc_10019996>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_1001999E>
UnwindMapEntry <3, offset loc_100199A6>
UnwindMapEntry <-1, 0>
UnwindMapEntry <5, offset loc_100199AE>
UnwindMapEntry <6, offset loc_100199B6>
UnwindMapEntry <5, offset loc_100199BE>
UnwindMapEntry <8, offset loc_100199C6>
UnwindMapEntry <-1, offset loc_100199CE>
UnwindMapEntry <10, offset loc_100199D6>
stru_10020814 TryBlockMapEntry <2, 5, 10, 3, \
                  offset stru_1002084C>
stru_10020828 FuncInfo <19930522h, 0, 13, \
          offset stru_1002087C, 1, \
          offset stru_10020814, 0, 0, 0,\
          0>
stru_1002084C HandlerType <0, offset stru_10023114, 4,\
             offset loc_10007DB4>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_10007E2E>
HandlerType <0, 0, 0, \
             offset loc_10007EA8>
stru_1002087C UnwindMapEntry <-1, offset loc_10019A03>
UnwindMapEntry <0, offset loc_10019A0B>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_10019A13>
UnwindMapEntry <3, offset loc_10019A1B>
UnwindMapEntry <3, offset loc_10019A23>
UnwindMapEntry <-1, 0>
UnwindMapEntry <6, offset loc_10019A2B>
UnwindMapEntry <7, offset loc_10019A33>
UnwindMapEntry <6, offset loc_10019A3B>
UnwindMapEntry <9, offset loc_10019A43>
UnwindMapEntry <-1, offset loc_10019A4B>
UnwindMapEntry <11, offset loc_10019A53>
stru_100208E4 TryBlockMapEntry <2, 4, 9, 3, \
                  offset stru_1002091C>
stru_100208F8 FuncInfo <19930522h, 0, 12, \
          offset stru_1002094C, 1, \
          offset stru_100208E4, 0, 0, 0,\
          0>
stru_1002091C HandlerType <0, offset stru_10023114, 4,\
             offset loc_1000813C>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_100081BA>
HandlerType <0, 0, 0, \
             offset loc_10008238>
stru_1002094C UnwindMapEntry <-1, offset loc_10019A80>
UnwindMapEntry <0, offset loc_10019A88>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_10019A90>
UnwindMapEntry <3, offset loc_10019A98>
UnwindMapEntry <-1, 0>
UnwindMapEntry <5, offset loc_10019AB0>
UnwindMapEntry <6, offset loc_10019AB8>
UnwindMapEntry <5, offset loc_10019AC0>
UnwindMapEntry <8, offset loc_10019AC8>
UnwindMapEntry <-1, offset loc_10019AA0>
UnwindMapEntry <10, offset loc_10019AA8>
stru_100209AC TryBlockMapEntry <2, 4, 9, 3, \
                  offset stru_100209E4>
stru_100209C0 FuncInfo <19930522h, 0, 12, \
          offset stru_10020A14, 1, \
          offset stru_100209AC, 0, 0, 0,\
          0>
stru_100209E4 HandlerType <0, offset stru_10023114, 4,\
             offset loc_1000849E>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_1000851C>
HandlerType <0, 0, 0, \
             offset loc_1000859A>
stru_10020A14 UnwindMapEntry <-1, offset loc_10019AF5>
UnwindMapEntry <0, offset loc_10019AFD>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_10019B05>
UnwindMapEntry <3, offset loc_10019B0D>
UnwindMapEntry <-1, 0>
UnwindMapEntry <5, offset loc_10019B25>
UnwindMapEntry <6, offset loc_10019B2D>
UnwindMapEntry <5, offset loc_10019B35>
UnwindMapEntry <8, offset loc_10019B3D>
UnwindMapEntry <-1, offset loc_10019B15>
UnwindMapEntry <10, offset loc_10019B1D>
stru_10020A74 TryBlockMapEntry <2, 5, 10, 3, \
                  offset stru_10020AAC>
stru_10020A88 FuncInfo <19930522h, 0, 13, \
          offset stru_10020ADC, 1, \
          offset stru_10020A74, 0, 0, 0,\
          0>
stru_10020AAC HandlerType <0, offset stru_10023114, 4,\
             offset loc_10008851>
HandlerType <0, offset stru_10023094, \
             -56, offset loc_100088CF>
HandlerType <0, 0, 0, \
             offset loc_1000894D>
stru_10020ADC UnwindMapEntry <-1, offset loc_10019B6A>
UnwindMapEntry <0, offset loc_10019B72>
UnwindMapEntry <-1, 0>
UnwindMapEntry <2, offset loc_10019B7A>
UnwindMapEntry <3, offset loc_10019B82>
UnwindMapEntry <3, offset loc_10019B8A>
UnwindMapEntry <-1, 0>
UnwindMapEntry <6, offset loc_10019BA2>
UnwindMapEntry <7, offset loc_10019BAA>
UnwindMapEntry <6, offset loc_10019BB2>
UnwindMapEntry <9, offset loc_10019BBA>
UnwindMapEntry <-1, offset loc_10019B92>
UnwindMapEntry <11, offset loc_10019B9A>
stru_10020B44 UnwindMapEntry <-1, offset loc_10019BEF>
UnwindMapEntry <0, offset loc_10019BE7>
stru_10020B54 FuncInfo <19930522h, 0, 2, \
          offset stru_10020B44, 0, 0, 0,\
          0, 0, 0>
stru_10020B78 FuncInfo <19930522h, 0, 5, \
          offset stru_10020B9C, 0, 0, 0,\
          0, 0, 0>
stru_10020B9C UnwindMapEntry <-1, offset loc_10019C23>
UnwindMapEntry <0, offset loc_10019C2B>
UnwindMapEntry <-1, offset loc_10019C2B>
UnwindMapEntry <2, offset loc_10019C33>
UnwindMapEntry <3, offset loc_10019C3B>
stru_10020BC4 UnwindMapEntry <-1, offset loc_10019C68>
stru_10020BCC FuncInfo <19930522h, 0, 1, \
          offset stru_10020BC4, 0, 0, 0,\
          0, 0, 0>
stru_10020BF0 UnwindMapEntry <-1, offset loc_10019C8B>
stru_10020BF8 FuncInfo <19930522h, 0, 1, \
          offset stru_10020BF0, 0, 0, 0,\
          0, 0, 0>
stru_10020C1C FuncInfo <19930522h, 0, 6, \
          offset stru_10020C40, 0, 0, 0,\
          0, 0, 0>
stru_10020C40 UnwindMapEntry <-1, offset loc_10019CAE>
UnwindMapEntry <0, offset loc_10019CB6>
UnwindMapEntry <1, offset loc_10019CC1>
UnwindMapEntry <2, offset loc_10019CCC>
UnwindMapEntry <3, offset loc_10019CD7>
UnwindMapEntry <4, offset loc_10019CE2>
stru_10020C70 UnwindMapEntry <-1, offset loc_10019D08>
stru_10020C78 FuncInfo <19930522h, 0, 1, \
          offset stru_10020C70, 0, 0, 0,\
          0, 0, 0>
stru_10020C9C UnwindMapEntry <-1, offset loc_10019D4C>
UnwindMapEntry <0, offset loc_10019D3C>
UnwindMapEntry <1, offset loc_10019D44>
stru_10020CB4 FuncInfo <19930522h, 0, 3, \
          offset stru_10020C9C, 0, 0, 0,\
          0, 0, 0>
stru_10020CD8 FuncInfo <19930522h, 0, 10, \
          offset stru_10020CFC, 0, 0, 0,\
          0, 0, 0>
stru_10020CFC UnwindMapEntry <-1, offset loc_10019D8D>
UnwindMapEntry <0, offset loc_10019D95>
UnwindMapEntry <1, offset loc_10019D9D>
UnwindMapEntry <2, offset loc_10019DA5>
UnwindMapEntry <3, offset loc_10019DAD>
UnwindMapEntry <2, offset loc_10019DAD>
UnwindMapEntry <1, offset loc_10019DAD>
UnwindMapEntry <0, offset loc_10019DAD>
UnwindMapEntry <-1, offset loc_10019DAD>
UnwindMapEntry <8, offset loc_10019DB5>
stru_10020D4C UnwindMapEntry <-1, offset loc_10019DED>
UnwindMapEntry <0, offset loc_10019DE5>
stru_10020D5C FuncInfo <19930522h, 0, 2, \
          offset stru_10020D4C, 0, 0, 0,\
          0, 0, 0>
stru_10020D80 UnwindMapEntry <-1, offset loc_10019E21>
stru_10020D88 FuncInfo <19930522h, 0, 1, \
          offset stru_10020D80, 0, 0, 0,\
          0, 0, 0>
stru_10020DAC HandlerType <0, 0, 0, \
             offset loc_10009F56>
stru_10020DBC UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10020DCC TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10020DAC>
stru_10020DE0 FuncInfo <19930522h, 0, 2, \
          offset stru_10020DBC, 1, \
          offset stru_10020DCC, 0, 0, 0,\
          0>
stru_10020E04 UnwindMapEntry <-1, offset loc_10019E5F>
stru_10020E0C FuncInfo <19930522h, 0, 1, \
          offset stru_10020E04, 0, 0, 0,\
          0, 0, 0>
stru_10020E30 UnwindMapEntry <-1, offset loc_10019E88>
stru_10020E38 FuncInfo <19930522h, 0, 1, \
          offset stru_10020E30, 0, 0, 0,\
          0, 0, 0>
stru_10020E5C UnwindMapEntry <-1, offset loc_10019EAB>
stru_10020E64 FuncInfo <19930522h, 0, 1, \
          offset stru_10020E5C, 0, 0, 0,\
          0, 0, 0>
stru_10020E88 UnwindMapEntry <-1, offset loc_10019ECE>
stru_10020E90 FuncInfo <19930522h, 0, 1, \
          offset stru_10020E88, 0, 0, 0,\
          0, 0, 0>
stru_10020EB4 UnwindMapEntry <-1, offset loc_10019EF1>
stru_10020EBC FuncInfo <19930522h, 0, 1, \
          offset stru_10020EB4, 0, 0, 0,\
          0, 0, 0>
stru_10020EE0 UnwindMapEntry <-1, offset loc_10019F14>
stru_10020EE8 FuncInfo <19930522h, 0, 1, \
          offset stru_10020EE0, 0, 0, 0,\
          0, 0, 0>
stru_10020F0C UnwindMapEntry <-1, offset loc_10019F37>
stru_10020F14 FuncInfo <19930522h, 0, 1, \
          offset stru_10020F0C, 0, 0, 0,\
          0, 0, 0>
stru_10020F38 UnwindMapEntry <-1, offset loc_10019F5A>
stru_10020F40 FuncInfo <19930522h, 0, 1, \
          offset stru_10020F38, 0, 0, 0,\
          0, 0, 0>
stru_10020F64 UnwindMapEntry <-1, offset loc_10019F7D>
stru_10020F6C FuncInfo <19930522h, 0, 1, \
          offset stru_10020F64, 0, 0, 0,\
          0, 0, 0>
stru_10020F90 UnwindMapEntry <-1, offset loc_10019FA0>
stru_10020F98 FuncInfo <19930522h, 0, 1, \
          offset stru_10020F90, 0, 0, 0,\
          0, 0, 0>
stru_10020FBC UnwindMapEntry <-1, offset loc_10019FC3>
stru_10020FC4 FuncInfo <19930522h, 0, 1, \
          offset stru_10020FBC, 0, 0, 0,\
          0, 0, 0>
stru_10020FE8 UnwindMapEntry <-1, offset loc_10019FE6>
stru_10020FF0 FuncInfo <19930522h, 0, 1, \
          offset stru_10020FE8, 0, 0, 0,\
          0, 0, 0>
; const _ThrowInfo stru_10021014
stru_10021014 _ThrowInfo <0, offset sub_1000A3F3, 0, \
            offset unk_10021050>
stru_10021024 UnwindMapEntry <-1, offset loc_1001A00C>
stru_1002102C FuncInfo <19930522h, 0, 1, \
          offset stru_10021024, 0, 0, 0,\
          0, 0, 0>
unk_10021050 db    3
db    0
db    0
db    0
dd offset unk_10021060
dd offset unk_1002107C
dd offset unk_1001FD00
unk_10021060 db    0
db    0
db    0
db    0
dd offset off_100232D4
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z_2 ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
unk_1002107C db    0
db    0
db    0
db    0
dd offset off_10023294
align 8
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_1000A73A
stru_10021098 UnwindMapEntry <-1, offset loc_1001A02F>
UnwindMapEntry <0, offset loc_1001A037>
stru_100210A8 FuncInfo <19930522h, 0, 2, \
          offset stru_10021098, 0, 0, 0,\
          0, 0, 0>
stru_100210CC HandlerType <0, 0, 0, \
             offset loc_1000A834>
stru_100210DC TryBlockMapEntry <0, 1, 2, 1, \
                  offset stru_100210CC>
stru_100210F0 UnwindMapEntry <-1, 0>
UnwindMapEntry <0, offset loc_1001A05D>
UnwindMapEntry <-1, 0>
stru_10021108 FuncInfo <19930522h, 0, 3, \
          offset stru_100210F0, 1, \
          offset stru_100210DC, 0, 0, 0,\
          0>
; const _ThrowInfo stru_1002112C
stru_1002112C _ThrowInfo <0, offset sub_1000A382, 0, \
            offset unk_10021168>
stru_1002113C UnwindMapEntry <-1, offset loc_1001A086>
stru_10021144 FuncInfo <19930522h, 0, 1, \
          offset stru_1002113C, 0, 0, 0,\
          0, 0, 0>
unk_10021168 db    3
db    0
db    0
db    0
dd offset unk_10021178
dd offset unk_1002107C
dd offset unk_1001FD00
unk_10021178 db    0
db    0
db    0
db    0
dd offset off_100232B4
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z_3 ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
stru_10021194 UnwindMapEntry <-1, offset loc_1001A0A9>
stru_1002119C FuncInfo <19930522h, 0, 1, \
          offset stru_10021194, 0, 0, 0,\
          0, 0, 0>
stru_100211C0 UnwindMapEntry <-1, offset loc_1001A0CC>
stru_100211C8 FuncInfo <19930522h, 0, 1, \
          offset stru_100211C0, 0, 0, 0,\
          0, 0, 0>
stru_100211EC UnwindMapEntry <-1, offset loc_1001A0EF>
stru_100211F4 FuncInfo <19930522h, 0, 1, \
          offset stru_100211EC, 0, 0, 0,\
          0, 0, 0>
stru_10021218 UnwindMapEntry <-1, offset loc_1001A112>
stru_10021220 FuncInfo <19930522h, 0, 1, \
          offset stru_10021218, 0, 0, 0,\
          0, 0, 0>
stru_10021244 UnwindMapEntry <-1, offset loc_1001A135>
stru_1002124C FuncInfo <19930522h, 0, 1, \
          offset stru_10021244, 0, 0, 0,\
          0, 0, 0>
stru_10021270 UnwindMapEntry <-1, offset loc_1001A15B>
stru_10021278 FuncInfo <19930522h, 0, 1, \
          offset stru_10021270, 0, 0, 0,\
          0, 0, 1>
align 10h
stru_100212A0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000BF6A>>
align 10h
stru_100212C0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000BFB5, \
                 offset loc_1000BFDE>>
align 10h
stru_100212E0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000C03B>>
align 10h
stru_10021300 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000C2C5>>
align 10h
stru_10021320 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000C7EA, \
                 offset loc_1000C7FB>>
align 10h
stru_10021340 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000C8DE>>
align 10h
stru_10021360 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000CB69>, <\
                 0, offset loc_1000CB2B,\
                 offset loc_1000CB35>>
stru_10021388 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000CC12, \
                 offset loc_1000CC1B>>
stru_100213A4 HandlerType <40h, 0, 0, \
             offset __catch$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z$0>
stru_100213B4 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100213C4 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_100213A4>
stru_100213D8 FuncInfo <19930522h, 0, 2, \
          offset stru_100213B4, 1, \
          offset stru_100213C4, 0, 0, 0,\
          1>
db    0
db    0
db    0
db    0
stru_10021400 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFB4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000CE31>, <\
                 0, offset loc_1000CDA1,\
                 offset loc_1000CDAA>>
stru_10021428 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000D018, \
                 offset loc_1000D01C>>
align 8
stru_10021448 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000D0B1, \
                 offset loc_1000D0B5>>
; const _ThrowInfo stru_10021464
stru_10021464 _ThrowInfo <0, offset sub_1000C9CF, 0, \
            offset unk_10021474>
unk_10021474 db    2
db    0
db    0
db    0
dd offset unk_10021480
dd offset unk_1001FD00
unk_10021480 db    0
db    0
db    0
db    0
dd offset off_10023354
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_1000D567
align 10h
stru_100214A0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000D8A0>, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000D8AF>>
stru_100214C8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000DA62>, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000DA6E>>
stru_100214F0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000DC95, \
                 offset loc_1000DC99>>
align 10h
stru_10021510 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000DCE5, \
                 offset loc_1000DCE9>>
align 10h
stru_10021530 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000DEC9>>
align 10h
stru_10021550 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000E7C8, \
                 offset loc_1000E7E4>>
align 10h
stru_10021570 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10010360>>
align 10h
stru_10021590 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFC8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100105F9>>
align 10h
stru_100215B0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10012263>>
align 10h
stru_100215D0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFF8Ch, 0, <\
                 0FFFFFFFEh, \
                 offset loc_100130B3, \
                 offset loc_100130B7>>
align 10h
stru_100215F0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10013B10>>
align 10h
stru_10021610 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10013DDA>>
align 10h
stru_10021630 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100141A8>>
align 10h
stru_10021650 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFC0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100147C5>>
align 10h
stru_10021670 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10015248>>
align 10h
stru_10021690 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10015A57>>
align 10h
stru_100216B0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10016BCF>>
align 10h
stru_100216D0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10016D34>>
align 10h
stru_100216F0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_10016FAB, \
                 offset loc_10016FBF>>
align 10h
stru_10021710 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1001701C, \
                 offset loc_10017033>>
align 10h
stru_10021730 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100182F1>>
align 10h
stru_10021750 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10018493>>
align 10h
stru_10021770 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10018623>>
align 10h
stru_10021790 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100187AD>, <\
                 0, 0, \
                 offset loc_10018779>>
stru_100217B8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10018EBE>>
align 8
stru_100217D8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10018FA0>>
align 8
stru_100217F8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10019170>>
__IMPORT_DESCRIPTOR_dllsecurity dd rva off_1002199C ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aDllsecurityDll  ; DLL Name
dd rva __imp_??0CSecurity@@QAE@XZ ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd rva off_10021864 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aKernel32Dll     ; DLL Name
dd rva HeapCreate       ; Import Address Table
__IMPORT_DESCRIPTOR_ole32 dd rva off_100219A8 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aOle32Dll        ; DLL Name
dd rva CoTaskMemAlloc   ; Import Address Table
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
;
; Import names for KERNEL32.dll
;
off_10021864 dd rva word_10021D3E
dd rva word_10021A08
dd rva word_10021A20
dd rva word_10021A38
dd rva word_10021A52
dd rva word_10021A6A
dd rva word_10021A92
dd rva word_10021AA8
dd rva word_10021ABA
dd rva word_10021AC8
dd rva word_10021AD6
dd rva word_10021AE2
dd rva word_10021AF2
dd rva word_10021B02
dd rva word_10021B1C
dd rva word_10021B2A
dd rva word_10021B3C
dd rva word_10021B52
dd rva word_10021B66
dd rva word_10021FAA
dd rva word_10021F9C
dd rva word_10021BB0
dd rva word_10021BBC
dd rva word_10021BCE
dd rva word_10021BE2
dd rva word_10021BF6
dd rva word_10021C12
dd rva word_10021C30
dd rva word_10021C44
dd rva word_10021C50
dd rva word_10021C66
dd rva word_10021C78
dd rva word_10021C84
dd rva word_10021C92
dd rva word_10021C9E
dd rva word_10021CAC
dd rva word_10021CB6
dd rva word_10021CCE
dd rva word_10021CDE
dd rva word_10021CF6
dd rva word_10021D06
dd rva word_10021D1C
dd rva word_10021D24
dd rva word_10021D30
dd rva word_10021D4C
dd rva word_10021D5A
dd rva word_10021D68
dd rva word_10021D78
dd rva word_10021D86
dd rva word_10021D98
dd rva word_10021DA6
dd rva word_10021DB8
dd rva word_10021DD2
dd rva word_10021DEA
dd rva word_10021E04
dd rva word_10021E1E
dd rva word_10021E38
dd rva word_10021E48
dd rva word_10021E5E
dd rva word_10021E78
dd rva word_10021E84
dd rva word_10021E8E
dd rva word_10021E9A
dd rva word_10021EAC
dd rva word_10021EBC
dd rva word_10021ECE
dd rva word_10021EE4
dd rva word_10021EF4
dd rva word_10021F06
dd rva word_10021F18
dd rva word_10021F2A
dd rva word_10021F3A
dd rva word_10021F4A
dd rva word_10021F56
dd rva word_10021F66
dd rva word_10021F76
dd rva word_10021F8C
dd 0
;
; Import names for dllsecurity.dll
;
off_1002199C dd rva word_100219E0
dd rva word_100219B4
dd 0
;
; Import names for ole32.dll
;
off_100219A8 dd rva word_10021B84
dd rva word_10021B96
dd 0
word_100219B4 dw 5
db '?SetSeedAndGetKey@CSecurity@@QAEJGG'
db 'PAG@Z',0
align 10h
word_100219E0 dw 1
db '??0CSecurity@@QAE@XZ',0
align 4
aDllsecurityDll db 'dllsecurity.dll',0
word_10021A08 dw 0BEh
db 'DeleteCriticalSection',0
word_10021A20 dw 0D9h
db 'EnterCriticalSection',0
align 4
word_10021A38 dw 439h
db 'TryEnterCriticalSection',0
word_10021A52 dw 2EFh
db 'LeaveCriticalSection',0
align 2
word_10021A6A dw 2B5h
db 'InitializeCriticalSectionAndSpinCou'
db 'nt',0
word_10021A92 dw 47Ah
db 'WideCharToMultiByte',0
word_10021AA8 dw 3DFh
db 'SetFilePointer',0
align 2
word_10021ABA dw 7Fh
db 'CreateFileW',0
word_10021AC8 dw 43h
db 'CloseHandle',0
word_10021AD6 dw 48Dh
db 'WriteFile',0
word_10021AE2 dw 1E7h
db 'GetLocalTime',0
align 2
word_10021AF2 dw 1E6h
db 'GetLastError',0
align 2
word_10021B02 dw 1C3h
db 'GetEnvironmentVariableW',0
word_10021B1C dw 14Ch
db 'FreeLibrary',0
word_10021B2A dw 220h
db 'GetProcAddress',0
align 4
word_10021B3C dw 1F5h
db 'GetModuleFileNameW',0
align 2
word_10021B52 dw 1F9h
db 'GetModuleHandleW',0
align 2
word_10021B66 dw 2F4h
db 'LoadLibraryW',0
align 2
aKernel32Dll db 'KERNEL32.dll',0
align 4
word_10021B84 dw 66h
db 'CoTaskMemAlloc',0
align 2
word_10021B96 dw 67h
db 'CoTaskMemFree',0
aOle32Dll db 'ole32.dll',0
word_10021BB0 dw 392h
db 'RtlUnwind',0
word_10021BBC dw 35Ah
db 'RaiseException',0
align 2
word_10021BCE dw 42Dh
db 'TerminateProcess',0
align 2
word_10021BE2 dw 1A9h
db 'GetCurrentProcess',0
word_10021BF6 dw 43Eh
db 'UnhandledExceptionFilter',0
align 2
word_10021C12 dw 415h
db 'SetUnhandledExceptionFilter',0
word_10021C30 dw 2D1h
db 'IsDebuggerPresent',0
word_10021C44 dw 2A1h
db 'HeapFree',0
align 10h
word_10021C50 dw 1ADh
db 'GetCurrentThreadId',0
align 2
word_10021C66 dw 16Fh
db 'GetCommandLineA',0
word_10021C78 dw 29Dh
db 'HeapAlloc',0
word_10021C84 dw 434h
db 'TlsGetValue',0
word_10021C92 dw 432h
db 'TlsAlloc',0
align 2
word_10021C9E dw 435h
db 'TlsSetValue',0
word_10021CAC dw 433h
db 'TlsFree',0
word_10021CB6 dw 2C0h
db 'InterlockedIncrement',0
align 2
word_10021CCE dw 3ECh
db 'SetLastError',0
align 2
word_10021CDE dw 2BCh
db 'InterlockedDecrement',0
align 2
word_10021CF6 dw 23Bh
db 'GetStdHandle',0
align 2
word_10021D06 dw 1F4h
db 'GetModuleFileNameA',0
align 4
word_10021D1C dw 421h
db 'Sleep',0
word_10021D24 dw 2A6h
db 'HeapSize',0
align 10h
word_10021D30 dw 104h
db 'ExitProcess',0
word_10021D3E dw 29Fh
db 'HeapCreate',0
align 4
word_10021D4C dw 2A0h
db 'HeapDestroy',0
word_10021D5A dw 457h
db 'VirtualFree',0
word_10021D68 dw 454h
db 'VirtualAlloc',0
align 4
word_10021D78 dw 2A4h
db 'HeapReAlloc',0
word_10021D86 dw 3E8h
db 'SetHandleCount',0
align 4
word_10021D98 dw 1D7h
db 'GetFileType',0
word_10021DA6 dw 239h
db 'GetStartupInfoA',0
word_10021DB8 dw 14Ah
db 'FreeEnvironmentStringsA',0
word_10021DD2 dw 1BFh
db 'GetEnvironmentStrings',0
word_10021DEA dw 14Bh
db 'FreeEnvironmentStringsW',0
word_10021E04 dw 1C1h
db 'GetEnvironmentStringsW',0
align 2
word_10021E1E dw 354h
db 'QueryPerformanceCounter',0
word_10021E38 dw 266h
db 'GetTickCount',0
align 4
word_10021E48 dw 1AAh
db 'GetCurrentProcessId',0
word_10021E5E dw 24Fh
db 'GetSystemTimeAsFileTime',0
word_10021E78 dw 15Bh
db 'GetCPInfo',0
word_10021E84 dw 152h
db 'GetACP',0
align 2
word_10021E8E dw 213h
db 'GetOEMCP',0
align 2
word_10021E9A dw 2DBh
db 'IsValidCodePage',0
word_10021EAC dw 2F1h
db 'LoadLibraryA',0
align 4
word_10021EBC dw 1E8h
db 'GetLocaleInfoA',0
align 2
word_10021ECE dw 31Ah
db 'MultiByteToWideChar',0
word_10021EE4 dw 183h
db 'GetConsoleCP',0
align 4
word_10021EF4 dw 195h
db 'GetConsoleMode',0
align 2
word_10021F06 dw 23Dh
db 'GetStringTypeA',0
align 4
word_10021F18 dw 240h
db 'GetStringTypeW',0
align 2
word_10021F2A dw 2E1h
db 'LCMapStringA',0
align 2
word_10021F3A dw 2E3h
db 'LCMapStringW',0
align 2
word_10021F4A dw 368h
db 'ReadFile',0
align 2
word_10021F56 dw 3FCh
db 'SetStdHandle',0
align 2
word_10021F66 dw 482h
db 'WriteConsoleA',0
word_10021F76 dw 199h
db 'GetConsoleOutputCP',0
align 4
word_10021F8C dw 48Ch
db 'WriteConsoleW',0
word_10021F9C dw 78h
db 'CreateFileA',0
word_10021FAA dw 141h
db 'FlushFileBuffers',0
align 10h
;
; Export directory for sasbridge.dll
;
dd 0                    ; Characteristics
dd 4AD33889h            ; TimeDateStamp: Mon Oct 12 14:09:13 2009
dw 0                    ; MajorVersion
dw 0                    ; MinorVersion
dd rva aSasbridgeDll    ; Name
dd 1                    ; Base
dd 0Eh                  ; NumberOfFunctions
dd 0Eh                  ; NumberOfNames
dd rva off_10021FE8     ; AddressOfFunctions
dd rva off_10022020     ; AddressOfNames
dd rva word_10022058    ; AddressOfNameOrdinals
;
; Export Address Table for sasbridge.dll
;
off_10021FE8 dd rva ??0CSecurity@@QAE@ABV0@@Z, rva ??1CSecurity@@UAE@XZ ; CSecurity::CSecurity(CSecurity const &) CSecurity::~CSecurity(void)
dd rva ??4CSecurity@@QAEAAV0@ABV0@@Z, rva ??_7CSecurity@@6B@ ; CSecurity::operator=(CSecurity const &) const CSecurity::`vftable'
dd rva _JNI_OnLoad@8, rva _JNI_OnUnload@8 ; JNI_OnLoad(x,x) JNI_OnUnload(x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance@12 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeDiscardInstance(x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance@12 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetInstance(x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData@12 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSSAData(x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization@12 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeGetSalesOrganization(x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize@16 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeInitialize(x,x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU@16 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSCASKAEnableECU(x,x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties@16 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetDriverProperties(x,x,x,x)
dd rva _Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData@16 ; Java_com_eoos_gm_tis2web_sas_server_implementation_tool_ToolBridgeImpl_nativeSetSSAData(x,x,x,x)
;
; Export Names Table for sasbridge.dll
;
off_10022020 dd rva a0csecurityQaeA, rva a1csecurityUaeX ; "??0CSecurity@@QAE@ABV0@@Z" "??1CSecurity@@UAE@XZ"
dd rva a4csecurityQaea, rva a7csecurity6b ; "??4CSecurity@@QAEAAV0@ABV0@@Z" "??_7CSecurity@@6B@"
dd rva aJniOnload8, rva aJniOnunload8, rva aJavaComEoosGmT ; "_JNI_OnLoad@8" "_JNI_OnUnload@8" "_Java_com_eoos_gm_tis2web_sas_server_im"...
dd rva aJavaComEoosGmT_0, rva aJavaComEoosGmT_1 ; "_Java_com_eoos_gm_tis2web_sas_server_im"... "_Java_com_eoos_gm_tis2web_sas_server_im"...
dd rva aJavaComEoosGmT_2, rva aJavaComEoosGmT_3 ; "_Java_com_eoos_gm_tis2web_sas_server_im"... "_Java_com_eoos_gm_tis2web_sas_server_im"...
dd rva aJavaComEoosGmT_4, rva aJavaComEoosGmT_5 ; "_Java_com_eoos_gm_tis2web_sas_server_im"... "_Java_com_eoos_gm_tis2web_sas_server_im"...
dd rva aJavaComEoosGmT_6 ; "_Java_com_eoos_gm_tis2web_sas_server_im"...
;
; Export Ordinals Table for sasbridge.dll
;
word_10022058 dw 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh
dw 0Ch, 0Dh
aSasbridgeDll db 'sasbridge.dll',0
a0csecurityQaeA db '??0CSecurity@@QAE@ABV0@@Z',0
a1csecurityUaeX db '??1CSecurity@@UAE@XZ',0
a4csecurityQaea db '??4CSecurity@@QAEAAV0@ABV0@@Z',0
a7csecurity6b db '??_7CSecurity@@6B@',0
aJniOnload8 db '_JNI_OnLoad@8',0
aJniOnunload8 db '_JNI_OnUnload@8',0
aJavaComEoosGmT db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeDiscardInstance@12',0
aJavaComEoosGmT_0 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeGetInstance@12',0
aJavaComEoosGmT_1 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeGetSSAData@12',0
aJavaComEoosGmT_2 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeGetSalesOrganization@12',0
aJavaComEoosGmT_3 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeInitialize@16',0
aJavaComEoosGmT_4 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeSCASKAEnableECU@16',0
aJavaComEoosGmT_5 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeSetDriverProperties@16',0
aJavaComEoosGmT_6 db '_Java_com_eoos_gm_tis2web_sas_serve'
db 'r_implementation_tool_ToolBridgeImp'
db 'l_nativeSetSSAData@16',0
align 1000h
_rdata ends

; Section 3. (virtual address 00023000)
; Virtual size                  : 00003020 (  12320.)
; Section size in file          : 00001400 (   5120.)
; Offset to raw data for section: 00020C00
; Flags C0000040: Data Readable Writable
; Alignment     : default

; Segment type: Pure data
; Segment permissions: Read/Write
_data segment para public 'DATA' use32
assume cs:_data
;org 10023000h
off_10023000 dd offset off_1001D790
align 8
aAvbadAllocStd db '.?AVbad_alloc@std@@',0
off_1002301C dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  65h ; e
db  78h ; x
db  63h ; c
db  65h ; e
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
off_10023038 dd offset off_1001D790
align 10h
aAvicriticalsec db '.?AVICriticalSection@tis2web@gm@@',0
align 4
off_10023064 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  43h ; C
db  42h ; B
db  61h ; a
db  73h ; s
db  69h ; i
db  63h ; c
db  43h ; C
db  72h ; r
db  69h ; i
db  74h ; t
db  69h ; i
db  63h ; c
db  61h ; a
db  6Ch ; l
db  53h ; S
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  40h ; @
db  74h ; t
db  69h ; i
db  73h ; s
db  32h ; 2
db  77h ; w
db  65h ; e
db  62h ; b
db  40h ; @
db  67h ; g
db  6Dh ; m
db  40h ; @
db  40h ; @
db    0
db    0
stru_10023094 TypeDescriptor <offset off_1001D790, 0, \
                '.?AVexception@tis2web@gm@@'>
align 4
off_100230B8 dd offset off_1001D790
align 10h
aAvcjnihelperba db '.?AVCJNIHelperBase@tis2web@gm@@',0
off_100230E0 dd offset off_1001D790
align 8
aAvcsecurity db '.?AVCSecurity@@',0
off_100230F8 dd offset off_1001D790
align 10h
aAvcjnihelper db '.?AVCJNIHelper@@',0
align 4
stru_10023114 TypeDescriptor <offset off_1001D790, 0, \
                '.?AVjni_exception@tis2web@gm@@'>
align 4
dd offset aBadAllocation ; "bad allocation"
off_10023140 dd offset off_1001D790
align 8
aAviloggerTis2w db '.?AVILogger@tis2web@gm@@',0
align 4
off_10023164 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  43h ; C
db  4Ch ; L
db  6Fh ; o
db  67h ; g
db  67h ; g
db  65h ; e
db  72h ; r
db  40h ; @
db  74h ; t
db  69h ; i
db  73h ; s
db  32h ; 2
db  77h ; w
db  65h ; e
db  62h ; b
db  40h ; @
db  67h ; g
db  6Dh ; m
db  40h ; @
db  40h ; @
db    0
db    0
db    0
db    0
dd offset aBadAllocation ; "bad allocation"
off_1002318C dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  49h ; I
db  49h ; I
db  64h ; d
db  65h ; e
db  6Eh ; n
db  74h ; t
db  69h ; i
db  66h ; f
db  69h ; i
db  61h ; a
db  62h ; b
db  6Ch ; l
db  65h ; e
db  40h ; @
db  40h ; @
db    0
off_100231A8 dd offset off_1001D790
align 10h
aAvilibrary db '.?AVILibrary@@',0
align 10h
off_100231C0 dd offset off_1001D790
align 8
aAvilibrary2 db '.?AVILibrary2@@',0
off_100231D8 dd offset off_1001D790
align 10h
aAvitool db '.?AVITool@@',0
off_100231EC dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  49h ; I
db  53h ; S
db  65h ; e
db  63h ; c
db  75h ; u
db  72h ; r
db  69h ; i
db  74h ; t
db  79h ; y
db  41h ; A
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  73h ; s
db  40h ; @
db  40h ; @
db    0
db    0
off_1002320C dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  55h ; U
db  49h ; I
db  53h ; S
db  43h ; C
db  41h ; A
db  40h ; @
db  40h ; @
db    0
db    0
off_10023220 dd offset off_1001D790
align 8
aAuiunknown db '.?AUIUnknown@@',0
align 4
off_10023238 dd offset off_1001D790
align 10h
aAuisecurityacc db '.?AUISecurityAccessPermissions@@',0
align 4
off_10023264 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  43h ; C
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  6Ch ; l
db  40h ; @
db  40h ; @
db    0
off_10023278 dd offset off_1001D790
align 10h
aAvctoolfactory db '.?AVCToolFactory@@',0
align 4
off_10023294 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  6Ch ; l
db  6Fh ; o
db  67h ; g
db  69h ; i
db  63h ; c
db  5Fh ; _
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
db    0
db    0
off_100232B4 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  6Ch ; l
db  65h ; e
db  6Eh ; n
db  67h ; g
db  74h ; t
db  68h ; h
db  5Fh ; _
db  65h ; e
db  72h ; r
db  72h ; r
db  6Fh ; o
db  72h ; r
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
db    0
off_100232D4 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  6Fh ; o
db  75h ; u
db  74h ; t
db  5Fh ; _
db  6Fh ; o
db  66h ; f
db  5Fh ; _
db  72h ; r
db  61h ; a
db  6Eh ; n
db  67h ; g
db  65h ; e
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
db    0
off_100232F4 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  43h ; C
db  54h ; T
db  6Fh ; o
db  6Fh ; o
db  6Ch ; l
db  50h ; P
db  72h ; r
db  6Fh ; o
db  76h ; v
db  69h ; i
db  64h ; d
db  65h ; e
db  72h ; r
db  40h ; @
db  40h ; @
db    0
dd offset aBadAllocation ; "bad allocation"
dd offset aBadAllocation ; "bad allocation"
dd offset aBadAllocation ; "bad allocation"
dd offset aBadAllocation ; "bad allocation"
off_10023320 dd offset off_1001D790
align 8
aAvtypeInfo db '.?AVtype_info@@',0
align 10h
; char *off_10023340
off_10023340 dd offset aBadAllocation ; "bad allocation"
; uintptr_t __security_cookie
___security_cookie dd 0BB40E64Eh
dword_10023348 dd 44BF19B1h
align 10h
dd offset aBadAllocation ; "bad allocation"
off_10023354 dd offset off_1001D790
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  62h ; b
db  61h ; a
db  64h ; d
db  5Fh ; _
db  65h ; e
db  78h ; x
db  63h ; c
db  65h ; e
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
dword_10023374 dd 0FFFFFFFFh
; DWORD dwTlsIndex
dwTlsIndex dd 0FFFFFFFFh
align 10h
dd offset aBadAllocation ; "bad allocation"
align 10h
dword_10023390 dd 1
dword_10023394 dd 16h
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db  18h
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Fh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  21h ; !
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  35h ; 5
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  41h ; A
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  43h ; C
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  50h ; P
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  52h ; R
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  53h ; S
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  57h ; W
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  6Ch ; l
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  6Dh ; m
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db  70h ; p
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  72h ; r
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  80h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  81h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  82h
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  83h
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  84h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  91h
db    0
db    0
db    0
db  29h ; )
db    0
db    0
db    0
db  9Eh
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0A1h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0A4h
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db 0A7h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0B7h
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db 0CEh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0D7h
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  18h
db    7
db    0
db    0
db  0Ch
db    0
db    0
db    0
unk_100234F8 db  0Ch
db    0
db    0
db    0
unk_100234FC db    8
db    0
db    0
db    0
dword_10023500 dd 3
align 8
dword_10023508 dd 2
; char *off_1002350C
off_1002350C dd offset aR6002FloatingP ; "R6002\r\n- floating point support not l"...
db    8
db    0
db    0
db    0
dd offset aR6008NotEnough ; "R6008\r\n- not enough space for argumen"...
db    9
db    0
db    0
db    0
dd offset aR6009NotEnough ; "R6009\r\n- not enough space for environ"...
db  0Ah
db    0
db    0
db    0
dd offset aThisApplicatio ; "\r\nThis application has requested the "...
db  10h
db    0
db    0
db    0
dd offset aR6016NotEnough ; "R6016\r\n- not enough space for thread "...
db  11h
db    0
db    0
db    0
dd offset aR6017Unexpecte ; "R6017\r\n- unexpected multithread lock "...
db  12h
db    0
db    0
db    0
dd offset aR6018Unexpecte ; "R6018\r\n- unexpected heap error\r\n"
db  13h
db    0
db    0
db    0
dd offset aR6019UnableToO ; "R6019\r\n- unable to open console devic"...
db  18h
db    0
db    0
db    0
dd offset aR6024NotEnough ; "R6024\r\n- not enough space for _onexit"...
db  19h
db    0
db    0
db    0
dd offset aR6025PureVirtu ; "R6025\r\n- pure virtual function call\r"...
db  1Ah
db    0
db    0
db    0
dd offset aR6026NotEnough ; "R6026\r\n- not enough space for stdio i"...
db  1Bh
db    0
db    0
db    0
dd offset aR6027NotEnough ; "R6027\r\n- not enough space for lowio i"...
db  1Ch
db    0
db    0
db    0
dd offset aR6028UnableToI ; "R6028\r\n- unable to initialize heap\r"...
db  1Eh
db    0
db    0
db    0
dd offset aR6030CrtNotIni ; "R6030\r\n- CRT not initialized\r\n"
db  1Fh
db    0
db    0
db    0
dd offset aR6031AttemptTo ; "R6031\r\n- Attempt to initialize the CR"...
db  20h
db    0
db    0
db    0
dd offset aR6032NotEnough ; "R6032\r\n- not enough space for locale "...
db  21h ; !
db    0
db    0
db    0
dd offset aR6033AttemptTo ; "R6033\r\n- Attempt to use MSIL code fro"...
db  22h ; "
db    0
db    0
db    0
dd offset aR6034AnApplica ; "R6034\r\nAn application has made an att"...
db  78h ; x
db    0
db    0
db    0
dd offset aDomainError  ; "DOMAIN error\r\n"
db  79h ; y
db    0
db    0
db    0
dd offset aSingError    ; "SING error\r\n"
db  7Ah ; z
db    0
db    0
db    0
dd offset aTlossError   ; "TLOSS error\r\n"
db 0FCh
db    0
db    0
db    0
dd offset asc_1001D858  ; "\r\n"
db 0FFh
db    0
db    0
db    0
dd offset aRuntimeError ; "runtime error "
; char *off_100235C0
off_100235C0 dd offset aNull ; "(null)"
off_100235C4 dd offset aNull_0 ; "(null)"
off_100235C8 dd offset __exit
db  10h
db    0
db    0
db    0
; LPCRITICAL_SECTION lpCriticalSection
lpCriticalSection dd 0
dword_100235D4 dd 1
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_100236F0 db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  80h
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_10023730 dd 3
dword_10023734 dd 7
db  78h ; x
db    0
db    0
db    0
dword_1002373C dd 0Ah
dd offset aHH           ; "        h((((                  H"
align 8
unk_10023748 db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10023750 db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_10023748
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_10023748
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_10023748
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_10023748
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_10023748
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100240E8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_10023818 dd offset asc_1001E898 ; "         (((((                  H"
dd offset unk_1001ED20
dd offset unk_1001EEA0
dd offset off_10024028
off_10023828 dd offset unk_10023750
db    1
db    0
db    0
db    0
off_10023830 dd offset unk_10023750
dd offset unk_10023838
unk_10023838 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_10023A58 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_10023B60 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; volatile LONG *lpAddend
lpAddend dd offset unk_10023838
byte_10023C64 db 1
db    2
db    4
db    8
dword_10023C68 dd 3A4h
unk_10023C6C db  60h ; `
db  82h
db  79h ; y
db  82h
db  21h ; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10023C78 db 0A6h
db 0DFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0A1h
db 0A5h
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db  9Fh
db 0E0h
db 0FCh
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db  80h
db 0FCh
db    0
db    0
db    0
db    0
db 0A8h
db    3
db    0
db    0
db 0C1h
db 0A3h
db 0DAh
db 0A3h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h
db    3
db    0
db    0
db 0C1h
db 0A3h
db 0DAh
db 0A3h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B6h
db    3
db    0
db    0
db 0CFh
db 0A2h
db 0E4h
db 0A2h
db  1Ah
db    0
db 0E5h
db 0A2h
db 0E8h
db 0A2h
db  5Bh ; [
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db 0A1h
db 0FEh
db    0
db    0
db    0
db    0
db  51h ; Q
db    5
db    0
db    0
db  51h ; Q
db 0DAh
db  5Eh ; ^
db 0DAh
db  20h
db    0
db  5Fh ; _
db 0DAh
db  6Ah ; j
db 0DAh
db  32h ; 2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0D3h
db 0D8h
db 0DEh
db 0E0h
db 0F9h
db    0
db    0
db  31h ; 1
db  7Eh ; ~
db  81h
db 0FEh
db    0
db    0
db    0
db    0
unk_10023D58 db  20h
db    5
db  93h
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_10023D68 dd 0FFFFFFFEh
off_10023D6C dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
off_10023D84 dd offset __fptrap
off_10023D88 dd offset __fptrap
off_10023D8C dd offset __fptrap
off_10023D90 dd offset __fptrap
align 10h
off_10023DA0 dd offset unk_10024EC0
align 8
dd offset unk_10024EC0
db    1
db    1
db    0
db    0
unk_10023DB0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10023E10 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10024000 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_10024020 dd offset asc_1001E898 ; "         (((((                  H"
dd offset unk_1001EA9A
off_10024028 dd offset unk_1001F0C8
dd offset unk_1001F0C4
dd offset unk_1001F0C0
dd offset unk_1001F0BC
dd offset unk_1001F0B8
dd offset unk_1001F0B4
dd offset unk_1001F0B0
dd offset aSunday       ; "Sunday"
dd offset aMonday       ; "Monday"
dd offset aTuesday      ; "Tuesday"
dd offset aWednesday    ; "Wednesday"
dd offset aThursday     ; "Thursday"
dd offset aFriday       ; "Friday"
dd offset aSaturday     ; "Saturday"
dd offset unk_1001F068
dd offset unk_1001F064
dd offset unk_1001F060
dd offset unk_1001F05C
dd offset unk_1001F058
dd offset unk_1001F054
dd offset unk_1001F050
dd offset unk_1001F04C
dd offset unk_1001F048
dd offset unk_1001F044
dd offset unk_1001F040
dd offset unk_1001F03C
dd offset aJanuary      ; "January"
dd offset aFebruary     ; "February"
dd offset aMarch        ; "March"
dd offset aApril        ; "April"
dd offset unk_1001F058
dd offset aJune         ; "June"
dd offset aJuly         ; "July"
dd offset aAugust       ; "August"
dd offset aSeptember    ; "September"
dd offset aOctober      ; "October"
dd offset aNovember     ; "November"
dd offset aDecember     ; "December"
dd offset unk_1001EFD0
dd offset unk_1001EFCC
dd offset aMmDdYy       ; "MM/dd/yy"
dd offset aDdddMmmmDdYyyy ; "dddd, MMMM dd, yyyy"
dd offset aHhMmSs       ; "HH:mm:ss"
db    9
db    4
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10024028
unk_100240E4 db  2Eh ; .
db    0
db    0
db    0
off_100240E8 dd offset unk_100240E4
off_100240EC dd offset unk_10024DD4
off_100240F0 dd offset unk_10024DD4
off_100240F4 dd offset unk_10024DD4
off_100240F8 dd offset unk_10024DD4
off_100240FC dd offset unk_10024DD4
off_10024100 dd offset unk_10024DD4
off_10024104 dd offset unk_10024DD4
off_10024108 dd offset unk_10024DD4
off_1002410C dd offset unk_10024DD4
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
dd offset off_100240E8
db    1
db    0
db    0
db    0
db  2Eh ; .
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_10024130 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    3
db    3
db    3
db    3
db    3
db    3
db    3
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_10024230 dd 2
align 8
db  80h
db  70h ; p
db    0
db    0
db    1
db    0
db    0
db    0
db 0F0h
db 0F1h
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
unk_10024248 db  50h ; P
db  53h ; S
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10024288 db  50h ; P
db  44h ; D
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_10024248
dd offset unk_10024288
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; HANDLE dword_100242E8
dword_100242E8 dd 0FFFFFFFEh
; HANDLE hObject
hObject dd 0FFFFFFFEh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  1Eh
db    0
db    0
db    0
db  3Bh ; ;
db    0
db    0
db    0
db  5Ah ; Z
db    0
db    0
db    0
db  78h ; x
db    0
db    0
db    0
db  97h
db    0
db    0
db    0
db 0B5h
db    0
db    0
db    0
db 0D4h
db    0
db    0
db    0
db 0F3h
db    0
db    0
db    0
db  11h
db    1
db    0
db    0
db  30h ; 0
db    1
db    0
db    0
db  4Eh ; N
db    1
db    0
db    0
db  6Dh ; m
db    1
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  1Eh
db    0
db    0
db    0
db  3Ah ; :
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  77h ; w
db    0
db    0
db    0
db  96h
db    0
db    0
db    0
db 0B4h
db    0
db    0
db    0
db 0D3h
db    0
db    0
db    0
db 0F2h
db    0
db    0
db    0
db  10h
db    1
db    0
db    0
db  2Fh ; /
db    1
db    0
db    0
db  4Dh ; M
db    1
db    0
db    0
db  6Ch ; l
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_10024360 dd 0
unk_10024364 db    0
db    0
db    0
db    0
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection _RTL_CRITICAL_SECTION <0>
dword_10024380 dd 0
unk_10024384 db    0
db    0
db    0
db    0
; struct _RTL_CRITICAL_SECTION stru_10024388
stru_10024388 _RTL_CRITICAL_SECTION <0>
dword_100243A0 dd 0
unk_100243A4 db    0
db    0
db    0
db    0
; struct _RTL_CRITICAL_SECTION stru_100243A8
stru_100243A8 _RTL_CRITICAL_SECTION <0>
unk_100243C0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_100243E0 dd 0
dword_100243E4 dd 0
; std::bad_alloc dword_100243E8
dword_100243E8 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_100243F4 dd 0
dword_100243F8 dd 0
dword_100243FC dd 0
; char *dword_10024400
dword_10024400 dd ?
align 8
dword_10024408 dd ?
dword_1002440C dd ?
dword_10024410 dd ?
; LPVOID lpTlsValue
lpTlsValue dd ?
dword_10024418 dd ?
dword_1002441C dd ?
dword_10024420 dd ?
align 8
dword_10024428 dd ?
dword_1002442C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024434 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024478 dd ?
align 10h
dword_10024480 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_1002450C dw ?
align 10h
word_10024510 dw ?
align 4
word_10024514 dw ?
align 4
word_10024518 dw ?
align 4
dword_1002451C dd ?
dword_10024520 dd ?
dword_10024524 dd ?
dword_10024528 dd ?
dword_1002452C dd ?
dword_10024530 dd ?
dword_10024534 dd ?
dword_10024538 dd ?
word_1002453C dw ?
align 10h
dword_10024540 dd ?
dword_10024544 dd ?
word_10024548 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_1002474C db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *Block
Block dd ?
align 8
; char Destination[25]
Destination db 19h dup(?)
; CHAR Str[260]
Str db 104h dup(?)
byte_10024875 db ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_10024A6C db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024A74 dd ?
dword_10024A78 dd ?
dword_10024A7C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024A84 dd ?
dword_10024A88 dd ?
align 10h
; void *dword_10024A90
dword_10024A90 dd ?
align 10h
dword_10024AA0 dd ?
align 8
byte_10024AA8 db ?
align 4
dword_10024AAC dd ?
dword_10024AB0 dd ?
; HANDLE hHeap
hHeap dd ?
unk_10024AB8 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *dword_10024C08
dword_10024C08 dd ?
align 10h
; CHAR byte_10024C10[260]
byte_10024C10 db 104h dup(?)
byte_10024D14 db ?
align 4
dword_10024D18 dd ?
dword_10024D1C dd ?
dword_10024D20 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024D44 dd ?
word_10024D48 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024D54 dd ?
dword_10024D58 dd ?
dword_10024D5C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024D9C dd ?
dword_10024DA0 dd ?
dword_10024DA4 dd ?
dword_10024DA8 dd ?
align 10h
dword_10024DB0 dd ?
dword_10024DB4 dd ?
dword_10024DB8 dd ?
dword_10024DBC dd ?
dword_10024DC0 dd ?
dword_10024DC4 dd ?
dword_10024DC8 dd ?
dword_10024DCC dd ?
dword_10024DD0 dd ?
unk_10024DD4 db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10024DD8 dd ?
dword_10024DDC dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *dword_10024EA0
dword_10024EA0 dd ?
align 20h
unk_10024EC0 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10025EC0 dd ?
; UINT uNumber
uNumber dd ?
align 20h
dword_10025EE0 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_10025FE0 dd ?
; LPVOID lpMem
lpMem dd ?
dword_10025FE8 dd ?
dword_10025FEC dd ?
dword_10025FF0 dd ?
dword_10025FF4 dd ?
dword_10025FF8 dd ?
dword_10025FFC dd ?
dword_10026000 dd ?
dword_10026004 dd ?
dword_10026008 dd ?
dword_1002600C dd ?
dword_10026010 dd ?
dword_10026014 dd ?
dword_10026018 dd ?
dword_1002601C dd ?
align 1000h
_data ends


end DllEntryPoint
