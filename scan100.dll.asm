;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 2F8CA7114BE045D6DAB1BEAA3C5A8A17470D9546CC11514276564BBC9FE998BD
; Input MD5    : 915163D07A3AD402AE6A4DD6F2B2DB53
; Input CRC32  : D3A8A4A8
; Compiler     : Visual C++

; File Name   : C:\Users\manfr\Desktop\decompile-jar\sas-nativelib\scan100.dll
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 10000000
; Timestamp   : 4BA0B677 (Wed Mar 17 11:01:11 2010)
; Section 1. (virtual address 00001000)
; Virtual size                  : 0001170A (  71434.)
; Section size in file          : 00011800 (  71680.)
; Offset to raw data for section: 00000400
; Flags 60000020: Text Executable Readable
; Alignment     : default
; OS type         :  MS Windows
; Application type:  DLL 32bit

.686p
.mmx
.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use32
assume cs:_text
;org 10001000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing



; int __cdecl sub_10001000(wchar_t *Buffer, size_t BufferCount, wchar_t *Format, char ArgList)
sub_10001000 proc near

Buffer= dword ptr  4
BufferCount= dword ptr  8
Format= dword ptr  0Ch
ArgList= byte ptr  10h

lea     eax, [esp+ArgList]
push    eax             ; ArgList
push    0               ; Locale
push    [esp+8+Format]  ; Format
push    [esp+0Ch+BufferCount] ; BufferCount
push    [esp+10h+Buffer] ; Buffer
call    __vswprintf_c_l
add     esp, 14h
retn
sub_10001000 endp



; Attributes: bp-based frame

; int __stdcall sub_1000101C(char *)
sub_1000101C proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100120A7 SIZE 00000023 BYTES

; __unwind { // loc_100120AF
push    4
mov     eax, offset loc_100120AF
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
lea     eax, [ebp+arg_0]
push    eax             ; char **
call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
;   try {
and     [ebp+var_4], 0
mov     dword ptr [esi], offset off_100131AC
;   } // starts at 10001036
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 1000101C
sub_1000101C endp



; Attributes: bp-based frame

sub_1000104E proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 100120A7 SIZE 00000023 BYTES

; __unwind { // loc_100120AF
push    4
mov     eax, offset loc_100120AF
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_100131AC
or      [ebp+var_4], 0FFFFFFFFh
call    sub_10004915
call    __EH_epilog3
retn
; } // starts at 1000104E
sub_1000104E endp


loc_10001072:
push    esi
mov     esi, ecx
call    sub_1000104E
test    byte ptr [esp+8], 1
jz      short loc_10001088
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10001088:
mov     eax, esi
pop     esi
retn    4
; [0000001F BYTES: COLLAPSED FUNCTION _wmemcpy_s]
; [0000001F BYTES: COLLAPSED FUNCTION _wmemmove_s]
; [0000001C BYTES: COLLAPSED FUNCTION unknown_libname_7]


; Attributes: bp-based frame

; int __cdecl sub_100010E8(wchar_t *S1, rsize_t N1, wchar_t *S2, rsize_t N)
sub_100010E8 proc near

S1= dword ptr  8
N1= dword ptr  0Ch
S2= dword ptr  10h
N= dword ptr  14h

push    ebp
mov     ebp, esp
push    [ebp+N]         ; N
push    [ebp+S2]        ; S2
push    [ebp+N1]        ; N1
push    [ebp+S1]        ; S1
call    _wmemmove_s
mov     eax, [ebp+S1]
add     esp, 10h
pop     ebp
retn
sub_100010E8 endp




sub_10001104 proc near
mov     dword ptr [ecx], offset off_100131B8
retn
sub_10001104 endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_1]


; Attributes: bp-based frame

sub_10001128 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012084 SIZE 00000023 BYTES

; __unwind { // loc_1001208C
push    4
mov     eax, offset loc_1001208C
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_100131CC
;   try {
and     [ebp+var_4], 0
lea     eax, [esi+4]
push    eax             ; lpCriticalSection
call    ds:DeleteCriticalSection
;   } // starts at 1000113F
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [esi], offset off_100131B8
call    __EH_epilog3
retn
; } // starts at 10001128
sub_10001128 endp




sub_1000115D proc near
add     ecx, 4
push    ecx             ; lpCriticalSection
call    ds:EnterCriticalSection
retn
sub_1000115D endp




sub_10001168 proc near
add     ecx, 4
push    ecx             ; lpCriticalSection
call    ds:TryEnterCriticalSection
retn
sub_10001168 endp




sub_10001173 proc near
add     ecx, 4
push    ecx             ; lpCriticalSection
call    ds:LeaveCriticalSection
retn
sub_10001173 endp


loc_1000117E:
push    esi
mov     esi, ecx
call    sub_10001128
test    byte ptr [esp+8], 1
jz      short loc_10001194
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10001194:
mov     eax, esi
pop     esi
retn    4



sub_1000119A proc near
mov     dword ptr [ecx], offset off_100131E0
retn
sub_1000119A endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_2]



sub_100011BE proc near
push    esi
mov     esi, offset CriticalSection
push    esi             ; lpCriticalSection
call    ds:EnterCriticalSection
mov     ecx, dword_1001AAC0
test    ecx, ecx
jz      short loc_100011E2
mov     eax, [ecx]
push    1
call    dword ptr [eax]
and     dword_1001AAC0, 0

loc_100011E2:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
pop     esi
retn
sub_100011BE endp




sub_100011EB proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
or      [ecx+0Ch], eax
retn    4
sub_100011EB endp




sub_100011F5 proc near
push    esi
mov     esi, ecx
mov     eax, [esi+8]
test    eax, eax
jz      short loc_1000120A
push    eax             ; Block
call    _free
and     dword ptr [esi+8], 0
pop     ecx

loc_1000120A:
pop     esi
retn
sub_100011F5 endp



; Attributes: bp-based frame

; int __stdcall sub_1000120C(LPCWSTR lpFileName, int)
sub_1000120C proc near

var_4= dword ptr -4
lpFileName= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    edi
push    offset CriticalSection ; lpCriticalSection
mov     esi, ecx
call    ds:EnterCriticalSection
xor     edi, edi
mov     [ebp+var_4], edi
cmp     [ebp+lpFileName], edi
jz      short loc_10001285
mov     eax, [esi]
push    ebx
mov     ecx, esi
call    dword ptr [eax+8]
xor     ebx, ebx
cmp     [ebp+arg_4], edi
push    edi             ; hTemplateFile
setnz   bl
push    edi             ; dwFlagsAndAttributes
lea     ebx, [ebx+ebx+2]
push    ebx             ; dwCreationDisposition
push    edi             ; lpSecurityAttributes
push    1               ; dwShareMode
push    40000000h       ; dwDesiredAccess
push    [ebp+lpFileName] ; lpFileName
call    ds:CreateFileW
mov     [esi+4], eax
cmp     eax, 0FFFFFFFFh
jz      short loc_10001284
push    2               ; dwMoveMethod
push    edi             ; lpDistanceToMoveHigh
push    edi             ; lDistanceToMove
push    eax             ; hFile
call    ds:SetFilePointer
cmp     ebx, 2
jnz     short loc_1000127D
mov     eax, [esi]
lea     ecx, [ebp+lpFileName]
push    ecx
push    ebx
mov     ecx, esi
mov     byte ptr [ebp+lpFileName], 0FFh
mov     byte ptr [ebp+lpFileName+1], 0FEh
call    dword ptr [eax+14h]

loc_1000127D:
mov     [ebp+var_4], 1

loc_10001284:
pop     ebx

loc_10001285:           ; lpCriticalSection
push    offset CriticalSection
call    ds:LeaveCriticalSection
mov     eax, [ebp+var_4]
pop     edi
pop     esi
leave
retn    8
sub_1000120C endp




sub_10001299 proc near
push    ebx
push    esi
push    edi
mov     edi, offset CriticalSection
push    edi             ; lpCriticalSection
mov     esi, ecx
call    ds:EnterCriticalSection
mov     eax, [esi+4]
xor     ebx, ebx
test    eax, eax
jz      short loc_100012C0
push    eax             ; hObject
call    ds:CloseHandle
and     dword ptr [esi+4], 0
mov     ebx, eax

loc_100012C0:           ; lpCriticalSection
push    edi
call    ds:LeaveCriticalSection
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn
sub_10001299 endp



; Attributes: bp-based frame

; int __stdcall sub_100012CD(wchar_t *String)
sub_100012CD proc near

var_8= dword ptr -8
var_4= dword ptr -4
String= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    offset CriticalSection ; lpCriticalSection
mov     [ebp+var_8], ecx
call    ds:EnterCriticalSection
and     [ebp+var_4], 0
cmp     [ebp+String], 0
jz      loc_1000136E
push    ebx
push    esi
push    edi
push    [ebp+String]    ; String
call    _wcslen
mov     esi, offset asc_1001320C ; "\r\n"
push    esi             ; String
mov     edi, eax
call    _wcslen
lea     ebx, [edi+eax+1]
xor     ecx, ecx
push    2
pop     edx
mov     eax, ebx
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jz      short loc_1000136B
push    esi
push    [ebp+String]
push    offset aSS      ; "%s%s"
push    ebx             ; BufferCount
push    edi             ; Buffer
call    _swprintf_s
add     esp, 14h
test    eax, eax
jle     short loc_10001364
push    edi             ; String
call    _wcslen
and     [ebp+String], 0
pop     ecx
push    0               ; lpOverlapped
lea     ecx, [ebp+String]
push    ecx             ; lpNumberOfBytesWritten
add     eax, eax
push    eax             ; nNumberOfBytesToWrite
mov     eax, [ebp+var_8]
push    edi             ; lpBuffer
push    dword ptr [eax+4] ; hFile
call    ds:WriteFile
mov     [ebp+var_4], eax

loc_10001364:           ; void *
push    edi
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

loc_1000136B:
pop     edi
pop     esi
pop     ebx

loc_1000136E:           ; lpCriticalSection
push    offset CriticalSection
call    ds:LeaveCriticalSection
mov     eax, [ebp+var_4]
leave
retn    4
sub_100012CD endp



; Attributes: bp-based frame

; int __stdcall sub_10001380(DWORD nNumberOfBytesToWrite, LPCVOID lpBuffer)
sub_10001380 proc near

NumberOfBytesWritten= dword ptr -4
nNumberOfBytesToWrite= dword ptr  8
lpBuffer= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
push    edi
mov     esi, offset CriticalSection
push    esi             ; lpCriticalSection
mov     edi, ecx
call    ds:EnterCriticalSection
xor     ebx, ebx
cmp     [ebp+lpBuffer], ebx
jz      short loc_100013B5
push    ebx             ; lpOverlapped
lea     eax, [ebp+NumberOfBytesWritten]
push    eax             ; lpNumberOfBytesWritten
push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
mov     [ebp+NumberOfBytesWritten], ebx
push    [ebp+lpBuffer]  ; lpBuffer
push    dword ptr [edi+4] ; hFile
call    ds:WriteFile
mov     ebx, eax

loc_100013B5:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
leave
retn    8
sub_10001380 endp



; Attributes: bp-based frame fpd=1000h

sub_100013C5 proc near

var_1080= dword ptr -1080h
SystemTime= _SYSTEMTIME ptr -107Ch
var_106C= dword ptr -106Ch
var_1068= dword ptr -1068h
Buffer= word ptr -1064h
var_64= word ptr -64h
Destination= word ptr -24h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
lea     ebp, [esp-1000h]
mov     eax, 1080h
call    __alloca_probe
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+1000h+var_4], eax
mov     eax, [ebp+1000h+arg_4]
push    ebx
push    esi
push    edi
mov     [ebp+1000h+var_1080], eax
mov     eax, [ebp+1000h+arg_C]
mov     ebx, offset CriticalSection
push    ebx             ; lpCriticalSection
mov     esi, ecx
mov     [ebp+1000h+var_1068], eax
call    ds:EnterCriticalSection
mov     edi, [ebp+1000h+arg_0]
xor     eax, eax
mov     [ebp+1000h+var_106C], eax
test    [esi+0Ch], edi
jz      loc_1000152B
cmp     [ebp+1000h+var_1068], eax
jz      loc_1000152B
cmp     [esi+4], eax
jz      loc_1000152B
push    10h             ; Size
push    eax             ; Val
lea     eax, [ebp+1000h+SystemTime]
push    eax             ; void *
call    _memset
push    40h ; '@'       ; Size
lea     eax, [ebp+1000h+var_64]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 18h
lea     eax, [ebp+1000h+SystemTime]
push    eax             ; lpSystemTime
call    ds:GetLocalTime
movzx   eax, [ebp+1000h+SystemTime.wYear]
sub     eax, 7D0h
push    eax
movzx   eax, [ebp+1000h+SystemTime.wDay]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wMonth]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wSecond]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wMinute]
push    eax
movzx   eax, [ebp+1000h+SystemTime.wHour]
push    eax             ; ArgList
push    offset a02d02d02d02d02 ; "%02d:%02d:%02d %02d/%02d/%02d"
lea     eax, [ebp+1000h+var_64]
push    1Fh             ; BufferCount
push    eax             ; Buffer
call    sub_10001000
push    20h ; ' '       ; Size
lea     eax, [ebp+1000h+Destination]
push    0               ; Val
push    eax             ; void *
call    _memset
add     esp, 30h
dec     edi
jz      short loc_100014C4
dec     edi
jz      short loc_100014BD
dec     edi
dec     edi
lea     eax, [ebp+1000h+Destination]
jz      short loc_100014B6
push    offset aMessage_0 ; "MESSAGE:"
jmp     short loc_100014CF

loc_100014B6:
push    offset aDebug   ; "DEBUG:"
jmp     short loc_100014CF

loc_100014BD:
push    offset aError   ; "ERROR:"
jmp     short loc_100014C9

loc_100014C4:
push    offset aInfo    ; "INFO:"

loc_100014C9:
lea     eax, [ebp+1000h+Destination]

loc_100014CF:           ; SizeInWords
push    10h
push    eax             ; Destination
call    _wcscpy_s
add     esp, 0Ch
push    1000h           ; Size
lea     eax, [ebp+1000h+Buffer]
push    0               ; Val
push    eax             ; void *
call    _memset
push    [ebp+1000h+var_1068]
lea     eax, [ebp+1000h+Destination]
push    eax
push    [ebp+1000h+arg_8]
lea     eax, [ebp+1000h+var_64]
push    [ebp+1000h+var_1080]
push    eax
push    dword ptr [esi+8]
lea     eax, [ebp+1000h+Buffer]
push    offset aFromSAtSFileSL ; "FROM: \"%s\" AT: %s\r\nFILE: %s LINE: %"...
push    800h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
mov     eax, [esi]
add     esp, 30h
lea     ecx, [ebp+1000h+Buffer]
push    ecx
mov     ecx, esi
call    dword ptr [eax+1Ch]
mov     [ebp+1000h+var_106C], eax

loc_1000152B:           ; lpCriticalSection
push    ebx
call    ds:LeaveCriticalSection
mov     ecx, [ebp+1000h+var_4]
mov     eax, [ebp+1000h+var_106C]
pop     edi
pop     esi
xor     ecx, ebp        ; StackCookie
pop     ebx
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 1000h
leave
retn    10h
sub_100013C5 endp



; Attributes: bp-based frame

sub_1000154F proc near

pExceptionObject= byte ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
mov     ecx, [ebp+arg_0]
sub     esp, 0Ch
test    ecx, ecx
ja      short loc_1000156A
xor     ecx, ecx

loc_1000155E:
lea     eax, [ecx+ecx]
push    eax             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
leave
retn

loc_1000156A:
or      eax, 0FFFFFFFFh
xor     edx, edx
div     ecx
cmp     eax, 2
jnb     short loc_1000155E
push    0               ; char *
lea     ecx, [ebp+pExceptionObject]
call    sub_1000101C
push    offset pThrowInfo ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
sub_1000154F endp

db 0CCh
; [00000031 BYTES: COLLAPSED FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)]
; [0000004C BYTES: COLLAPSED FUNCTION sub_100015C0]


; Attributes: bp-based frame

sub_1000160C proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 100120CA SIZE 00000023 BYTES

; __unwind { // loc_100120D2
push    4
mov     eax, offset loc_100120D2
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_100132F4
;   try {
and     [ebp+var_4], 0
call    sub_100011F5
mov     ecx, esi
call    sub_10001299
;   } // starts at 10001623
or      [ebp+var_4], 0FFFFFFFFh
mov     dword ptr [esi], offset off_100131E0
call    __EH_epilog3
retn
; } // starts at 1000160C
sub_1000160C endp



; Attributes: bp-based frame

sub_10001643 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100120ED SIZE 00000025 BYTES

; __unwind { // loc_100120F7
push    4
mov     eax, offset loc_100120F7
call    __EH_prolog3
mov     esi, offset CriticalSection
push    esi             ; lpCriticalSection
call    ds:EnterCriticalSection
cmp     dword_1001AAC0, 0
jnz     short loc_1000168B
push    10h             ; Size
call    ??2@YAPAXI@Z    ; operator new(uint)
pop     ecx
mov     ecx, eax
mov     [ebp+var_10], ecx
;   try {
and     [ebp+var_4], 0
test    ecx, ecx
jz      short loc_10001680
call    sub_100015C0
jmp     short loc_10001682

loc_10001680:
xor     eax, eax
;   } // starts at 10001671

loc_10001682:
or      [ebp+var_4], 0FFFFFFFFh
mov     dword_1001AAC0, eax

loc_1000168B:           ; lpCriticalSection
push    esi
call    ds:LeaveCriticalSection
mov     eax, dword_1001AAC0
call    __EH_epilog3
retn
; } // starts at 10001643
sub_10001643 endp




; int __stdcall sub_1000169D(wchar_t *String)
sub_1000169D proc near

String= dword ptr  4

push    ebx
push    ebp
push    esi
push    edi
mov     edi, offset CriticalSection
push    edi             ; lpCriticalSection
mov     esi, ecx
call    ds:EnterCriticalSection
mov     ecx, esi
xor     ebp, ebp
call    sub_100011F5
mov     ebx, [esp+10h+String]
test    ebx, ebx
jz      short loc_100016DA
push    ebx             ; String
call    _wcslen
pop     ecx
test    eax, eax
jz      short loc_100016DA
push    ebx             ; String
call    __wcsdup
pop     ecx
mov     [esi+8], eax
test    eax, eax
jz      short loc_100016DA
inc     ebp

loc_100016DA:           ; lpCriticalSection
push    edi
call    ds:LeaveCriticalSection
pop     edi
pop     esi
mov     eax, ebp
pop     ebp
pop     ebx
retn    4
sub_1000169D endp




sub_100016EA proc near

arg_0= dword ptr  4

cmp     dword ptr [ecx+18h], 8
mov     eax, [esp+arg_0]
mov     [ecx+14h], eax
jb      short loc_100016FC
mov     ecx, [ecx+4]
jmp     short loc_100016FF

loc_100016FC:
add     ecx, 4

loc_100016FF:
xor     edx, edx
mov     [ecx+eax*2], dx
retn    4
sub_100016EA endp




sub_10001708 proc near

arg_0= dword ptr  4

cmp     [esp+arg_0], 0
push    esi
jz      short loc_1000173E
mov     esi, [ecx+18h]
lea     eax, [ecx+4]
cmp     esi, 8
jb      short loc_1000171F
mov     edx, [eax]
jmp     short loc_10001721

loc_1000171F:
mov     edx, eax

loc_10001721:
cmp     [esp+4+arg_0], edx
jb      short loc_1000173E
cmp     esi, 8
jb      short loc_1000172E
mov     eax, [eax]

loc_1000172E:
mov     ecx, [ecx+14h]
lea     eax, [eax+ecx*2]
cmp     eax, [esp+4+arg_0]
jbe     short loc_1000173E
mov     al, 1
jmp     short loc_10001740

loc_1000173E:
xor     al, al

loc_10001740:
pop     esi
retn    4
sub_10001708 endp




; int __thiscall sub_10001744(void *, char)
sub_10001744 proc near

arg_0= byte ptr  4

push    esi
mov     esi, ecx
call    sub_1000160C
test    [esp+4+arg_0], 1
jz      short loc_1000175A
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_1000175A:
mov     eax, esi
pop     esi
retn    4
sub_10001744 endp

; [0000004B BYTES: COLLAPSED FUNCTION std::wstring::_Tidy(bool,uint)]


; Attributes: bp-based frame

sub_100017AB proc near

var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    ecx
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [esi+14h], edi
jnb     short loc_100017C0
call    sub_100044AB

loc_100017C0:
mov     eax, [esi+14h]
sub     eax, edi
cmp     eax, [ebp+arg_4]
jnb     short loc_100017CD
mov     [ebp+arg_4], eax

loc_100017CD:
cmp     [ebp+arg_4], 0
jbe     short loc_10001823
mov     ecx, [esi+18h]
push    ebx
lea     edx, [esi+4]
cmp     ecx, 8
jb      short loc_100017E6
mov     ebx, [edx]
mov     [ebp+arg_0], ebx
jmp     short loc_100017E9

loc_100017E6:
mov     [ebp+arg_0], edx

loc_100017E9:
cmp     ecx, 8
jb      short loc_100017F0
mov     edx, [edx]

loc_100017F0:
mov     ebx, [ebp+arg_4]
sub     eax, ebx
push    eax             ; N
mov     [ebp+var_4], edx
mov     edx, [ebp+arg_0]
lea     eax, [edi+ebx]
lea     eax, [edx+eax*2]
push    eax             ; S2
mov     eax, [ebp+var_4]
sub     ecx, edi
push    ecx             ; N1
lea     eax, [eax+edi*2]
push    eax             ; S1
call    sub_100010E8
mov     eax, [esi+14h]
add     esp, 10h
sub     eax, ebx
push    eax
mov     ecx, esi
call    sub_100016EA
pop     ebx

loc_10001823:
pop     edi
mov     eax, esi
pop     esi
leave
retn    8
sub_100017AB endp



; Attributes: bp-based frame

; int __stdcall sub_1000182B(int, rsize_t N)
sub_1000182B proc near

var_1C= dword ptr -1Ch
S1= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
N= dword ptr  0Ch

; FUNCTION CHUNK AT 10012112 SIZE 0000001B BYTES

; __unwind { // loc_10012112
push    10h
mov     eax, offset loc_10012112
call    __EH_prolog3_catch
mov     edi, ecx
mov     [ebp+var_1C], edi
mov     esi, [ebp+arg_0]
or      esi, 7
cmp     esi, 7FFFFFFEh
jbe     short loc_1000184F
mov     esi, [ebp+arg_0]
jmp     short loc_10001876

loc_1000184F:
mov     ecx, [edi+18h]
mov     [ebp+var_14], ecx
shr     [ebp+var_14], 1
mov     eax, esi
xor     edx, edx
push    3
pop     ebx
div     ebx
mov     edx, [ebp+var_14]
cmp     eax, edx
jnb     short loc_10001876
mov     eax, 7FFFFFFEh
sub     eax, edx
cmp     ecx, eax
ja      short loc_10001876
lea     esi, [edx+ecx]

loc_10001876:
xor     ebx, ebx
;   try {
mov     [ebp+var_4], ebx
push    ebx
lea     eax, [esi+1]
push    eax
call    sub_1000154F
pop     ecx
pop     ecx
mov     [ebp+S1], eax
;   } // starts at 10001878
or      [ebp+var_4], 0FFFFFFFFh
jmp     short loc_100018C0

loc_10001890:
;   catch(...) // owned by 10001878
mov     [ebp+var_10], esp
mov     eax, [ebp+arg_0]
mov     [ebp+arg_0], eax
;   try {
mov     byte ptr [ebp+var_4], 2
push    0
inc     eax
push    eax
call    sub_1000154F
pop     ecx
pop     ecx
mov     [ebp+S1], eax
;   } // starts at 10001899
mov     [ebp+var_4], 1
mov     eax, offset loc_100018B8
retn

loc_100018B8:
xor     ebx, ebx
mov     edi, [ebp+var_1C]
mov     esi, [ebp+arg_0]

loc_100018C0:
cmp     [ebp+N], ebx
jbe     short loc_100018E6
cmp     dword ptr [edi+18h], 8
jb      short loc_100018D0
mov     eax, [edi+4]
jmp     short loc_100018D3

loc_100018D0:
lea     eax, [edi+4]

loc_100018D3:           ; N
push    [ebp+N]
push    eax             ; S2
lea     eax, [esi+1]
push    eax             ; N1
push    [ebp+S1]        ; S1
call    unknown_libname_7 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h

loc_100018E6:           ; N
push    ebx
push    1               ; char
mov     ecx, edi
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+S1]
mov     [edi+4], eax
mov     [edi+18h], esi
push    [ebp+N]
mov     ecx, edi
call    sub_100016EA
call    __EH_epilog3
retn    8

loc_1000190B:
;   catch(...) // owned by 10001899
xor     ebx, ebx
push    ebx             ; N
push    1               ; char
mov     ecx, [ebp+var_1C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
push    ebx             ; pThrowInfo
push    ebx             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; } // starts at 1000182B
sub_1000182B endp

align 10h
; [00000015 BYTES: COLLAPSED FUNCTION std::wstring::wstring(void)]
; START OF FUNCTION CHUNK FOR sub_10003D17
;   ADDITIONAL PARENT FUNCTION sub_10001C29
;   ADDITIONAL PARENT FUNCTION sub_10001D44
;   ADDITIONAL PARENT FUNCTION sub_10001E27
;   ADDITIONAL PARENT FUNCTION sub_10001F23
;   ADDITIONAL PARENT FUNCTION sub_1000348D
;   ADDITIONAL PARENT FUNCTION sub_1000350F
;   ADDITIONAL PARENT FUNCTION sub_10003664
;   ADDITIONAL PARENT FUNCTION sub_100037FC
;   ADDITIONAL PARENT FUNCTION sub_10003E73

loc_10001935:           ; N
; __unwind { // loc_10012615
push    0
push    1               ; char
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
retn
; } // starts at 10001935
; END OF FUNCTION CHUNK FOR sub_10003D17



sub_1000193F proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
push    edi
mov     edi, [esp+8+arg_0]
mov     esi, ecx
cmp     edi, 7FFFFFFEh
jbe     short loc_10001954
call    sub_1000435F

loc_10001954:
cmp     [esi+18h], edi
jnb     short loc_10001966
push    dword ptr [esi+14h] ; N
mov     ecx, esi
push    edi             ; int
call    sub_1000182B
jmp     short loc_10001993

loc_10001966:
cmp     [esp+8+arg_4], 0
jz      short loc_10001987
cmp     edi, 8
jnb     short loc_10001987
mov     eax, [esi+14h]
cmp     edi, eax
jnb     short loc_1000197B
mov     eax, edi

loc_1000197B:           ; N
push    eax
push    1               ; char
mov     ecx, esi
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
jmp     short loc_10001993

loc_10001987:
test    edi, edi
jnz     short loc_10001993
push    edi
mov     ecx, esi
call    sub_100016EA

loc_10001993:
xor     eax, eax
cmp     eax, edi
sbb     eax, eax
pop     edi
neg     eax
pop     esi
retn    8
sub_1000193F endp



; Attributes: bp-based frame

sub_100019A0 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_4]
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     ebx, ecx
cmp     [edi+14h], eax
jnb     short loc_100019B8
call    sub_100044AB

loc_100019B8:
mov     esi, [edi+14h]
mov     eax, [ebp+arg_4]
sub     esi, eax
cmp     [ebp+arg_8], esi
jnb     short loc_100019C8
mov     esi, [ebp+arg_8]

loc_100019C8:
mov     ecx, ebx
cmp     ebx, edi
jnz     short loc_100019E6
push    0FFFFFFFFh
add     esi, eax
push    esi
call    sub_100017AB
push    [ebp+arg_4]
mov     ecx, ebx
push    0
call    sub_100017AB
jmp     short loc_10001A2A

loc_100019E6:
push    0
push    esi
call    sub_1000193F
test    al, al
jz      short loc_10001A2A
cmp     dword ptr [edi+18h], 8
jb      short loc_100019FD
mov     edi, [edi+4]
jmp     short loc_10001A00

loc_100019FD:
add     edi, 4

loc_10001A00:
mov     ecx, [ebx+18h]
cmp     ecx, 8
jb      short loc_10001A0D
mov     eax, [ebx+4]
jmp     short loc_10001A10

loc_10001A0D:
lea     eax, [ebx+4]

loc_10001A10:
mov     edx, [ebp+arg_4]
push    esi             ; N
lea     edx, [edi+edx*2]
push    edx             ; S2
push    ecx             ; N1
push    eax             ; S1
call    unknown_libname_7 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h
push    esi
mov     ecx, ebx
call    sub_100016EA

loc_10001A2A:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
pop     ebp
retn    0Ch
sub_100019A0 endp

; [00000074 BYTES: COLLAPSED FUNCTION std::wstring::assign(wchar_t const *,uint)]


; Attributes: bp-based frame

; int __stdcall sub_10001AA7(int, int, rsize_t N)
sub_10001AA7 proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
N= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
mov     ebx, [ebp+arg_4]
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, ecx
cmp     [edi+14h], ebx
jnb     short loc_10001ABF
call    sub_100044AB

loc_10001ABF:
mov     eax, [edi+14h]
sub     eax, ebx
mov     ebx, [ebp+N]
cmp     eax, ebx
jnb     short loc_10001AD0
mov     ebx, eax
mov     [ebp+N], ebx

loc_10001AD0:
or      eax, 0FFFFFFFFh
sub     eax, [esi+14h]
cmp     eax, ebx
jbe     short loc_10001AE4
mov     eax, [esi+14h]
lea     ecx, [eax+ebx]
cmp     ecx, eax
jnb     short loc_10001AE9

loc_10001AE4:
call    sub_1000435F

loc_10001AE9:
test    ebx, ebx
jbe     short loc_10001B47
mov     eax, [esi+14h]
add     eax, ebx
push    0
push    eax
mov     ecx, esi
mov     [ebp+arg_0], eax
call    sub_1000193F
test    al, al
jz      short loc_10001B47
cmp     dword ptr [edi+18h], 8
jb      short loc_10001B0E
mov     edi, [edi+4]
jmp     short loc_10001B11

loc_10001B0E:
add     edi, 4

loc_10001B11:
mov     eax, [esi+18h]
cmp     eax, 8
jb      short loc_10001B1E
mov     edx, [esi+4]
jmp     short loc_10001B21

loc_10001B1E:
lea     edx, [esi+4]

loc_10001B21:           ; N
push    [ebp+N]
mov     ecx, [esi+14h]
mov     ebx, [ebp+arg_4]
lea     edi, [edi+ebx*2]
sub     eax, ecx
push    edi             ; S2
push    eax             ; N1
lea     eax, [edx+ecx*2]
push    eax             ; S1
call    unknown_libname_7 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h
push    [ebp+arg_0]
mov     ecx, esi
call    sub_100016EA

loc_10001B47:
pop     edi
mov     eax, esi
pop     esi
pop     ebx
pop     ebp
retn    0Ch
sub_10001AA7 endp

; [0000001D BYTES: COLLAPSED FUNCTION std::wstring::assign(wchar_t const *)]


; Attributes: bp-based frame

; int __thiscall sub_10001B6D(int, wchar_t *S2, rsize_t N)
sub_10001B6D proc near

S2= dword ptr  8
N= dword ptr  0Ch

push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+S2]
push    edi
mov     esi, ecx
call    sub_10001708
test    al, al
jz      short loc_10001BA1
cmp     dword ptr [esi+18h], 8
jb      short loc_10001B8C
mov     eax, [esi+4]
jmp     short loc_10001B8F

loc_10001B8C:
lea     eax, [esi+4]

loc_10001B8F:           ; N
push    [ebp+N]
sub     edi, eax
sar     edi, 1
push    edi             ; int
push    esi             ; int
mov     ecx, esi
call    sub_10001AA7
jmp     short loc_10001C06

loc_10001BA1:
or      eax, 0FFFFFFFFh
sub     eax, [esi+14h]
push    ebx
mov     ebx, [ebp+N]
cmp     eax, ebx
jbe     short loc_10001BB9
mov     eax, [esi+14h]
lea     ecx, [eax+ebx]
cmp     ecx, eax
jnb     short loc_10001BBE

loc_10001BB9:
call    sub_1000435F

loc_10001BBE:
test    ebx, ebx
jbe     short loc_10001C03
mov     edi, [esi+14h]
push    0
add     edi, ebx
push    edi
mov     ecx, esi
call    sub_1000193F
test    al, al
jz      short loc_10001C03
mov     eax, [esi+18h]
cmp     eax, 8
jb      short loc_10001BE2
mov     edx, [esi+4]
jmp     short loc_10001BE5

loc_10001BE2:
lea     edx, [esi+4]

loc_10001BE5:
mov     ecx, [esi+14h]
push    ebx             ; N
push    [ebp+S2]        ; S2
sub     eax, ecx
push    eax             ; N1
lea     eax, [edx+ecx*2]
push    eax             ; S1
call    unknown_libname_7 ; Microsoft VisualC 2-14/net runtime
add     esp, 10h
push    edi
mov     ecx, esi
call    sub_100016EA

loc_10001C03:
mov     eax, esi
pop     ebx

loc_10001C06:
pop     edi
pop     esi
pop     ebp
retn    8
sub_10001B6D endp

; [0000001D BYTES: COLLAPSED FUNCTION std::wstring::assign(wchar_t const *)]


; Attributes: bp-based frame

; int __stdcall sub_10001C29(int, int, int Value)
sub_10001C29 proc near

var_5C= dword ptr -5Ch
var_58= dword ptr -58h
Buffer= word ptr -54h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
Value= dword ptr  10h

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001212D SIZE 00000038 BYTES

; __unwind { // loc_10012140
push    50h
mov     eax, offset loc_10012140
call    __EH_prolog3_catch_GS
mov     edi, ecx
mov     [ebp+var_58], edi
mov     ebx, [ebp+arg_0]
mov     eax, [ebp+arg_4]
mov     [ebp+var_5C], eax
call    sub_10004837
;   try {
and     [ebp+var_4], 0
mov     dword ptr [edi], offset off_10013400
lea     esi, [edi+0Ch]
mov     ecx, esi
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 10001C48
;   try {
mov     byte ptr [ebp+var_4], 1
;   } // starts at 10001C5C
;   try {
mov     byte ptr [ebp+var_4], 2
push    offset aMessage ; "Message: "
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
mov     ebx, [ebx]
mov     ecx, esi        ; int
test    ebx, ebx
jz      short loc_10001C7B
push    ebx
jmp     short loc_10001C80

loc_10001C7B:
push    offset aEmptyMessage ; "empty message"

loc_10001C80:
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
mov     ebx, offset asc_100133C8 ; " "
push    ebx             ; String
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
push    offset aFile    ; "File: "
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
mov     eax, [ebp+var_5C]
mov     eax, [eax]
mov     ecx, esi        ; int
test    eax, eax
jz      short loc_10001CAC
push    eax
jmp     short loc_10001CB1

loc_10001CAC:
push    offset aUnknownFile ; "unknown file"

loc_10001CB1:
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
push    ebx             ; String
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
push    offset aLine    ; "Line: "
mov     ecx, esi        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
xor     eax, eax
mov     [ebp+Buffer], ax
push    0Ah             ; Radix
push    20h ; ' '       ; BufferCount
lea     eax, [ebp+Buffer]
push    eax             ; Buffer
push    [ebp+Value]     ; Value
call    __itow_s
add     esp, 10h
mov     ecx, esi        ; int
test    eax, eax
jnz     short loc_10001CEF
lea     eax, [ebp+Buffer]
push    eax
jmp     short loc_10001CF4

loc_10001CEF:
push    offset aUnknownLine ; "unknown line"

loc_10001CF4:
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
;   } // starts at 10001C60
;   try {
mov     [ebp+var_4], 1
jmp     short loc_10001D22

loc_10001D02:
;   catch(...) // owned by 10001C60
push    offset aExceptionInCon ; "Exception in constructor"
mov     ecx, [ebp+var_58]
add     ecx, 0Ch
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
;   } // starts at 10001CF9
;   try {
mov     [ebp+var_4], 1
mov     eax, offset loc_10001D1F
retn

loc_10001D1F:
mov     edi, [ebp+var_58]
;   } // starts at 10001D12

loc_10001D22:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, edi
call    __EH_epilog3_catch_GS
retn    0Ch
; } // starts at 10001C29
sub_10001C29 endp




sub_10001D30 proc near
mov     eax, offset aPleaseUseWhatW ; "Please use \"what_w\" member function i"...
retn
sub_10001D30 endp




sub_10001D36 proc near
cmp     dword ptr [ecx+24h], 8
jb      short loc_10001D40
mov     eax, [ecx+10h]
retn

loc_10001D40:
lea     eax, [ecx+10h]
retn
sub_10001D36 endp



; Attributes: bp-based frame

sub_10001D44 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10012165 SIZE 0000002E BYTES

; __unwind { // loc_10012178
push    4
mov     eax, offset loc_10012178
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi], offset off_10013400
;   try {
and     [ebp+var_4], 0
push    0               ; N
push    1               ; char
lea     ecx, [esi+0Ch]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10001D5B
or      [ebp+var_4], 0FFFFFFFFh
mov     ecx, esi
call    sub_10004915
call    __EH_epilog3
retn
; } // starts at 10001D44
sub_10001D44 endp


loc_10001D7C:
push    esi
mov     esi, ecx
call    sub_10001D44
test    byte ptr [esp+8], 1
jz      short loc_10001D92
push    esi
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10001D92:
mov     eax, esi
pop     esi
retn    4


; Attributes: bp-based frame

sub_10001D98 proc near

pExceptionObject= byte ptr -40h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012193 SIZE 00000023 BYTES

; __unwind { // loc_1001219B
push    34h
mov     eax, offset loc_1001219B
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_18], esi
mov     dword ptr [esi], offset off_100131B8
;   try {
and     [ebp+var_4], 0
push    0FA0h           ; dwSpinCount
lea     eax, [esi+4]
push    eax             ; lpCriticalSection
mov     dword ptr [esi], offset off_100131CC
call    ds:InitializeCriticalSectionAndSpinCount
test    eax, eax
jnz     short loc_10001DFA
push    44h ; 'D'       ; Value
lea     eax, [ebp+var_10]
push    eax             ; int
lea     eax, [ebp+var_14]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]
mov     [ebp+var_10], offset aCommonIncludeC ; "..\\..\\..\\..\\common\\include\\critse"...
mov     [ebp+var_14], offset aCouldNotCreate ; "could not create critical section"
call    sub_10001C29
push    offset stru_10016E7C ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
;   } // starts at 10001DAF

loc_10001DFA:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 10001D98
sub_10001D98 endp




sub_10001E06 proc near

arg_0= dword ptr  4

mov     eax, [esp+arg_0]
push    esi
mov     esi, ecx
cmp     esi, eax
jz      short loc_10001E21
push    0FFFFFFFFh
push    0
add     eax, 0Ch
push    eax
lea     ecx, [esi+0Ch]
call    sub_100019A0

loc_10001E21:
mov     eax, esi
pop     esi
retn    4
sub_10001E06 endp



; Attributes: bp-based frame

sub_10001E27 proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100121B6 SIZE 0000002E BYTES

; __unwind { // loc_100121C9
push    8
mov     eax, offset loc_100121C9
call    __EH_prolog3_catch
mov     esi, ecx
mov     [ebp+var_14], esi
call    sub_10004837
;   try {
and     [ebp+var_4], 0
mov     dword ptr [esi], offset off_10013400
lea     ecx, [esi+0Ch]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 10001E3D
;   try {
mov     byte ptr [ebp+var_4], 1
;   } // starts at 10001E4F
;   try {
mov     byte ptr [ebp+var_4], 2
push    [ebp+arg_0]
mov     ecx, esi
call    sub_10001E06
;   } // starts at 10001E53
;   try {
mov     [ebp+var_4], 1
jmp     short loc_10001E8A

loc_10001E6A:
;   catch(...) // owned by 10001E53
push    offset aExceptionInCon ; "Exception in constructor"
mov     ecx, [ebp+var_14]
add     ecx, 0Ch
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
;   } // starts at 10001E61
;   try {
mov     [ebp+var_4], 1
mov     eax, offset loc_10001E87
retn

loc_10001E87:
mov     esi, [ebp+var_14]
;   } // starts at 10001E7A

loc_10001E8A:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn    4
; } // starts at 10001E27
sub_10001E27 endp

; Exported entry   2. ??1CSecurity@@UAE@XZ



; void __thiscall CSecurity::~CSecurity(CSecurity *__hidden this)
public ??1CSecurity@@UAE@XZ
??1CSecurity@@UAE@XZ proc near
mov     dword ptr [ecx], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
retn
??1CSecurity@@UAE@XZ endp

; Exported entry   1. ??0CSecurity@@QAE@ABV0@@Z



; CSecurity *__thiscall CSecurity::CSecurity(CSecurity *__hidden this, const struct CSecurity *)
public ??0CSecurity@@QAE@ABV0@@Z
??0CSecurity@@QAE@ABV0@@Z proc near
mov     eax, ecx
mov     dword ptr [eax], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
retn    4
??0CSecurity@@QAE@ABV0@@Z endp

; Exported entry   3. ??4CSecurity@@QAEAAV0@ABV0@@Z



; public: class CSecurity & __thiscall CSecurity::operator=(class CSecurity const &)
public ??4CSecurity@@QAEAAV0@ABV0@@Z
??4CSecurity@@QAEAAV0@ABV0@@Z proc near
mov     eax, ecx
retn    4
??4CSecurity@@QAEAAV0@ABV0@@Z endp




; int __thiscall sub_10001EAF(void *, char)
sub_10001EAF proc near

arg_0= byte ptr  4

push    ebx
mov     bl, [esp+4+arg_0]
push    esi
mov     esi, ecx
test    bl, 2
jz      short loc_10001EE0
push    edi
push    offset ??1CSecurity@@UAE@XZ ; void (__thiscall *)(void *)
lea     edi, [esi-4]
push    dword ptr [edi] ; int
push    4               ; unsigned int
push    esi             ; void *
call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
test    bl, 1
jz      short loc_10001EDB
push    edi             ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

loc_10001EDB:
mov     eax, edi
pop     edi
jmp     short loc_10001EF4

loc_10001EE0:
mov     dword ptr [esi], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
test    bl, 1
jz      short loc_10001EF2
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10001EF2:
mov     eax, esi

loc_10001EF4:
pop     esi
pop     ebx
retn    4
sub_10001EAF endp




sub_10001EF9 proc near
mov     eax, ecx
retn
sub_10001EF9 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1]
; [00000026 BYTES: COLLAPSED FUNCTION std::wstring::wstring(std::wstring const &)]


; Attributes: bp-based frame

sub_10001F23 proc near

var_24= dword ptr -24h
String= dword ptr -20h
var_1C= dword ptr -1Ch
Type= dword ptr -18h
cbData= dword ptr -14h
phkResult= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100121E4 SIZE 00000034 BYTES

; __unwind { // loc_100121FD
push    18h
mov     eax, offset loc_100121FD
call    __EH_prolog3
xor     esi, esi
;   try {
mov     [ebp+var_4], esi
mov     ecx, [ebp+arg_0]
mov     [ebp+var_1C], ecx
mov     [ebp+var_24], esi
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::wstring::wstring(void)
;   } // starts at 10001F31
;   try {
mov     [ebp+var_4], esi
lea     eax, [ebp+phkResult]
push    eax             ; phkResult
xor     edi, edi
inc     edi
push    edi             ; samDesired
push    esi             ; ulOptions
push    offset SubKey   ; "SOFTWARE\\PassThruSupport.04.04\\Jastec"
push    80000002h       ; hKey
mov     [ebp+var_24], edi
mov     [ebp+phkResult], esi
call    ds:RegOpenKeyExW
test    eax, eax
jnz     short loc_10001FCE
lea     eax, [ebp+cbData]
push    eax             ; lpcbData
push    esi             ; lpData
lea     eax, [ebp+Type]
push    eax             ; lpType
push    esi             ; lpReserved
mov     ebx, offset ValueName ; "FunctionLibrary"
push    ebx             ; lpValueName
push    [ebp+phkResult] ; hKey
mov     [ebp+Type], edi
mov     edi, ds:RegQueryValueExW
mov     [ebp+cbData], esi
call    edi ; RegQueryValueExW
test    eax, eax
jnz     short loc_10001FC5
push    [ebp+cbData]    ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
pop     ecx
mov     [ebp+String], eax
cmp     eax, esi
jz      short loc_10001FC5
lea     ecx, [ebp+cbData]
push    ecx             ; lpcbData
push    eax             ; lpData
lea     eax, [ebp+Type]
push    eax             ; lpType
push    esi             ; lpReserved
push    ebx             ; lpValueName
push    [ebp+phkResult] ; hKey
call    edi ; RegQueryValueExW
test    eax, eax
jnz     short loc_10001FBC
push    [ebp+String]    ; String
mov     ecx, [ebp+var_1C]
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)

loc_10001FBC:           ; void *
push    [ebp+String]
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

loc_10001FC5:           ; hKey
push    [ebp+phkResult]
call    ds:RegCloseKey

loc_10001FCE:
mov     eax, [ebp+var_1C]
call    __EH_epilog3
retn    4
;   } // starts at 10001F42
; } // starts at 10001F23
sub_10001F23 endp

; Exported entry  14. Initialize


; Attributes: bp-based frame

public Initialize
Initialize proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012218 SIZE 0000001B BYTES

; __unwind { // loc_10012218
push    8
mov     eax, offset loc_10012218
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002003
mov     edx, [eax]
push    offset aBeginFunctionI ; "Begin function \"Initialize\""
push    21h ; '!'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002003:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE0
call    sub_10003A12
mov     [ebp+var_14], eax
;   } // starts at 1000200A
or      [ebp+var_4], 0FFFFFFFFh

loc_10002022:
call    sub_10001643
test    eax, eax
jz      short loc_10002040
mov     edx, [eax]
push    offset aEndFunctionIni ; "End function \"Initialize\""
push    2Eh ; '.'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002040:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002049:
;   catch(...) // owned by 1000200A
call    sub_10001643
test    eax, eax
jz      short loc_10002067
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    2Bh ; '+'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002067:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002022
retn
; } // starts at 10001FD9
Initialize endp

; Exported entry  21. UnInitialize


; Attributes: bp-based frame

public UnInitialize
UnInitialize proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012233 SIZE 0000001B BYTES

; __unwind { // loc_10012233
push    8
mov     eax, offset loc_10012233
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_1000209B
mov     edx, [eax]
push    offset aBeginFunctionU ; "Begin function \"UnInitialize\""
push    35h ; '5'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000209B:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE0
call    sub_10003A12
mov     [ebp+var_14], eax
;   } // starts at 100020A2
or      [ebp+var_4], 0FFFFFFFFh

loc_100020BA:
call    sub_10001643
test    eax, eax
jz      short loc_100020D8
mov     edx, [eax]
push    offset aEndFunctionUni ; "End function \"UnInitialize\""
push    42h ; 'B'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100020D8:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_100020E1:
;   catch(...) // owned by 100020A2
call    sub_10001643
test    eax, eax
jz      short loc_100020FF
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    3Fh ; '?'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100020FF:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_100020BA
retn
; } // starts at 10002071
UnInitialize endp

; Exported entry  15. InstallCallback


; Attributes: bp-based frame

public InstallCallback
InstallCallback proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001224E SIZE 0000001B BYTES

; __unwind { // loc_1001224E
push    8
mov     eax, offset loc_1001224E
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002133
mov     edx, [eax]
push    offset aBeginFunctionI_0 ; "Begin function \"InstallCallback\""
push    4Ah ; 'J'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002133:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_4]
push    [ebp+arg_0]
push    offset unk_1001AAE0
call    sub_10003A0A
mov     [ebp+var_14], eax
;   } // starts at 1000213A
or      [ebp+var_4], 0FFFFFFFFh

loc_10002155:
call    sub_10001643
test    eax, eax
jz      short loc_10002173
mov     edx, [eax]
push    offset aEndFunctionIns ; "End function \"InstallCallback\""
push    57h ; 'W'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002173:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_1000217C:
;   catch(...) // owned by 1000213A
call    sub_10001643
test    eax, eax
jz      short loc_1000219A
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    54h ; 'T'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000219A:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002155
retn
; } // starts at 10002109
InstallCallback endp

; Exported entry  22. UninstallCallback


; Attributes: bp-based frame

public UninstallCallback
UninstallCallback proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012269 SIZE 0000001B BYTES

; __unwind { // loc_10012269
push    8
mov     eax, offset loc_10012269
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_100021CE
mov     edx, [eax]
push    offset aBeginFunctionU_0 ; "Begin function \"UninstallCallback\""
push    5Eh ; '^'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100021CE:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE0
call    sub_10003A12
mov     [ebp+var_14], eax
;   } // starts at 100021D5
or      [ebp+var_4], 0FFFFFFFFh

loc_100021ED:
call    sub_10001643
test    eax, eax
jz      short loc_1000220B
mov     edx, [eax]
push    offset aEndFunctionUni_0 ; "End function \"UninstallCallback\""
push    6Bh ; 'k'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000220B:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002214:
;   catch(...) // owned by 100021D5
call    sub_10001643
test    eax, eax
jz      short loc_10002232
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    68h ; 'h'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002232:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_100021ED
retn
; } // starts at 100021A4
UninstallCallback endp

; Exported entry  16. RequestShowUI


; Attributes: bp-based frame

public RequestShowUI
RequestShowUI proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012284 SIZE 0000001B BYTES

; __unwind { // loc_10012284
push    8
mov     eax, offset loc_10012284
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002266
mov     edx, [eax]
push    offset aBeginFunctionR ; "Begin function \"RequestShowUI\""
push    72h ; 'r'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002266:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE0
call    sub_10003A12
mov     [ebp+var_14], eax
;   } // starts at 1000226D
or      [ebp+var_4], 0FFFFFFFFh

loc_10002285:
call    sub_10001643
test    eax, eax
jz      short loc_100022A3
mov     edx, [eax]
push    offset aEndFunctionReq ; "End function \"RequestShowUI\""
push    7Fh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100022A3:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_100022AC:
;   catch(...) // owned by 1000226D
call    sub_10001643
test    eax, eax
jz      short loc_100022CA
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    7Ch ; '|'
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100022CA:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002285
retn
; } // starts at 1000223C
RequestShowUI endp

; Exported entry  12. GetServiceHandle


; Attributes: bp-based frame

public GetServiceHandle
GetServiceHandle proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001229F SIZE 0000001B BYTES

; __unwind { // loc_1001229F
push    8
mov     eax, offset loc_1001229F
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002301
mov     edx, [eax]
push    offset aBeginFunctionG ; "Begin function \"GetServiceHandle\""
push    86h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002301:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE0
call    sub_10003A12
mov     [ebp+var_14], eax
;   } // starts at 10002308
or      [ebp+var_4], 0FFFFFFFFh

loc_10002320:
call    sub_10001643
test    eax, eax
jz      short loc_10002341
mov     edx, [eax]
push    offset aEndFunctionGet ; "End function \"GetServiceHandle\""
push    93h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002341:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_1000234A:
;   catch(...) // owned by 10002308
call    sub_10001643
test    eax, eax
jz      short loc_1000236B
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    90h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000236B:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002320
retn
; } // starts at 100022D4
GetServiceHandle endp

; Exported entry  13. Init


; Attributes: bp-based frame

public Init
Init proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100122BA SIZE 0000001B BYTES

; __unwind { // loc_100122BA
push    8
mov     eax, offset loc_100122BA
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_100023A2
mov     edx, [eax]
push    offset aBeginFunctionI_1 ; "Begin function \"Init\""
push    9Fh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100023A2:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_4]     ; int
push    [ebp+arg_0]     ; wchar_t *
push    0               ; int
push    offset unk_1001AAE4 ; int
call    sub_10003B7C
mov     [ebp+var_14], eax
;   } // starts at 100023A9
or      [ebp+var_4], 0FFFFFFFFh

loc_100023C6:
call    sub_10001643
test    eax, eax
jz      short loc_100023E7
mov     edx, [eax]
push    offset aEndFunctionIni_0 ; "End function \"Init\""
push    0ACh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100023E7:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_100023F0:
;   catch(...) // owned by 100023A9
call    sub_10001643
test    eax, eax
jz      short loc_10002411
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    0A9h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002411:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_100023C6
retn
; } // starts at 10002375
Init endp

; Exported entry  20. StartConfigUI


; Attributes: bp-based frame

public StartConfigUI
StartConfigUI proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100122D5 SIZE 0000001B BYTES

; __unwind { // loc_100122D5
push    8
mov     eax, offset loc_100122D5
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002448
mov     edx, [eax]
push    offset aBeginFunctionS ; "Begin function \"StartConfigUI\""
push    0B3h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002448:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE4
call    sub_10003A1A
mov     [ebp+var_14], eax
;   } // starts at 1000244F
or      [ebp+var_4], 0FFFFFFFFh

loc_10002467:
call    sub_10001643
test    eax, eax
jz      short loc_10002488
mov     edx, [eax]
push    offset aEndFunctionSta ; "End function \"StartConfigUI\""
push    0C0h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002488:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002491:
;   catch(...) // owned by 1000244F
call    sub_10001643
test    eax, eax
jz      short loc_100024B2
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    0BDh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100024B2:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002467
retn
; } // starts at 1000241B
StartConfigUI endp

; Exported entry   6. GetDefaultConfig


; Attributes: bp-based frame

public GetDefaultConfig
GetDefaultConfig proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100122F0 SIZE 0000001B BYTES

; __unwind { // loc_100122F0
push    8
mov     eax, offset loc_100122F0
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_100024E9
mov     edx, [eax]
push    offset aBeginFunctionG_0 ; "Begin function \"GetDefaultConfig\""
push    0C7h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100024E9:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAE4
call    sub_10003A1A
mov     [ebp+var_14], eax
;   } // starts at 100024F0
or      [ebp+var_4], 0FFFFFFFFh

loc_10002508:
call    sub_10001643
test    eax, eax
jz      short loc_10002529
mov     edx, [eax]
push    offset aEndFunctionGet_0 ; "End function \"GetDefaultConfig\""
push    0D4h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002529:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002532:
;   catch(...) // owned by 100024F0
call    sub_10001643
test    eax, eax
jz      short loc_10002553
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    0D1h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002553:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002508
retn
; } // starts at 100024BC
GetDefaultConfig endp

; Exported entry   7. GetDriverInfo


; Attributes: bp-based frame

public GetDriverInfo
GetDriverInfo proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 1001230B SIZE 0000001B BYTES

; __unwind { // loc_1001230B
push    8
mov     eax, offset loc_1001230B
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_1000258A
mov     edx, [eax]
push    offset aBeginFunctionG_1 ; "Begin function \"GetDriverInfo\""
push    0DBh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000258A:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    offset unk_1001AAE4
call    sub_10003A29
mov     [ebp+var_14], eax
;   } // starts at 10002591
or      [ebp+var_4], 0FFFFFFFFh

loc_100025A6:
call    sub_10001643
test    eax, eax
jz      short loc_100025C7
mov     edx, [eax]
push    offset aEndFunctionGet_1 ; "End function \"GetDriverInfo\""
push    0E8h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100025C7:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_100025D0:
;   catch(...) // owned by 10002591
call    sub_10001643
test    eax, eax
jz      short loc_100025F1
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    0E5h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100025F1:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_100025A6
retn
; } // starts at 1000255D
GetDriverInfo endp

; Exported entry   8. GetDriverProperties


; Attributes: bp-based frame

public GetDriverProperties
GetDriverProperties proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012326 SIZE 0000001B BYTES

; __unwind { // loc_10012326
push    8
mov     eax, offset loc_10012326
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002628
mov     edx, [eax]
push    offset aBeginFunctionG_2 ; "Begin function \"GetDriverProperties\""
push    0F0h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002628:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_4]
push    [ebp+arg_0]
push    offset unk_1001AAE4
call    sub_10003A31
mov     [ebp+var_14], eax
;   } // starts at 1000262F
or      [ebp+var_4], 0FFFFFFFFh

loc_1000264A:
call    sub_10001643
test    eax, eax
jz      short loc_1000266B
mov     edx, [eax]
push    offset aEndFunctionGet_2 ; "End function \"GetDriverProperties\""
push    0FDh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000266B:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002674:
;   catch(...) // owned by 1000262F
call    sub_10001643
test    eax, eax
jz      short loc_10002695
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    0FAh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002695:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_1000264A
retn
; } // starts at 100025FB
GetDriverProperties endp

; Exported entry   9. GetDriverProperties2


; Attributes: bp-based frame

public GetDriverProperties2
GetDriverProperties2 proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 10012341 SIZE 0000001B BYTES

; __unwind { // loc_10012341
push    8
mov     eax, offset loc_10012341
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_100026CC
mov     edx, [eax]
push    offset aBeginFunctionG_3 ; "Begin function \"GetDriverProperties2\""
push    10Ah
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100026CC:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
push    offset unk_1001AAE8
call    sub_10003A40
mov     [ebp+var_14], eax
;   } // starts at 100026D3
or      [ebp+var_4], 0FFFFFFFFh

loc_100026F1:
call    sub_10001643
test    eax, eax
jz      short loc_10002712
mov     edx, [eax]
push    offset aEndFunctionGet_3 ; "End function \"GetDriverProperties2\""
push    117h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002712:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_1000271B:
;   catch(...) // owned by 100026D3
call    sub_10001643
test    eax, eax
jz      short loc_1000273C
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    114h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000273C:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_100026F1
retn
; } // starts at 1000269F
GetDriverProperties2 endp

; Exported entry  18. SetDriverProperties2


; Attributes: bp-based frame

public SetDriverProperties2
SetDriverProperties2 proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 1001235C SIZE 0000001B BYTES

; __unwind { // loc_1001235C
push    8
mov     eax, offset loc_1001235C
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002773
mov     edx, [eax]
push    offset aBeginFunctionS_0 ; "Begin function \"SetDriverProperties2\""
push    120h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002773:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
push    offset unk_1001AAE8
call    sub_10003A40
mov     [ebp+var_14], eax
;   } // starts at 1000277A
or      [ebp+var_4], 0FFFFFFFFh

loc_10002798:
call    sub_10001643
test    eax, eax
jz      short loc_100027B9
mov     edx, [eax]
push    offset aEndFunctionSet ; "End function \"SetDriverProperties2\""
push    12Dh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100027B9:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_100027C2:
;   catch(...) // owned by 1000277A
call    sub_10001643
test    eax, eax
jz      short loc_100027E3
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    12Ah
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100027E3:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002798
retn
; } // starts at 10002746
SetDriverProperties2 endp

; Exported entry  19. SetSSAData


; Attributes: bp-based frame

public SetSSAData
SetSSAData proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012377 SIZE 0000001B BYTES

; __unwind { // loc_10012377
push    8
mov     eax, offset loc_10012377
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_1000281A
mov     edx, [eax]
push    offset aBeginFunctionS_1 ; "Begin function \"SetSSAData\""
push    139h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000281A:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAF0
call    sub_10003A12
mov     [ebp+var_14], eax
;   } // starts at 10002821
or      [ebp+var_4], 0FFFFFFFFh

loc_10002839:
call    sub_10001643
test    eax, eax
jz      short loc_1000285A
mov     edx, [eax]
push    offset aEndFunctionSet_0 ; "End function \"SetSSAData\""
push    146h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000285A:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002863:
;   catch(...) // owned by 10002821
call    sub_10001643
test    eax, eax
jz      short loc_10002884
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    143h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002884:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002839
retn
; } // starts at 100027ED
SetSSAData endp

; Exported entry  10. GetSSAData


; Attributes: bp-based frame

public GetSSAData
GetSSAData proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012392 SIZE 0000001B BYTES

; __unwind { // loc_10012392
push    8
mov     eax, offset loc_10012392
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_100028BB
mov     edx, [eax]
push    offset aBeginFunctionG_4 ; "Begin function \"GetSSAData\""
push    14Dh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100028BB:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAF0
call    sub_10003A48
mov     [ebp+var_14], eax
;   } // starts at 100028C2
or      [ebp+var_4], 0FFFFFFFFh

loc_100028DA:
call    sub_10001643
test    eax, eax
jz      short loc_100028FB
mov     edx, [eax]
push    offset aEndFunctionGet_4 ; "End function \"GetSSAData\""
push    15Ah
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100028FB:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002904:
;   catch(...) // owned by 100028C2
call    sub_10001643
test    eax, eax
jz      short loc_10002925
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    157h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002925:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_100028DA
retn
; } // starts at 1000288E
GetSSAData endp

; Exported entry  17. SCAEnableECU


; Attributes: bp-based frame

public SCAEnableECU
SCAEnableECU proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100123AD SIZE 0000001B BYTES

; __unwind { // loc_100123AD
push    8
mov     eax, offset loc_100123AD
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_1000295C
mov     edx, [eax]
push    offset aBeginFunctionS_2 ; "Begin function \"SCAEnableECU\""
push    161h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000295C:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAF0
call    sub_10003A50
mov     [ebp+var_14], eax
;   } // starts at 10002963
or      [ebp+var_4], 0FFFFFFFFh

loc_1000297B:
call    sub_10001643
test    eax, eax
jz      short loc_1000299C
mov     edx, [eax]
push    offset aEndFunctionSca ; "End function \"SCAEnableECU\""
push    16Eh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000299C:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_100029A5:
;   catch(...) // owned by 10002963
call    sub_10001643
test    eax, eax
jz      short loc_100029C6
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    16Bh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100029C6:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_1000297B
retn
; } // starts at 1000292F
SCAEnableECU endp

; Exported entry  11. GetSalesOrganization


; Attributes: bp-based frame

public GetSalesOrganization
GetSalesOrganization proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100123C8 SIZE 0000001B BYTES

; __unwind { // loc_100123C8
push    8
mov     eax, offset loc_100123C8
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_100029FD
mov     edx, [eax]
push    offset aBeginFunctionG_5 ; "Begin function \"GetSalesOrganization\""
push    17Ah
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100029FD:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_0]
push    offset unk_1001AAF4
call    sub_10003AA5
mov     [ebp+var_14], eax
;   } // starts at 10002A04
or      [ebp+var_4], 0FFFFFFFFh

loc_10002A1C:
call    sub_10001643
test    eax, eax
jz      short loc_10002A3D
mov     edx, [eax]
push    offset aEndFunctionGet_5 ; "End function \"GetSalesOrganization\""
push    187h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002A3D:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002A46:
;   catch(...) // owned by 10002A04
call    sub_10001643
test    eax, eax
jz      short loc_10002A67
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    184h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002A67:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002A1C
retn
; } // starts at 100029D0
GetSalesOrganization endp

; Exported entry   5. CheckSecurityAccessPermissions


; Attributes: bp-based frame

public CheckSecurityAccessPermissions
CheckSecurityAccessPermissions proc near

var_14= dword ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 100123E3 SIZE 0000001B BYTES

; __unwind { // loc_100123E3
push    8
mov     eax, offset loc_100123E3
call    __EH_prolog3_catch
call    sub_10001643
test    eax, eax
jz      short loc_10002A9E
mov     edx, [eax]
push    offset aBeginFunctionC ; "Begin function \"CheckSecurityAccessPer"...
push    18Fh
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002A9E:
mov     [ebp+var_14], 80004005h
;   try {
and     [ebp+var_4], 0
push    [ebp+arg_4]
push    [ebp+arg_0]
push    offset unk_1001AAF4
call    sub_10003A0A
mov     [ebp+var_14], eax
;   } // starts at 10002AA5
or      [ebp+var_4], 0FFFFFFFFh

loc_10002AC0:
call    sub_10001643
test    eax, eax
jz      short loc_10002AE1
mov     edx, [eax]
push    offset aEndFunctionChe ; "End function \"CheckSecurityAccessPermi"...
push    19Ch
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002AE1:
mov     eax, [ebp+var_14]
call    __EH_epilog3
retn

loc_10002AEA:
;   catch(...) // owned by 10002AA5
call    sub_10001643
test    eax, eax
jz      short loc_10002B0B
mov     edx, [eax]
push    offset aAnExceptionWas ; "***** !!! An exception was thrown !!! *"...
push    199h
push    offset aScan100Cpp ; ".\\Scan100.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002B0B:
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, offset loc_10002AC0
retn
; } // starts at 10002A71
CheckSecurityAccessPermissions endp




; int __stdcall sub_10002B15(LPCCH lpMultiByteStr)
sub_10002B15 proc near

lpMultiByteStr= dword ptr  4

push    ebx
mov     ebx, [esp+4+lpMultiByteStr]
push    edi
mov     edi, ecx
and     dword ptr [edi], 0
test    ebx, ebx
jz      short loc_10002B64
push    esi
push    ebx             ; Str
call    _strlen
mov     esi, eax
xor     ecx, ecx
push    2
pop     edx
lea     eax, [esi+1]
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
pop     ecx
pop     ecx
mov     [edi], eax
test    eax, eax
jz      short loc_10002B63
push    esi             ; cchWideChar
push    eax             ; lpWideCharStr
push    0FFFFFFFFh      ; cbMultiByte
push    ebx             ; lpMultiByteStr
push    0               ; dwFlags
push    0               ; CodePage
call    ds:MultiByteToWideChar
mov     eax, [edi]
xor     ecx, ecx
mov     [eax+esi*2], cx

loc_10002B63:
pop     esi

loc_10002B64:
mov     eax, edi
pop     edi
pop     ebx
retn    4
sub_10002B15 endp

; START OF FUNCTION CHUNK FOR sub_10002CAC
;   ADDITIONAL PARENT FUNCTION sub_10003664

loc_10002B6B:
; __unwind { // loc_1001240E
mov     eax, [ecx]
test    eax, eax
jz      short locret_10002B78
push    eax             ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx

locret_10002B78:
retn
; } // starts at 10002B6B
; END OF FUNCTION CHUNK FOR sub_10002CAC



sub_10002B79 proc near
mov     eax, [ecx+4]
retn
sub_10002B79 endp




sub_10002B7D proc near
push    esi
mov     esi, ecx
mov     eax, [esi]
push    edi
xor     edi, edi
cmp     eax, edi
jz      short loc_10002B90
push    eax             ; hLibModule
call    ds:FreeLibrary

loc_10002B90:
mov     [esi+8], edi
mov     [esi+0Ch], edi
mov     [esi+10h], edi
mov     [esi+14h], edi
mov     [esi+18h], edi
mov     [esi+1Ch], edi
mov     [esi+20h], edi
mov     [esi+24h], edi
mov     [esi], edi
pop     edi
pop     esi
retn
sub_10002B7D endp




sub_10002BAD proc near
push    ebx
push    esi
mov     esi, ecx
mov     eax, [esi]
xor     ebx, ebx
cmp     eax, ebx
jz      loc_10002C86
push    edi
mov     edi, ds:GetProcAddress
push    offset ProcName ; "Scan100_OpenPort"
push    eax             ; hModule
call    edi ; GetProcAddress
push    offset aScan100Closepo ; "Scan100_ClosePort"
push    dword ptr [esi] ; hModule
mov     [esi+8], eax
call    edi ; GetProcAddress
push    offset aScan100GetVers ; "Scan100_Get_Version"
push    dword ptr [esi] ; hModule
mov     [esi+0Ch], eax
call    edi ; GetProcAddress
push    offset aScan100GetLast ; "Scan100_Get_Last_Error"
push    dword ptr [esi] ; hModule
mov     [esi+10h], eax
call    edi ; GetProcAddress
push    offset aScan100SkaRequ ; "Scan100_SKA_Request"
push    dword ptr [esi] ; hModule
mov     [esi+14h], eax
call    edi ; GetProcAddress
push    offset aScan100SkaRepo ; "Scan100_SKA_Reponse"
push    dword ptr [esi] ; hModule
mov     [esi+18h], eax
call    edi ; GetProcAddress
push    offset aScan100ScaRequ ; "Scan100_SCA_Request"
push    dword ptr [esi] ; hModule
mov     [esi+1Ch], eax
call    edi ; GetProcAddress
push    offset aScan100ScaResp ; "Scan100_SCA_Response"
push    dword ptr [esi] ; hModule
mov     [esi+20h], eax
call    edi ; GetProcAddress
mov     [esi+24h], eax
pop     edi
cmp     [esi+8], ebx
jz      short loc_10002C71
cmp     [esi+0Ch], ebx
jz      short loc_10002C71
cmp     [esi+10h], ebx
jz      short loc_10002C71
cmp     [esi+14h], ebx
jz      short loc_10002C71
cmp     [esi+18h], ebx
jz      short loc_10002C71
cmp     [esi+1Ch], ebx
jz      short loc_10002C71
cmp     [esi+20h], ebx
jz      short loc_10002C71
cmp     eax, ebx
jz      short loc_10002C71
call    sub_10001643
cmp     eax, ebx
jz      short loc_10002C6C
mov     edx, [eax]
push    offset aFunctionPointe ; "Function pointers are initialized"
push    0C8h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002C6C:
xor     ebx, ebx
inc     ebx
jmp     short loc_10002CA7

loc_10002C71:
call    sub_10001643
cmp     eax, ebx
jz      short loc_10002CA7
push    offset aCouldNotInitia ; "Could not initialize pointers"
push    0CEh
jmp     short loc_10002C99

loc_10002C86:
call    sub_10001643
cmp     eax, ebx
jz      short loc_10002CA7
push    offset aCouldNotInitia ; "Could not initialize pointers"
push    0D3h

loc_10002C99:
mov     edx, [eax]
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002CA7:
pop     esi
mov     eax, ebx
pop     ebx
retn
sub_10002BAD endp



; Attributes: bp-based frame fpd=0C04h

sub_10002CAC proc near

var_C14= dword ptr -0C14h
var_C10= dword ptr -0C10h
var_C08= dword ptr -0C08h
Buffer= word ptr -0C04h
MultiByteStr= byte ptr -404h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10002B6B SIZE 0000000E BYTES
; FUNCTION CHUNK AT 100123FE SIZE 00000038 BYTES

; __unwind { // loc_1001240E
push    ebp
sub     esp, 0C00h
lea     ebp, [esp-4]
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+0C04h+var_4], eax
push    4
mov     eax, offset loc_1001240E
call    __EH_prolog3
mov     eax, ecx
mov     esi, [ebp+0C04h+arg_0]
xor     ecx, ecx
mov     [ebp+0C04h+Buffer], cx
mov     ecx, [ebp+0C04h+arg_4]
cmp     ecx, 1
jnz     short loc_10002D64
lea     ecx, [ebp+0C04h+MultiByteStr]
push    ecx
mov     [ebp+0C04h+MultiByteStr], 0
call    dword ptr [eax+14h]
mov     ebx, eax
lea     eax, [ebp+0C04h+MultiByteStr]
lea     ecx, [ebp+0C04h+var_C14]
push    eax             ; lpMultiByteStr
call    sub_10002B15
test    esi, esi
jz      short loc_10002D2F
;   try {
and     [ebp+0C04h+var_C08], 0
push    ebx
push    dword ptr [eax]
lea     eax, [ebp+0C04h+Buffer]
push    esi
push    offset Format   ; "Scan-100 Error: %s <%s (%x)>"
push    400h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
add     esp, 18h
jmp     short loc_10002D4F
;   } // starts at 10002D0F

loc_10002D2F:
;   try {
mov     [ebp+0C04h+var_C08], 1
push    ebx
push    dword ptr [eax]
lea     eax, [ebp+0C04h+Buffer]
push    offset aScan100ErrorSX ; "Scan-100 Error: <%s (%x)>"
push    400h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
add     esp, 14h
;   } // starts at 10002D2F

loc_10002D4F:
or      [ebp+0C04h+var_C08], 0FFFFFFFFh
cmp     [ebp+0C04h+var_C14], 0
jz      short loc_10002DCD
push    [ebp+0C04h+var_C14] ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx
jmp     short loc_10002DCD

loc_10002D64:
lea     eax, [ecx-2]
cmp     eax, 13h
ja      short loc_10002D9C
mov     eax, ecx
shl     eax, 6
add     eax, offset aStatusNoerror ; "STATUS_NOERROR"
push    eax
push    ecx
lea     eax, [ebp+0C04h+Buffer]
test    esi, esi
jz      short loc_10002D95
push    esi
push    offset aScan100ErrorSX_0 ; "Scan-100 Error: %s <%x - %s>"
push    400h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
add     esp, 18h
jmp     short loc_10002DCD

loc_10002D95:
push    offset aScan100ErrorXS ; "Scan-100 Error: <%x - %s>"
jmp     short loc_10002DAA

loc_10002D9C:
push    ecx
lea     eax, [ebp+0C04h+Buffer]
test    esi, esi
jz      short loc_10002DBA
push    esi
push    offset aScan100ErrorSX_1 ; "Scan-100 Error: %s <%x - Unknown Error>"

loc_10002DAA:           ; BufferCount
push    400h
push    eax             ; Buffer
call    _swprintf_s
add     esp, 14h
jmp     short loc_10002DCD

loc_10002DBA:
push    offset aScan100ErrorXU ; "Scan-100 Error: <%x - Unknown Error>"
push    400h            ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
add     esp, 10h

loc_10002DCD:
call    sub_10001643
test    eax, eax
jz      short loc_10002DED
mov     edx, [eax]
lea     ecx, [ebp+0C04h+Buffer]
push    ecx
push    103h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002DED:
mov     ecx, [ebp+0C04h+var_C10]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
mov     ecx, [ebp+0C04h+var_4]
xor     ecx, ebp        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
add     ebp, 0C04h
leave
retn    8
; } // starts at 10002CAC
sub_10002CAC endp




sub_10002E12 proc near

arg_0= dword ptr  4

push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
push    edi
cmp     [esi], ebx
jz      loc_10002EB1
cmp     [esi+8], ebx
jz      loc_10002EB1
call    sub_10001643
mov     edi, offset aScan100deviceC ; ".\\Scan100Device.cpp"
cmp     eax, ebx
jz      short loc_10002E4C
mov     edx, [eax]
push    offset aTryToOpenPort ; "Try to open port"
push    12Ah
push    edi
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002E4C:           ; dwMilliseconds
push    0FAh
call    ds:Sleep
push    [esp+0Ch+arg_0]
call    dword ptr [esi+8]
cmp     al, 1
jnz     short loc_10002E84
call    sub_10001643
test    eax, eax
jz      short loc_10002E7F
mov     edx, [eax]
push    offset aPortWasSuccess ; "Port was successfully opened"
push    130h
push    edi
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002E7F:
xor     ebx, ebx
inc     ebx
jmp     short loc_10002ED2

loc_10002E84:
call    sub_10001643
test    eax, eax
jz      short loc_10002EA1
mov     edx, [eax]
push    offset aOpenPortFuncti ; "Open port function failed"
push    136h
push    edi
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002EA1:
push    1
push    offset aCouldNotOpenPo ; "Could not open port"
mov     ecx, esi
call    sub_10002CAC
jmp     short loc_10002ED2

loc_10002EB1:
call    sub_10001643
cmp     eax, ebx
jz      short loc_10002ED2
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    13Dh
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002ED2:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    4
sub_10002E12 endp




sub_10002EDA proc near
push    esi
mov     esi, ecx
cmp     dword ptr [esi], 0
jz      short loc_10002F0E
cmp     dword ptr [esi+0Ch], 0
jz      short loc_10002F0E
call    sub_10001643
test    eax, eax
jz      short loc_10002F09
mov     edx, [eax]
push    offset aClosePort ; "Close Port"
push    147h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002F09:
call    dword ptr [esi+0Ch]
pop     esi
retn

loc_10002F0E:
call    sub_10001643
test    eax, eax
jz      short loc_10002F2F
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    14Ch
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002F2F:
pop     esi
retn
sub_10002EDA endp




sub_10002F31 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
push    edi
cmp     [esi], ebx
jz      short loc_10002FA8
cmp     [esi+18h], ebx
jz      short loc_10002FA8
call    sub_10001643
mov     edi, offset aScan100deviceC ; ".\\Scan100Device.cpp"
cmp     eax, ebx
jz      short loc_10002F63
mov     edx, [eax]
push    offset aSkaRequest ; "SKA Request"
push    1E1h
push    edi
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002F63:
cmp     [esp+0Ch+arg_0], ebx
jz      short loc_10002F92
cmp     [esp+0Ch+arg_4], ebx
jz      short loc_10002F92
push    [esp+0Ch+arg_4]
push    [esp+10h+arg_0]
call    dword ptr [esi+18h]
test    eax, eax
jnz     short loc_10002F83
xor     ebx, ebx
inc     ebx
jmp     short loc_10002FC9

loc_10002F83:
push    eax
push    offset aSkarequest ; "SKARequest"
mov     ecx, esi
call    sub_10002CAC
jmp     short loc_10002FC9

loc_10002F92:
call    sub_10001643
test    eax, eax
jz      short loc_10002FC9
push    offset aInvalidInputPo ; "Invalid input pointer"
push    1F2h
push    edi
jmp     short loc_10002FC0

loc_10002FA8:
call    sub_10001643
cmp     eax, ebx
jz      short loc_10002FC9
push    offset aFunctionCallFa ; "Function call failed"
push    1F7h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"

loc_10002FC0:
mov     edx, [eax]
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10002FC9:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    8
sub_10002F31 endp




sub_10002FD1 proc near

arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
push    edi
cmp     [esi], ebx
jz      short loc_10003026
cmp     [esi+1Ch], ebx
jz      short loc_10003026
call    sub_10001643
mov     edi, offset aSkaresponse ; "SKAResponse"
cmp     eax, ebx
jz      short loc_10003003
mov     edx, [eax]
push    edi
push    203h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003003:
push    [esp+0Ch+arg_8]
push    [esp+10h+arg_4]
push    [esp+14h+arg_0]
call    dword ptr [esi+1Ch]
test    eax, eax
jnz     short loc_1000301B
xor     ebx, ebx
inc     ebx
jmp     short loc_10003047

loc_1000301B:
push    eax
push    edi
mov     ecx, esi
call    sub_10002CAC
jmp     short loc_10003047

loc_10003026:
call    sub_10001643
cmp     eax, ebx
jz      short loc_10003047
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    212h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003047:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    0Ch
sub_10002FD1 endp



; Attributes: bp-based frame

sub_1000304F proc near

arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

push    ebp
mov     ebp, esp
push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
push    edi
cmp     [esi], ebx
jz      short loc_100030C8
cmp     [esi+20h], ebx
jz      short loc_100030C8
cmp     [ebp+arg_0], ebx
jz      short loc_100030B3
cmp     [ebp+arg_4], ebx
jz      short loc_100030B3
cmp     [ebp+arg_8], ebx
jz      short loc_100030B3
call    sub_10001643
mov     edi, offset aScarequest ; "SCARequest"
cmp     eax, ebx
jz      short loc_10003093
mov     edx, [eax]
push    edi
push    26Bh
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003093:
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
call    dword ptr [esi+20h]
test    eax, eax
jnz     short loc_100030A8
xor     ebx, ebx
inc     ebx
jmp     short loc_100030E9

loc_100030A8:
push    eax
push    edi
mov     ecx, esi
call    sub_10002CAC
jmp     short loc_100030E9

loc_100030B3:
call    sub_10001643
cmp     eax, ebx
jz      short loc_100030E9
push    offset aInvalidInputPo ; "Invalid input pointer"
push    27Ah
jmp     short loc_100030DB

loc_100030C8:
call    sub_10001643
cmp     eax, ebx
jz      short loc_100030E9
push    offset aFunctionCallFa ; "Function call failed"
push    27Fh

loc_100030DB:
mov     edx, [eax]
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100030E9:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
pop     ebp
retn    0Ch
sub_1000304F endp




sub_100030F2 proc near

arg_0= dword ptr  4
arg_4= word ptr  8
arg_8= dword ptr  0Ch

push    ebx
push    esi
mov     esi, ecx
xor     ebx, ebx
push    edi
cmp     [esi], ebx
jz      short loc_10003155
cmp     [esi+24h], ebx
jz      short loc_10003155
call    sub_10001643
mov     edi, offset aScaresponse ; "SCAResponse"
cmp     eax, ebx
jz      short loc_10003124
mov     edx, [eax]
push    edi
push    28Bh
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003124:
mov     eax, 0FFFFh
cmp     [esp+0Ch+arg_4], bx
jz      short loc_10003135
movzx   eax, [esp+0Ch+arg_4]

loc_10003135:
push    [esp+0Ch+arg_8]
push    eax
push    [esp+14h+arg_0]
call    dword ptr [esi+24h]
test    eax, eax
jnz     short loc_1000314A
xor     ebx, ebx
inc     ebx
jmp     short loc_10003176

loc_1000314A:
push    eax
push    edi
mov     ecx, esi
call    sub_10002CAC
jmp     short loc_10003176

loc_10003155:
call    sub_10001643
cmp     eax, ebx
jz      short loc_10003176
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    29Ch
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003176:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    0Ch
sub_100030F2 endp




sub_1000317E proc near
push    esi
push    edi
mov     edi, ecx
lea     esi, [edi+28h]
mov     eax, [esi]
mov     ecx, esi
call    dword ptr [eax+4]
mov     ecx, edi
call    sub_10002B7D
mov     eax, [esi]
pop     edi
mov     ecx, esi
pop     esi
jmp     dword ptr [eax+0Ch]
sub_1000317E endp



; Attributes: bp-based frame

sub_1000319C proc near

var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    ebx
push    esi
mov     esi, ecx
push    edi
lea     edi, [esi+28h]
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+4]
mov     ecx, esi
xor     ebx, ebx
call    sub_10002B79
push    eax
call    sub_10002E12
cmp     eax, 1
jnz     short loc_100031F0
and     [ebp+var_8], ebx
and     [ebp+var_4], ebx
lea     eax, [ebp+var_4]
push    eax
lea     eax, [ebp+var_8]
push    eax
call    dword ptr [esi+18h]
test    eax, eax
jnz     short loc_100031DC
inc     ebx
jmp     short loc_100031E9

loc_100031DC:
push    eax
push    offset aTestconnection ; "TestConnection - OpenPort"
mov     ecx, esi
call    sub_10002CAC

loc_100031E9:
mov     ecx, esi
call    sub_10002EDA

loc_100031F0:
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+0Ch]
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
leave
retn
sub_1000319C endp



; Attributes: bp-based frame

sub_100031FE proc near

var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= word ptr -18h
var_14= word ptr -14h
var_10= word ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012436 SIZE 00000023 BYTES

; __unwind { // loc_1001243E
push    14h
mov     eax, offset loc_1001243E
call    __EH_prolog3
mov     esi, ecx
lea     ebx, [esi+28h]
mov     eax, [ebx]
mov     ecx, ebx
call    dword ptr [eax+4]
xor     edi, edi
mov     ecx, esi
mov     [ebp+var_20], edi
call    sub_10002B79
push    eax
call    sub_10002E12
cmp     eax, 1
jnz     loc_10003303
lea     eax, [ebp+var_10]
push    eax
lea     eax, [ebp+var_18]
push    eax
mov     ecx, esi
mov     dword ptr [ebp+var_18], edi
mov     dword ptr [ebp+var_10], edi
call    sub_10002F31
cmp     eax, 1
jnz     loc_100032D9
lea     ecx, [ebp+var_1C] ; this
call    ??0CSecurity@@QAE@XZ ; CSecurity::CSecurity(void)
;   try {
mov     [ebp+var_4], edi
lea     eax, [ebp+var_14]
push    eax             ; unsigned __int16 *
push    dword ptr [ebp+var_10] ; unsigned __int16
lea     ecx, [ebp+var_1C] ; this
push    dword ptr [ebp+var_18] ; unsigned __int16
mov     dword ptr [ebp+var_14], edi
call    ?SetSeedAndGetKey@CSecurity@@QAEJGGPAG@Z ; CSecurity::SetSeedAndGetKey(ushort,ushort,ushort *)
test    eax, eax
jl      short loc_100032AB
push    dword ptr [ebp+var_10]
xor     eax, eax
lea     edi, [ebp+var_14+2]
stosw
push    dword ptr [ebp+var_14]
mov     ecx, esi
push    dword ptr [ebp+var_18]
call    sub_10002FD1
xor     ecx, ecx
inc     ecx
cmp     eax, ecx
jnz     short loc_10003296
mov     [ebp+var_20], ecx
jmp     short loc_100032CC

loc_10003296:
call    sub_10001643
test    eax, eax
jz      short loc_100032CC
push    offset aFunctionCallFa ; "Function call failed"
push    1C2h
jmp     short loc_100032BE

loc_100032AB:
call    sub_10001643
cmp     eax, edi
jz      short loc_100032CC
push    offset aFunctionCallFa ; "Function call failed"
push    1C7h

loc_100032BE:
mov     edx, [eax]
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 10003257

loc_100032CC:
or      [ebp+var_4], 0FFFFFFFFh
mov     [ebp+var_1C], offset ??_7CSecurity@@6B@ ; const CSecurity::`vftable'
jmp     short loc_100032FA

loc_100032D9:
call    sub_10001643
cmp     eax, edi
jz      short loc_100032FA
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    1CCh
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100032FA:
mov     ecx, esi
call    sub_10002EDA
jmp     short loc_10003324

loc_10003303:
call    sub_10001643
cmp     eax, edi
jz      short loc_10003324
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    1D3h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003324:
mov     eax, [ebx]
mov     ecx, ebx
call    dword ptr [eax+0Ch]
mov     eax, [ebp+var_20]
call    __EH_epilog3
retn
; } // starts at 100031FE
sub_100031FE endp



; Attributes: bp-based frame

sub_10003334 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 10h
push    ebx
push    esi
push    edi
mov     edi, ecx
lea     ebx, [edi+28h]
mov     eax, [ebx]
mov     ecx, ebx
call    dword ptr [eax+4]
and     [ebp+var_10], 0
mov     ecx, edi
call    sub_10002B79
push    eax
call    sub_10002E12
xor     esi, esi
inc     esi
cmp     eax, esi
jnz     loc_1000340F
xor     eax, eax
mov     [ebp+var_8], eax
mov     [ebp+var_C], eax
mov     [ebp+var_4], eax
lea     eax, [ebp+var_4]
push    eax
lea     eax, [ebp+var_C]
push    eax
lea     eax, [ebp+var_8]
push    eax
mov     ecx, edi
call    sub_1000304F
cmp     eax, esi
jnz     short loc_100033C4
mov     eax, [ebp+var_4]
mov     ecx, [ebp+var_8]
mov     edx, eax
not     edx
cmp     ecx, edx
jz      short loc_1000339F
cmp     eax, 0FFFFFFFFh
mov     eax, ecx
not     eax
mov     [ebp+var_4], eax

loc_1000339F:
push    eax
push    [ebp+var_C]
push    ecx
mov     ecx, edi
call    sub_100030F2
cmp     eax, esi
jz      short loc_100033E0
call    sub_10001643
test    eax, eax
jz      short loc_10003406
push    offset aFunctionCallFa ; "Function call failed"
push    244h
jmp     short loc_100033F8

loc_100033C4:
and     [ebp+var_C], 0
push    0FFFFFFFEh
pop     eax
push    esi
push    0
push    eax
mov     ecx, edi
mov     [ebp+var_4], esi
mov     [ebp+var_8], eax
call    sub_100030F2
cmp     eax, esi
jnz     short loc_100033E5

loc_100033E0:
mov     [ebp+var_10], esi
jmp     short loc_10003406

loc_100033E5:
call    sub_10001643
test    eax, eax
jz      short loc_10003406
push    offset aFunctionCallFa ; "Function call failed"
push    253h

loc_100033F8:
mov     edx, [eax]
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003406:
mov     ecx, edi
call    sub_10002EDA
jmp     short loc_10003430

loc_1000340F:
call    sub_10001643
test    eax, eax
jz      short loc_10003430
mov     edx, [eax]
push    offset aFunctionCallFa ; "Function call failed"
push    25Bh
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003430:
mov     eax, [ebx]
mov     ecx, ebx
call    dword ptr [eax+0Ch]
mov     eax, [ebp+var_10]
pop     edi
pop     esi
pop     ebx
leave
retn
sub_10003334 endp



; Attributes: bp-based frame

sub_1000343F proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012459 SIZE 00000026 BYTES

; __unwind { // loc_10012464
push    4
mov     eax, offset loc_10012464
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
;   try {
and     [ebp+var_4], 0
call    sub_1000317E
;   } // starts at 10003450
or      [ebp+var_4], 0FFFFFFFFh
lea     ecx, [esi+28h]
call    sub_10001128
call    __EH_epilog3
retn
; } // starts at 1000343F
sub_1000343F endp

; [00000022 BYTES: COLLAPSED FUNCTION std::wstring::wstring(wchar_t const *)]


; Attributes: bp-based frame

sub_1000348D proc near

var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001257D SIZE 0000003C BYTES

; __unwind { // loc_1001259E
push    20h
mov     eax, offset loc_1001259E
call    __EH_prolog3
push    [ebp+arg_4]
and     [ebp+var_10], 0
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
xor     esi, esi
inc     esi
;   try {
mov     [ebp+var_4], esi
push    0FFFFFFFFh      ; N
push    0               ; int
push    [ebp+arg_8]     ; int
mov     ecx, eax
call    sub_10001AA7
mov     ecx, [ebp+arg_0]
push    eax
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
mov     [ebp+var_10], esi
;   } // starts at 100034AB
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; N
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn
;   } // starts at 100034C8
; } // starts at 1000348D
sub_1000348D endp



; Attributes: bp-based frame

sub_100034E0 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10012459 SIZE 00000026 BYTES

; __unwind { // loc_10012464
push    4
mov     eax, offset loc_10012464
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
lea     ecx, [esi+28h]
call    sub_10001D98
xor     eax, eax
;   try {
mov     [ebp+var_4], eax
mov     [esi], eax
mov     [esi+4], eax
;   } // starts at 100034FB
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 100034E0
sub_100034E0 endp



; Attributes: bp-based frame

sub_1000350F proc near

var_70= byte ptr -70h
var_54= byte ptr -54h
var_38= dword ptr -38h
var_34= dword ptr -34h
var_2D= byte ptr -2Dh
var_2C= byte ptr -2Ch
lpLibFileName= dword ptr -28h
var_14= dword ptr -14h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001247F SIZE 00000055 BYTES

; __unwind { // loc_100124AF
push    64h
mov     eax, offset loc_100124AF
call    __EH_prolog3_GS
mov     esi, ecx
xor     edi, edi
lea     ecx, [ebp+var_2D]
mov     [ebp+var_38], esi
mov     [ebp+var_34], edi
call    sub_10001EF9
;   try {
mov     [ebp+var_4], edi
lea     ecx, [ebp+var_2C]
push    ecx
mov     ecx, eax
call    sub_10001F23
;   } // starts at 1000352D
;   try {
mov     byte ptr [ebp+var_4], 2
lea     ecx, [ebp+var_2D]
call    nullsub_1
cmp     [ebp+var_14], 8
mov     eax, [ebp+lpLibFileName]
jnb     short loc_10003553
lea     eax, [ebp+lpLibFileName]

loc_10003553:           ; lpLibFileName
push    eax
call    ds:LoadLibraryW
xor     ebx, ebx
inc     ebx
mov     [esi], eax
cmp     eax, edi
jz      short loc_100035DE
call    sub_10001643
mov     esi, eax
cmp     esi, edi
jz      short loc_100035D1
push    offset aLibraryLoaded ; "Library loaded: "
lea     ecx, [ebp+var_70]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 1000353B
;   try {
mov     byte ptr [ebp+var_4], 3
lea     ecx, [ebp+var_2C]
push    ecx
push    eax
lea     eax, [ebp+var_54]
push    eax
call    sub_1000348D
add     esp, 0Ch
;   } // starts at 1000357B
;   try {
mov     byte ptr [ebp+var_4], 4
cmp     dword ptr [eax+18h], 8
jb      short loc_1000359F
mov     eax, [eax+4]
jmp     short loc_100035A2

loc_1000359F:
add     eax, 4

loc_100035A2:
mov     edx, [esi]
push    eax
push    91h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    ebx
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 10003590
;   try {
mov     byte ptr [ebp+var_4], 3
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+var_54]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 100035B5
;   try {
mov     byte ptr [ebp+var_4], 2
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+var_70]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_100035D1:
mov     ecx, [ebp+var_38]
call    sub_10002BAD
mov     [ebp+var_34], eax
jmp     short loc_1000364D

loc_100035DE:
call    sub_10001643
mov     esi, eax
cmp     esi, edi
jz      short loc_1000364D
push    offset aCouldNotLoadLi ; "Could not load library: "
lea     ecx, [ebp+var_54]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 100035C3
;   try {
mov     byte ptr [ebp+var_4], 5
lea     ecx, [ebp+var_2C]
push    ecx
push    eax
lea     eax, [ebp+var_70]
push    eax
call    sub_1000348D
add     esp, 0Ch
;   } // starts at 100035F6
;   try {
mov     byte ptr [ebp+var_4], 6
cmp     dword ptr [eax+18h], 8
jb      short loc_1000361A
mov     eax, [eax+4]
jmp     short loc_1000361D

loc_1000361A:
add     eax, 4

loc_1000361D:
mov     edx, [esi]
push    eax
push    97h
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, esi
call    dword ptr [edx+18h]
;   } // starts at 1000360B
;   try {
mov     byte ptr [ebp+var_4], 5
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+var_70]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10003631
;   try {
mov     byte ptr [ebp+var_4], 2
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+var_54]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 1000363F

loc_1000364D:
or      [ebp+var_4], 0FFFFFFFFh
push    edi             ; N
push    ebx             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+var_34]
call    __EH_epilog3_GS
retn
; } // starts at 1000350F
sub_1000350F endp



; Attributes: bp-based frame

sub_10003664 proc near

var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= byte ptr -30h
MultiByteStr= byte ptr -20h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10002B6B SIZE 0000000E BYTES
; FUNCTION CHUNK AT 100124D4 SIZE 00000046 BYTES

; __unwind { // loc_100124F5
push    30h
mov     eax, offset loc_100124F5
call    __EH_prolog3_GS
;   try {
and     [ebp+var_4], 0
and     [ebp+var_3C], 0
mov     ebx, [ebp+arg_0]
mov     esi, ecx
lea     edi, [esi+28h]
mov     eax, [edi]
mov     ecx, edi
mov     [ebp+var_34], ebx
call    dword ptr [eax+4]
push    offset aUnknown ; "Unknown"
mov     ecx, ebx
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10003670
;   try {
and     [ebp+var_4], 0
xor     ebx, ebx
inc     ebx
cmp     dword ptr [esi], 0
mov     [ebp+var_3C], ebx
jz      short loc_100036FD
mov     esi, [esi+10h]
test    esi, esi
jz      short loc_100036FD
lea     eax, [ebp+var_30]
push    eax
lea     eax, [ebp+MultiByteStr]
push    eax
call    esi
cmp     al, bl
jnz     short loc_100036E8
lea     eax, [ebp+MultiByteStr]
push    eax             ; lpMultiByteStr
lea     ecx, [ebp+var_38]
call    sub_10002B15
;   } // starts at 10003696
;   try {
mov     [ebp+var_4], ebx
push    dword ptr [eax] ; String
mov     ecx, [ebp+var_34]
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
;   } // starts at 100036C6
;   try {
mov     byte ptr [ebp+var_4], 0
cmp     [ebp+var_38], 0
jz      short loc_1000371E
push    [ebp+var_38]    ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx
jmp     short loc_1000371E

loc_100036E8:
call    sub_10001643
test    eax, eax
jz      short loc_1000371E
push    offset aCouldNotGetVer ; "Could not get version"
push    170h
jmp     short loc_10003710

loc_100036FD:
call    sub_10001643
test    eax, eax
jz      short loc_1000371E
push    offset aFunctionCallFa ; "Function call failed"
push    175h

loc_10003710:
mov     edx, [eax]
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_1000371E:
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+0Ch]
mov     eax, [ebp+var_34]
call    __EH_epilog3_GS
retn    4
;   } // starts at 100036D3
; } // starts at 10003664
sub_10003664 endp



; Attributes: bp-based frame

sub_10003730 proc near

var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= byte ptr -30h
MultiByteStr= byte ptr -20h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 100124D4 SIZE 00000046 BYTES

; __unwind { // loc_100124F5
push    30h
mov     eax, offset loc_100124F5
call    __EH_prolog3_GS
;   try {
and     [ebp+var_4], 0
and     [ebp+var_3C], 0
mov     ebx, [ebp+arg_0]
mov     esi, ecx
lea     edi, [esi+28h]
mov     eax, [edi]
mov     ecx, edi
mov     [ebp+var_34], ebx
call    dword ptr [eax+4]
push    offset aUnknown ; "Unknown"
mov     ecx, ebx
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 1000373C
;   try {
and     [ebp+var_4], 0
xor     ebx, ebx
inc     ebx
cmp     dword ptr [esi], 0
mov     [ebp+var_3C], ebx
jz      short loc_100037C9
mov     esi, [esi+10h]
test    esi, esi
jz      short loc_100037C9
lea     eax, [ebp+MultiByteStr]
push    eax
lea     eax, [ebp+var_30]
push    eax
call    esi
test    al, al
jz      short loc_100037B4
lea     eax, [ebp+MultiByteStr]
push    eax             ; lpMultiByteStr
lea     ecx, [ebp+var_38]
call    sub_10002B15
;   } // starts at 10003762
;   try {
mov     [ebp+var_4], ebx
push    dword ptr [eax] ; String
mov     ecx, [ebp+var_34]
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::wstring::assign(wchar_t const *)
;   } // starts at 10003792
;   try {
mov     byte ptr [ebp+var_4], 0
cmp     [ebp+var_38], 0
jz      short loc_100037EA
push    [ebp+var_38]    ; void *
call    ??_V@YAXPAX@Z   ; operator delete[](void *)
pop     ecx
jmp     short loc_100037EA

loc_100037B4:
call    sub_10001643
test    eax, eax
jz      short loc_100037EA
push    offset aCouldNotGetDat ; "Could not get date"
push    18Dh
jmp     short loc_100037DC

loc_100037C9:
call    sub_10001643
test    eax, eax
jz      short loc_100037EA
push    offset aFunctionCallFa ; "Function call failed"
push    192h

loc_100037DC:
mov     edx, [eax]
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100037EA:
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+0Ch]
mov     eax, [ebp+var_34]
call    __EH_epilog3_GS
retn    4
;   } // starts at 1000379F
; } // starts at 10003730
sub_10003730 endp



; Attributes: bp-based frame

sub_100037FC proc near

var_48= byte ptr -48h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_14= dword ptr -14h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 1001251A SIZE 0000003D BYTES

; __unwind { // loc_10012532
push    3Ch
mov     eax, offset loc_10012532
call    __EH_prolog3_GS
mov     edi, ecx
xor     ebx, ebx
push    ebx
lea     ecx, [ebp+var_2C]
mov     [ebp+var_14], 7
call    sub_100016EA
;   try {
mov     [ebp+var_4], ebx
push    offset aVersion ; "Version:"
lea     ecx, [ebp+var_2C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
mov     esi, offset asc_100133C8 ; " "
push    esi             ; String
lea     ecx, [ebp+var_2C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
lea     eax, [ebp+var_48]
push    eax
mov     ecx, edi
call    sub_10003664
;   } // starts at 1000381C
;   try {
mov     byte ptr [ebp+var_4], 1
push    0FFFFFFFFh      ; N
push    ebx             ; int
push    eax             ; int
lea     ecx, [ebp+var_2C]
call    sub_10001AA7
;   } // starts at 10003845
;   try {
mov     byte ptr [ebp+var_4], bl
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+var_48]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
push    esi             ; String
lea     ecx, [ebp+var_2C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
push    offset aDate    ; "Date:"
lea     ecx, [ebp+var_2C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
push    esi             ; String
lea     ecx, [ebp+var_2C] ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
lea     eax, [ebp+var_48]
push    eax
mov     ecx, edi
call    sub_10003730
;   } // starts at 10003855
;   try {
mov     byte ptr [ebp+var_4], 2
push    0FFFFFFFFh      ; N
push    ebx             ; int
push    eax             ; int
lea     ecx, [ebp+var_2C]
call    sub_10001AA7
;   } // starts at 1000388D
;   try {
mov     byte ptr [ebp+var_4], bl
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+var_48]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
call    sub_10001643
cmp     eax, ebx
jz      short loc_100038D4
cmp     [ebp+var_14], 8
mov     ecx, [ebp+var_28]
jnb     short loc_100038C0
lea     ecx, [ebp+var_28]

loc_100038C0:
mov     edx, [eax]
push    ecx
push    15Dh
push    offset aScan100deviceC ; ".\\Scan100Device.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]
;   } // starts at 1000389D

loc_100038D4:
or      [ebp+var_4], 0FFFFFFFFh
push    ebx             ; N
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
call    __EH_epilog3_GS
retn
; } // starts at 100037FC
sub_100037FC endp




sub_100038E9 proc near

arg_0= dword ptr  4

push    ebx
push    esi
mov     esi, ecx
push    edi
lea     edi, [esi+28h]
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+4]
mov     ecx, esi
call    sub_1000317E
mov     ecx, [esp+0Ch+arg_0]
xor     eax, eax
mov     [esi+4], ecx
mov     ecx, esi
mov     [esi], eax
mov     [esi+8], eax
mov     [esi+0Ch], eax
mov     [esi+10h], eax
mov     [esi+14h], eax
mov     [esi+18h], eax
mov     [esi+1Ch], eax
mov     [esi+20h], eax
mov     [esi+24h], eax
call    sub_1000350F
mov     ecx, esi
mov     ebx, eax
call    sub_100037FC
mov     eax, [edi]
mov     ecx, edi
call    dword ptr [eax+0Ch]
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    4
sub_100038E9 endp



; Attributes: bp-based frame

sub_10003941 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012557 SIZE 00000026 BYTES

; __unwind { // loc_10012562
push    4
mov     eax, offset loc_10012562
call    __EH_prolog3
mov     [ebp+var_10], ecx
mov     dword ptr [ecx], offset off_10014544
mov     dword ptr [ecx+4], offset off_10014520
mov     dword ptr [ecx+8], offset off_10014508
mov     dword ptr [ecx+0Ch], offset off_100144F4
mov     dword ptr [ecx+10h], offset off_100144D8
mov     dword ptr [ecx+14h], offset off_100144C0
or      [ebp+var_4], 0FFFFFFFFh
add     ecx, 18h
call    sub_1000343F
call    __EH_epilog3
retn
; } // starts at 10003941
sub_10003941 endp



; Attributes: bp-based frame

; int __stdcall sub_1000398B(wchar_t *Buffer)
sub_1000398B proc near

var_4= dword ptr -4
Buffer= dword ptr  8

push    ebp
mov     ebp, esp
push    ecx
cmp     [ebp+Buffer], 0
push    esi
mov     esi, ecx
jz      short loc_100039DD
and     [ebp+var_4], 0
lea     eax, [ebp+var_4]
push    eax
push    offset aComHd   ; "COM%hd"
push    [ebp+Buffer]    ; Buffer
call    _swscanf_s
add     esp, 0Ch
push    [ebp+var_4]
lea     ecx, [esi+18h]
call    sub_100038E9
call    sub_10001643
test    eax, eax
jz      short loc_100039D9
mov     edx, [eax]
push    offset aDeviceInitiali ; "Device initialized"
push    26h ; '&'
push    offset aScan100implCpp ; ".\\Scan100Impl.cpp"
push    1
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100039D9:
xor     eax, eax
jmp     short loc_10003A00

loc_100039DD:
call    sub_10001643
test    eax, eax
jz      short loc_100039FB
mov     edx, [eax]
push    offset aInputPointerIs ; "Input pointer is NULL"
push    2Ch ; ','
push    offset aScan100implCpp ; ".\\Scan100Impl.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_100039FB:
mov     eax, 80004003h

loc_10003A00:
pop     esi
leave
retn    4
sub_1000398B endp




sub_10003A05 proc near
xor     eax, eax
retn    4
sub_10003A05 endp




sub_10003A0A proc near
mov     eax, 80004001h
retn    0Ch
sub_10003A0A endp




sub_10003A12 proc near
mov     eax, 80004001h
retn    8
sub_10003A12 endp




sub_10003A1A proc near

arg_4= dword ptr  8

mov     eax, [esp+arg_4]
and     dword ptr [eax], 0
mov     eax, 80004001h
retn    8
sub_10003A1A endp




sub_10003A29 proc near
mov     eax, 80004001h
retn    4
sub_10003A29 endp




sub_10003A31 proc near

arg_8= dword ptr  0Ch

mov     eax, [esp+arg_8]
and     dword ptr [eax], 0
mov     eax, 80004001h
retn    0Ch
sub_10003A31 endp




sub_10003A40 proc near
mov     eax, 80004001h
retn    10h
sub_10003A40 endp




sub_10003A48 proc near
mov     eax, 8004020Dh
retn    8
sub_10003A48 endp




sub_10003A50 proc near

arg_0= dword ptr  4

push    ebx
push    esi
mov     esi, [esp+8+arg_0]
add     esi, 8
push    edi
mov     ecx, esi
mov     ebx, 80004005h
call    sub_100031FE
mov     ecx, esi
mov     edi, eax
call    sub_10003334
cmp     edi, 1
jnz     short loc_10003A86
cmp     eax, edi
jnz     short loc_10003A7D
mov     ebx, 80040267h

loc_10003A7D:
test    eax, eax
jnz     short loc_10003A9D
mov     ebx, 80040265h

loc_10003A86:
test    edi, edi
jnz     short loc_10003A9D
cmp     eax, 1
jnz     short loc_10003A94
mov     ebx, 80040266h

loc_10003A94:
test    eax, eax
jnz     short loc_10003A9D
mov     ebx, 80040268h

loc_10003A9D:
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    8
sub_10003A50 endp




sub_10003AA5 proc near

arg_4= dword ptr  8

mov     eax, [esp+arg_4]
and     dword ptr [eax], 0
mov     eax, 80040212h
retn    8
sub_10003AA5 endp




sub_10003AB4 proc near

arg_0= dword ptr  4
arg_4= byte ptr  8

push    esi
mov     esi, [esp+4+arg_0]
push    edi
add     esi, esi
push    esi             ; cb
call    ds:CoTaskMemAlloc
mov     edi, eax
test    edi, edi
jz      short loc_10003ADC
cmp     [esp+8+arg_4], 1
jnz     short loc_10003ADC
push    esi             ; Size
push    0               ; Val
push    edi             ; void *
call    _memset
add     esp, 0Ch

loc_10003ADC:
mov     eax, edi
pop     edi
pop     esi
retn
sub_10003AB4 endp




sub_10003AE1 proc near

arg_0= dword ptr  4

sub     [esp+arg_0], 10h
jmp     sub_10003A0A
sub_10003AE1 endp




sub_10003AEB proc near

arg_0= dword ptr  4

sub     [esp+arg_0], 4
jmp     sub_10003A05
sub_10003AEB endp


loc_10003AF5:
sub     dword ptr [esp+4], 14h
jmp     sub_10003A0A

loc_10003AFF:
sub     dword ptr [esp+4], 0Ch
jmp     sub_10003A05



sub_10003B09 proc near

arg_0= dword ptr  4

sub     [esp+arg_0], 10h
jmp     sub_10003A05
sub_10003B09 endp




sub_10003B13 proc near

arg_0= dword ptr  4

sub     [esp+arg_0], 8
jmp     sub_10003A05
sub_10003B13 endp


loc_10003B1D:
sub     dword ptr [esp+4], 4
jmp     sub_10003A0A

loc_10003B27:
sub     dword ptr [esp+4], 8
jmp     sub_10003A0A

loc_10003B31:
sub     dword ptr [esp+4], 14h
jmp     sub_10003A05

loc_10003B3B:
sub     dword ptr [esp+4], 0Ch
jmp     sub_10003A0A



; int __cdecl sub_10003B45(wchar_t *String)
sub_10003B45 proc near

String= dword ptr  4

push    ebx
mov     ebx, [esp+4+String]
push    edi
xor     edi, edi
test    ebx, ebx
jz      short loc_10003B77
push    esi
push    ebx             ; String
call    _wcslen
mov     esi, eax
inc     esi
push    edi
push    esi
call    sub_10003AB4
mov     edi, eax
add     esp, 0Ch
test    edi, edi
jz      short loc_10003B76
push    ebx             ; Source
push    esi             ; SizeInWords
push    edi             ; Destination
call    _wcscpy_s
add     esp, 0Ch

loc_10003B76:
pop     esi

loc_10003B77:
mov     eax, edi
pop     edi
pop     ebx
retn
sub_10003B45 endp



; Attributes: bp-based frame

; int __stdcall sub_10003B7C(int, int, wchar_t *, int)
sub_10003B7C proc near

Buffer= word ptr -14h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
sub     esp, 14h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     eax, [ebp+arg_8]
push    esi
mov     esi, [ebp+arg_0]
push    edi
mov     edi, [ebp+arg_C]
test    eax, eax
jz      short loc_10003BD7
test    edi, edi
jz      short loc_10003BD7
push    eax             ; Buffer
lea     ecx, [esi-4]
call    sub_1000398B
test    eax, eax
jl      short loc_10003BD3
lea     ecx, [esi+14h]
call    sub_10002B79
push    eax
push    offset aComD    ; "COM%d"
lea     eax, [ebp+Buffer]
push    8               ; BufferCount
push    eax             ; Buffer
call    _swprintf_s
lea     eax, [ebp+Buffer]
push    eax             ; String
call    sub_10003B45
add     esp, 14h
mov     [edi], eax

loc_10003BD3:
xor     eax, eax
jmp     short loc_10003BFD

loc_10003BD7:
call    sub_10001643
test    eax, eax
jz      short loc_10003BF8
mov     edx, [eax]
push    offset aInputPointerIs ; "Input pointer is NULL"
push    89h
push    offset aScan100implCpp ; ".\\Scan100Impl.cpp"
push    2
mov     ecx, eax
call    dword ptr [edx+18h]

loc_10003BF8:
mov     eax, 80004003h

loc_10003BFD:
mov     ecx, [ebp+var_4]
pop     edi
xor     ecx, ebp        ; StackCookie
pop     esi
call    @__security_check_cookie@4 ; __security_check_cookie(x)
leave
retn    10h
sub_10003B7C endp




sub_10003C0D proc near

arg_0= dword ptr  4
arg_4= dword ptr  8

mov     ecx, [esp+arg_0]
push    esi
add     ecx, 0Ch
mov     esi, 80004005h
call    sub_1000319C
cmp     eax, 1
jnz     short loc_10003C32
push    offset aTestHasBeenCom ; "Test has been completed. Status - OK "
call    sub_10003B45
xor     esi, esi
jmp     short loc_10003C3C

loc_10003C32:
push    offset aTestHasBeenCom_0 ; "Test has been completed. Status - FAILE"...
call    sub_10003B45

loc_10003C3C:
pop     ecx
mov     ecx, [esp+4+arg_4]
mov     [ecx], eax
mov     eax, esi
pop     esi
retn    8
sub_10003C0D endp



; Attributes: bp-based frame

sub_10003C49 proc near

var_10= dword ptr -10h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10012557 SIZE 00000026 BYTES

; __unwind { // loc_10012562
push    4
mov     eax, offset loc_10012562
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     dword ptr [esi+4], offset off_100145F4
mov     dword ptr [esi+8], offset off_10014618
mov     dword ptr [esi+0Ch], offset off_10014630
mov     dword ptr [esi+10h], offset off_10014644
mov     dword ptr [esi+14h], offset off_10014660
lea     ecx, [esi+18h]
mov     dword ptr [esi], offset off_10014544
mov     dword ptr [esi+4], offset off_10014520
mov     dword ptr [esi+8], offset off_10014508
mov     dword ptr [esi+0Ch], offset off_100144F4
mov     dword ptr [esi+10h], offset off_100144D8
mov     dword ptr [esi+14h], offset off_100144C0
call    sub_100034E0
or      [ebp+var_4], 0FFFFFFFFh
mov     eax, esi
call    __EH_epilog3
retn
; } // starts at 10003C49
sub_10003C49 endp



; Attributes: thunk

sub_10003CBA proc near
jmp     sub_100011BE
sub_10003CBA endp

; START OF FUNCTION CHUNK FOR sub_10003D17

; public: __thiscall Concurrency::SchedulerPolicy::~SchedulerPolicy(void)
??1SchedulerPolicy@Concurrency@@QAE@XZ: ; void *
; __unwind { // loc_100125DA
push    dword ptr [ecx]
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
retn
; } // starts at 10003CBF
; END OF FUNCTION CHUNK FOR sub_10003D17


; Attributes: bp-based frame

; int __cdecl sub_10003CC8(int, int, wchar_t *String)
sub_10003CC8 proc near

var_2C= byte ptr -2Ch
var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
String= dword ptr  10h

; FUNCTION CHUNK AT 1001257D SIZE 0000003C BYTES

; __unwind { // loc_1001259E
push    20h
mov     eax, offset loc_1001259E
call    __EH_prolog3
push    [ebp+arg_4]
and     [ebp+var_10], 0
lea     ecx, [ebp+var_2C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
xor     esi, esi
inc     esi
;   try {
mov     [ebp+var_4], esi
push    [ebp+String]    ; String
mov     ecx, eax        ; int
call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z_0 ; std::wstring::assign(wchar_t const *)
mov     ecx, [ebp+arg_0]
push    eax
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::wstring::wstring(std::wstring const &)
mov     [ebp+var_10], esi
;   } // starts at 10003CE6
;   try {
mov     byte ptr [ebp+var_4], 0
push    0               ; N
push    esi             ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
mov     eax, [ebp+arg_0]
call    __EH_epilog3
retn
;   } // starts at 10003CFF
; } // starts at 10003CC8
sub_10003CC8 endp



; Attributes: bp-based frame

sub_10003D17 proc near

pExceptionObject= byte ptr -40h
var_18= dword ptr -18h
var_14= dword ptr -14h
nSize= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10003CBF SIZE 00000009 BYTES
; FUNCTION CHUNK AT 100125B9 SIZE 0000003C BYTES

; __unwind { // loc_100125DA
push    34h
mov     eax, offset loc_100125DA
call    __EH_prolog3
xor     edi, edi
mov     [ebp+var_14], edi
mov     ebx, [ebp+arg_4]
cmp     [ebx+14h], edi
jnz     short loc_10003D61
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+nSize], offset aInvalidEnviron ; "Invalid environment variable name ( emp"...
push    1BAh            ; Value

loc_10003D43:
lea     eax, [ebp+arg_4]
push    eax             ; int
lea     eax, [ebp+nSize]
push    eax             ; int
lea     ecx, [ebp+pExceptionObject]

loc_10003D4E:
call    sub_10001C29
push    offset stru_10016E7C ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)

loc_10003D61:
cmp     dword ptr [ebx+18h], 8
jb      short loc_10003D6E
add     ebx, 4
mov     eax, [ebx]
jmp     short loc_10003D73

loc_10003D6E:
add     ebx, 4
mov     eax, ebx

loc_10003D73:
mov     esi, ds:GetEnvironmentVariableW
push    edi             ; nSize
push    edi             ; lpBuffer
push    eax             ; lpName
call    esi ; GetEnvironmentVariableW
mov     [ebp+nSize], eax
cmp     eax, edi
jnz     short loc_10003DC0
call    ds:GetLastError
cmp     eax, 0CBh
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
lea     ecx, [ebp+pExceptionObject]
lea     eax, [ebp+arg_4]
jnz     short loc_10003DB2
mov     [ebp+nSize], offset aRequestedEnvir ; "Requested environment variable does not"...
push    1C5h

loc_10003DAB:
push    eax
lea     eax, [ebp+nSize]
push    eax
jmp     short loc_10003D4E

loc_10003DB2:
mov     [ebp+nSize], offset aCouldNotGetReq ; "Could not get requested environment var"...
push    1C8h
jmp     short loc_10003DAB

loc_10003DC0:
xor     ecx, ecx
push    2
pop     edx
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx             ; unsigned int
call    ??_U@YAPAXI@Z   ; operator new[](uint)
mov     edi, eax
pop     ecx
mov     [ebp+var_18], edi
;   try {
mov     [ebp+var_4], 1
test    edi, edi
jnz     short loc_10003DFD
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
mov     [ebp+nSize], offset aNotEnoughMemor ; "Not enough memory"
push    1CFh
jmp     loc_10003D43

loc_10003DFD:
mov     eax, [ebp+arg_4]
cmp     dword ptr [eax+18h], 8
jb      short loc_10003E08
mov     ebx, [ebx]

loc_10003E08:           ; nSize
push    [ebp+nSize]
push    edi             ; lpBuffer
push    ebx             ; lpName
call    esi ; GetEnvironmentVariableW
test    eax, eax
jnz     short loc_10003E4F
call    ds:GetLastError
cmp     eax, 0CBh
mov     [ebp+arg_4], offset aCommonIncludeH ; "..\\..\\..\\..\\common\\include\\helper"...
lea     ecx, [ebp+pExceptionObject]
lea     eax, [ebp+arg_4]
jnz     short loc_10003E3E
mov     [ebp+nSize], offset aRequestedEnvir ; "Requested environment variable does not"...
push    1DAh
jmp     loc_10003DAB

loc_10003E3E:
mov     [ebp+nSize], offset aCouldNotGetReq ; "Could not get requested environment var"...
push    1DDh
jmp     loc_10003DAB

loc_10003E4F:
mov     ecx, [ebp+arg_0]
push    edi             ; String
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
mov     [ebp+var_14], 1
;   } // starts at 10003DDA
;   try {
mov     byte ptr [ebp+var_4], 0
push    edi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
mov     eax, [ebp+arg_0]
pop     ecx
call    __EH_epilog3
retn
;   } // starts at 10003E5F
; } // starts at 10003D17
sub_10003D17 endp



; Attributes: bp-based frame

sub_10003E73 proc near

var_68= byte ptr -68h
var_4C= dword ptr -4Ch
var_30= dword ptr -30h
var_2C= byte ptr -2Ch
var_28= dword ptr -28h
var_18= dword ptr -18h
var_14= dword ptr -14h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10001935 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 100125F5 SIZE 00000045 BYTES

; __unwind { // loc_10012615
push    5Ch
mov     eax, offset loc_10012615
call    __EH_prolog3_GS
xor     edi, edi
mov     [ebp+var_30], edi
call    sub_10001643
mov     esi, eax
cmp     esi, edi
jz      loc_10003F60
push    offset a827f7cb1A5e94d ; "827F7CB1-A5E9-4DE2-B0E1-E571DD1D14F9"
lea     ecx, [ebp+var_4C]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   try {
mov     [ebp+var_4], edi
lea     eax, [ebp+var_4C]
push    eax
lea     eax, [ebp+var_2C]
push    eax
call    sub_10003D17
pop     ecx
pop     ecx
;   } // starts at 10003EA0
;   try {
mov     byte ptr [ebp+var_4], 2
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     [ebp+var_18], edi
jz      loc_10003F51
mov     eax, [esi]
push    1
mov     ecx, esi
call    dword ptr [eax+10h]
mov     eax, [esi]
push    2
mov     ecx, esi
call    dword ptr [eax+10h]
mov     eax, [esi]
push    offset aScan100Scan100 ; "SCAN100 ( Scan100.DLL )"
mov     ecx, esi
call    dword ptr [eax+0Ch]
push    offset asc_10014940 ; "\\"
lea     ecx, [ebp+var_68]
call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::wstring::wstring(wchar_t const *)
;   } // starts at 10003EB2
;   try {
mov     byte ptr [ebp+var_4], 3
push    offset aScan100Log ; "scan100.log"
push    eax             ; int
lea     eax, [ebp+var_4C]
push    eax             ; int
call    sub_10003CC8
add     esp, 0Ch
;   } // starts at 10003EF5
;   try {
mov     byte ptr [ebp+var_4], 4
push    0FFFFFFFFh      ; N
push    edi             ; int
push    eax             ; int
lea     ecx, [ebp+var_2C]
call    sub_10001AA7
;   } // starts at 10003F0B
;   try {
mov     byte ptr [ebp+var_4], 3
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_4C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
;   } // starts at 10003F1B
;   try {
mov     byte ptr [ebp+var_4], 2
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_68]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)
cmp     [ebp+var_14], 8
mov     eax, [ebp+var_28]
jnb     short loc_10003F45
lea     eax, [ebp+var_28]

loc_10003F45:
mov     edx, [esi]
push    edi
push    eax
mov     ecx, esi
call    dword ptr [edx+4]
mov     [ebp+var_30], eax
;   } // starts at 10003F2A

loc_10003F51:
or      [ebp+var_4], 0FFFFFFFFh
push    edi             ; N
push    1               ; char
lea     ecx, [ebp+var_2C]
call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::wstring::_Tidy(bool,uint)

loc_10003F60:
mov     eax, [ebp+var_30]
call    __EH_epilog3_GS
retn
; } // starts at 10003E73
sub_10003E73 endp




; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12 proc near

hinstDLL= dword ptr  4
fdwReason= dword ptr  8
lpvReserved= dword ptr  0Ch

mov     eax, [esp+fdwReason]
push    esi
xor     esi, esi
inc     esi
sub     eax, 0
jz      short loc_10003F82
dec     eax
jnz     short loc_10003F87
call    sub_10003E73
mov     esi, eax
jmp     short loc_10003F87

loc_10003F82:
call    sub_10003CBA

loc_10003F87:
mov     eax, esi
pop     esi
retn    0Ch
_DllMain@12 endp

align 2
; [00000006 BYTES: COLLAPSED FUNCTION CSecurity::SetSeedAndGetKey(ushort,ushort,ushort *)]
; [00000006 BYTES: COLLAPSED FUNCTION CSecurity::CSecurity(void)]
; [0000000B BYTES: COLLAPSED FUNCTION operator new[](uint)]
; [0000001E BYTES: COLLAPSED FUNCTION std::char_traits<char>::_Copy_s(char *,uint,char const *,uint)]
; [0000001E BYTES: COLLAPSED FUNCTION std::char_traits<char>::_Move_s(char *,uint,char const *,uint)]
; [0000003E BYTES: COLLAPSED FUNCTION unknown_libname_3]
; [0000003F BYTES: COLLAPSED FUNCTION std::_Allocate<char>(uint,char *)]
; [0000001B BYTES: COLLAPSED FUNCTION std::_Traits_helper::copy_s<std::char_traits<char>>(char *,uint,char const *,uint,std::_Secure_char_traits_tag)]
; [0000001B BYTES: COLLAPSED FUNCTION std::_Traits_helper::move_s<std::char_traits<char>>(char *,uint,char const *,uint,std::_Secure_char_traits_tag)]
; [00000021 BYTES: COLLAPSED FUNCTION unknown_libname_4]
; [00000015 BYTES: COLLAPSED FUNCTION std::allocator<char>::allocate(uint)]
; [0000001F BYTES: COLLAPSED FUNCTION std::_Traits_helper::copy_s<std::char_traits<char>>(char *,uint,char const *,uint)]
; [0000001F BYTES: COLLAPSED FUNCTION std::_Traits_helper::move_s<std::char_traits<char>>(char *,uint,char const *,uint)]
; [0000004D BYTES: COLLAPSED FUNCTION std::string::_Tidy(bool,uint)]
; [000000DE BYTES: COLLAPSED FUNCTION std::string::_Copy(uint,uint)]
align 4
; START OF FUNCTION CHUNK FOR sub_1000435F

loc_10004234:           ; SourceSize
; __unwind { // loc_10012680
push    0
push    1               ; char
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
retn
; } // starts at 10004234
; END OF FUNCTION CHUNK FOR sub_1000435F


; Attributes: bp-based frame

sub_1000423E proc near

var_10= dword ptr -10h
var_4= dword ptr -4
SourceSize= dword ptr  8
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10012655 SIZE 00000023 BYTES

; __unwind { // loc_1001265D
push    4
mov     eax, offset loc_1001265D
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
call    sub_10004837
push    [ebp+SourceSize] ; SourceSize
;   try {
and     [ebp+var_4], 0
lea     ecx, [esi+0Ch]
mov     dword ptr [esi], offset off_10014978
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
mov     eax, esi
call    __EH_epilog3
retn    4
;   } // starts at 10004257
; } // starts at 1000423E
sub_1000423E endp

; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_5]



sub_10004281 proc near
mov     edi, edi
push    esi
mov     esi, ecx
push    0               ; SourceSize
push    1               ; char
lea     ecx, [esi+0Ch]
mov     dword ptr [esi], offset off_10014978
call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
mov     ecx, esi
pop     esi
jmp     sub_10004915
sub_10004281 endp



; Attributes: bp-based frame

; int __thiscall sub_100042A0(void *, char)
sub_100042A0 proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_10004281
test    [ebp+arg_0], 1
jz      short loc_100042BA
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_100042BA:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_100042A0 endp



; Attributes: bp-based frame

sub_100042C1 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]
mov     esi, ecx
call    sub_1000423E
mov     dword ptr [esi], offset off_10014984
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_100042C1 endp




sub_100042DE proc near
mov     dword ptr [ecx], offset off_10014984
jmp     sub_10004281
sub_100042DE endp



; Attributes: bp-based frame

; int __thiscall sub_100042E9(void *, char)
sub_100042E9 proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_10014984
call    sub_10004281
test    [ebp+arg_0], 1
jz      short loc_10004309
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10004309:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_100042E9 endp



; Attributes: bp-based frame

sub_10004310 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]
mov     esi, ecx
call    sub_1000423E
mov     dword ptr [esi], offset off_10014990
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_10004310 endp




sub_1000432D proc near
mov     dword ptr [ecx], offset off_10014990
jmp     sub_10004281
sub_1000432D endp



; Attributes: bp-based frame

; int __thiscall sub_10004338(void *, char)
sub_10004338 proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_10014990
call    sub_10004281
test    [ebp+arg_0], 1
jz      short loc_10004358
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10004358:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_10004338 endp



; Attributes: noreturn bp-based frame

sub_1000435F proc near

pExceptionObject= byte ptr -50h
var_28= byte ptr -28h
var_4= dword ptr -4
arg_4= dword ptr  0Ch

; FUNCTION CHUNK AT 10004234 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 10012678 SIZE 00000023 BYTES

; __unwind { // loc_10012680
push    44h
mov     eax, offset loc_10012680
call    __EH_prolog3
push    offset aStringTooLong ; "string too long"
lea     ecx, [ebp+var_28]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   try {
and     [ebp+var_4], 0
lea     eax, [ebp+var_28]
push    eax
lea     ecx, [ebp+pExceptionObject]
call    sub_100042C1
push    offset stru_10017894 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
;   } // starts at 10004378
; } // starts at 1000435F
sub_1000435F endp

db 0CCh
; [00000058 BYTES: COLLAPSED FUNCTION std::string::_Grow(uint,bool)]
; [00000074 BYTES: COLLAPSED FUNCTION std::string::assign(char const *,uint)]
; [00000021 BYTES: COLLAPSED FUNCTION std::string::assign(char const *)]
; [00000027 BYTES: COLLAPSED FUNCTION std::string::string(char const *)]


; Attributes: noreturn bp-based frame

sub_100044AB proc near

pExceptionObject= byte ptr -50h
var_28= byte ptr -28h
var_4= dword ptr -4

; FUNCTION CHUNK AT 10012678 SIZE 00000023 BYTES

; __unwind { // loc_10012680
push    44h
mov     eax, offset loc_10012680
call    __EH_prolog3
push    offset aInvalidStringP ; "invalid string position"
lea     ecx, [ebp+var_28]
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
;   try {
and     [ebp+var_4], 0
lea     eax, [ebp+var_28]
push    eax
lea     ecx, [ebp+pExceptionObject]
call    sub_10004310
push    offset stru_10017918 ; pThrowInfo
lea     eax, [ebp+pExceptionObject]
push    eax             ; pExceptionObject
call    __CxxThrowException@8 ; _CxxThrowException(x,x)
;   } // starts at 100044C4
; } // starts at 100044AB
sub_100044AB endp

db 0CCh
; [00000070 BYTES: COLLAPSED FUNCTION std::string::erase(uint,uint)]
; [00000098 BYTES: COLLAPSED FUNCTION std::string::assign(std::string const &,uint,uint)]
; [0000002B BYTES: COLLAPSED FUNCTION std::string::string(std::string const &)]


; Attributes: bp-based frame

; int __stdcall sub_10004616(struct std::exception *)
sub_10004616 proc near

var_10= dword ptr -10h
var_4= dword ptr -4
arg_0= dword ptr  8

; FUNCTION CHUNK AT 10012655 SIZE 00000023 BYTES

; __unwind { // loc_1001265D
push    4
mov     eax, offset loc_1001265D
call    __EH_prolog3
mov     esi, ecx
mov     [ebp+var_10], esi
mov     edi, [ebp+arg_0]
push    edi             ; struct std::exception *
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
;   try {
and     [ebp+var_4], 0
add     edi, 0Ch
push    edi             ; SourceSize
lea     ecx, [esi+0Ch]
mov     dword ptr [esi], offset off_10014978
call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
mov     eax, esi
call    __EH_epilog3
retn    4
;   } // starts at 10004630
; } // starts at 10004616
sub_10004616 endp



; Attributes: bp-based frame

; int __stdcall sub_10004650(struct std::exception *)
sub_10004650 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct std::exception *
mov     esi, ecx
call    sub_10004616
mov     dword ptr [esi], offset off_10014984
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_10004650 endp



; Attributes: bp-based frame

; int __stdcall sub_1000466D(struct std::exception *)
sub_1000466D proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct std::exception *
mov     esi, ecx
call    sub_10004616
mov     dword ptr [esi], offset off_10014990
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000466D endp

; [000000F8 BYTES: COLLAPSED FUNCTION __vswprintf_helper]
; [0000002A BYTES: COLLAPSED FUNCTION __vswprintf_c_l]
; [0000008B BYTES: COLLAPSED FUNCTION __vswprintf_s_l]



sub_10004837 proc near
mov     eax, ecx
and     dword ptr [eax+4], 0
and     dword ptr [eax+8], 0
mov     dword ptr [eax], offset off_100149C4
retn
sub_10004837 endp

; [00000053 BYTES: COLLAPSED FUNCTION std::exception::exception(char const * const &)]
; [0000001D BYTES: COLLAPSED FUNCTION std::exception::exception(char const * const &,int)]
; [0000005D BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &)]



sub_10004915 proc near
cmp     dword ptr [ecx+8], 0
mov     dword ptr [ecx], offset off_100149C4
jz      short locret_1000492A
push    dword ptr [ecx+4] ; Block
call    _free
pop     ecx

locret_1000492A:
retn
sub_10004915 endp

; [0000000D BYTES: COLLAPSED FUNCTION exception::what(void)]


; Attributes: bp-based frame

; int __thiscall sub_10004938(void *, char)
sub_10004938 proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_10004915
test    [ebp+arg_0], 1
jz      short loc_10004952
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10004952:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_10004938 endp

; [0000002D BYTES: COLLAPSED FUNCTION _JumpToContinuation(void *,EHRegistrationNode *)]
pop     ebx
leave
retn    8
; [00000007 BYTES: COLLAPSED FUNCTION sub_1000498B]
; [00000054 BYTES: COLLAPSED FUNCTION _UnwindNestedFrames(EHRegistrationNode *,EHExceptionRecord *)]
; [00000036 BYTES: COLLAPSED FUNCTION ___CxxFrameHandler3]
; [00000033 BYTES: COLLAPSED FUNCTION CatchGuardHandler(EHExceptionRecord *,CatchGuardRN *,void *,void *)]
; [000000D7 BYTES: COLLAPSED FUNCTION _CallSETranslator(EHExceptionRecord *,EHRegistrationNode *,void *,void *,_s_FuncInfo const *,int,EHRegistrationNode *)]
; [0000009F BYTES: COLLAPSED FUNCTION TranslatorGuardHandler(EHExceptionRecord *,TranslatorGuardRN *,void *,void *)]
; [00000075 BYTES: COLLAPSED FUNCTION _GetRangeOfTrysToCheck(_s_FuncInfo const *,int,int,uint *,uint *)]
; [0000002C BYTES: COLLAPSED FUNCTION __CreateFrameInfo]
; [00000027 BYTES: COLLAPSED FUNCTION __IsExceptionObjectToBeDestroyed]
; [00000052 BYTES: COLLAPSED FUNCTION __FindAndUnlinkFrame]
; [00000060 BYTES: COLLAPSED FUNCTION _CallCatchBlock2(EHRegistrationNode *,_s_FuncInfo const *,void *,int,ulong)]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [00000033 BYTES: COLLAPSED FUNCTION __EH_prolog3]
; [00000036 BYTES: COLLAPSED FUNCTION __EH_prolog3_catch]
; [00000036 BYTES: COLLAPSED FUNCTION __EH_prolog3_GS]
; [00000039 BYTES: COLLAPSED FUNCTION __EH_prolog3_catch_GS]
; [00000014 BYTES: COLLAPSED FUNCTION __EH_epilog3]
; [0000000F BYTES: COLLAPSED FUNCTION __EH_epilog3_GS]
; [0000000F BYTES: COLLAPSED FUNCTION __EH_epilog3_catch_GS]



sub_10004E58 proc near
mov     edi, edi
push    ecx             ; struct type_info *
mov     dword ptr [ecx], offset off_100149E4
call    ?_Type_info_dtor@type_info@@CAXPAV1@@Z ; type_info::_Type_info_dtor(type_info *)
pop     ecx
retn
sub_10004E58 endp



; Attributes: bp-based frame

; int __thiscall sub_10004E68(void *, char)
sub_10004E68 proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
call    sub_10004E58
test    [ebp+arg_0], 1
jz      short loc_10004E82
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_10004E82:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_10004E68 endp

; [00000020 BYTES: COLLAPSED FUNCTION type_info::operator==(type_info const &)]
; [0000000B BYTES: COLLAPSED FUNCTION operator delete(void *)]
; [0000007D BYTES: COLLAPSED FUNCTION _memcpy_s]
; [0000005D BYTES: COLLAPSED FUNCTION _memmove_s]
; [0000001A BYTES: COLLAPSED FUNCTION _wcslen]
; [0000002A BYTES: COLLAPSED FUNCTION __purecall]
; [0000008E BYTES: COLLAPSED FUNCTION _free]
; [0000000B BYTES: COLLAPSED FUNCTION operator delete[](void *)]
; [0000001E BYTES: COLLAPSED FUNCTION _swprintf_s]
; [0000006F BYTES: COLLAPSED FUNCTION _wcscpy_s]
align 10h
; [0000007A BYTES: COLLAPSED FUNCTION _memset]
align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __alloca_probe]
; [0000001B BYTES: COLLAPSED FUNCTION std::bad_alloc::bad_alloc(void)]
; [00000065 BYTES: COLLAPSED FUNCTION operator new(uint)]
; [0000004C BYTES: COLLAPSED FUNCTION _CxxThrowException(x,x)]
; [00000058 BYTES: COLLAPSED FUNCTION __wcsdup]
; [000000F6 BYTES: COLLAPSED FUNCTION xtow_s(x,x,x,x,x)]
; [0000002C BYTES: COLLAPSED FUNCTION __itow_s]
; [000000BA BYTES: COLLAPSED FUNCTION __onexit_nolock]
; [00000031 BYTES: COLLAPSED FUNCTION ___onexitinit]
; [0000003C BYTES: COLLAPSED FUNCTION __onexit]
; [00000017 BYTES: COLLAPSED FUNCTION _atexit]
; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *))]
; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *))]
; [0000008B BYTES: COLLAPSED FUNCTION _strlen]
; [00000070 BYTES: COLLAPSED FUNCTION _vscan_fn]
; [00000022 BYTES: COLLAPSED FUNCTION _swscanf_s]
; [00000135 BYTES: COLLAPSED FUNCTION _CRT_INIT(x,x,x)]
; [000000F6 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000164 BYTES: COLLAPSED FUNCTION __flsbuf]


; Attributes: bp-based frame

sub_10005ABF proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_1001AB64, eax
pop     ebp
retn
sub_10005ABF endp

; [00000128 BYTES: COLLAPSED FUNCTION __invoke_watson]
; [00000026 BYTES: COLLAPSED FUNCTION __invalid_parameter]
; [00000042 BYTES: COLLAPSED FUNCTION __get_errno_from_oserr]
; [00000013 BYTES: COLLAPSED FUNCTION __errno]
; [00000013 BYTES: COLLAPSED FUNCTION ___doserrno]
; [00000023 BYTES: COLLAPSED FUNCTION __dosmaperr]
; [00000087 BYTES: COLLAPSED FUNCTION _LocaleUpdate::_LocaleUpdate(localeinfo_struct *)]
; [0000002F BYTES: COLLAPSED FUNCTION _write_char]
; [00000027 BYTES: COLLAPSED FUNCTION _write_multi_char]
; [00000052 BYTES: COLLAPSED FUNCTION _write_string]
; [00000B75 BYTES: COLLAPSED FUNCTION __woutput_l]
db 8Dh, 49h, 0
jpt_10005EF0 dd offset $NORMAL_STATE$29479 ; jump table for switch statement
dd offset loc_10005EF7
dd offset loc_10005F29
dd offset loc_10005F86
dd offset loc_10005FD3
dd offset loc_10005FDF
dd offset loc_10006026
dd offset loc_10006136
; [00000B7E BYTES: COLLAPSED FUNCTION __woutput_s_l]
db 8Bh, 0FFh
jpt_10006AAF dd offset $NORMAL_STATE$29486 ; jump table for switch statement
dd offset loc_10006AB6
dd offset loc_10006AE8
dd offset loc_10006B43
dd offset loc_10006B8F
dd offset loc_10006B9B
dd offset loc_10006BE1
dd offset loc_10006CE0
; [00000068 BYTES: COLLAPSED FUNCTION _strcpy_s]
; [0000004F BYTES: COLLAPSED FUNCTION _V6_HeapAlloc]
; [000000CA BYTES: COLLAPSED FUNCTION _malloc]


; Attributes: bp-based frame

; int __stdcall sub_1000768F(char *)
sub_1000768F proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
lea     eax, [ebp+arg_0]
push    eax             ; char **
mov     esi, ecx
call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
mov     dword ptr [esi], offset off_10014A14
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_1000768F endp




sub_100076AD proc near
mov     dword ptr [ecx], offset off_10014A14
jmp     sub_10004915
sub_100076AD endp



; Attributes: bp-based frame

; int __thiscall sub_100076B8(void *, char)
sub_100076B8 proc near

arg_0= byte ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset off_10014A14
call    sub_10004915
test    [ebp+arg_0], 1
jz      short loc_100076D8
push    esi             ; void *
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx

loc_100076D8:
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_100076B8 endp

; [0000005F BYTES: COLLAPSED FUNCTION ___TypeMatch]
; [00000049 BYTES: COLLAPSED FUNCTION ___FrameUnwindFilter]
; [000000E1 BYTES: COLLAPSED FUNCTION ___FrameUnwindToState]
; [00000045 BYTES: COLLAPSED FUNCTION ExFilterRethrow(_EXCEPTION_POINTERS *)]
; [00000055 BYTES: COLLAPSED FUNCTION ___DestructExceptionObject]
; [00000029 BYTES: COLLAPSED FUNCTION ___AdjustPointer]
; [0000007B BYTES: COLLAPSED FUNCTION IsInExceptionSpec(EHExceptionRecord *,_s_ESTypeList const *)]
; [00000028 BYTES: COLLAPSED FUNCTION CallUnexpected(_s_ESTypeList const *)]
or      dword ptr [ebp-4], 0FFFFFFFFh
call    ?terminate@@YAXXZ ; terminate(void)
; [00000017 BYTES: COLLAPSED CHUNK OF FUNCTION CallUnexpected(_s_ESTypeList const *)]
db 0CCh
; [0000019C BYTES: COLLAPSED FUNCTION CallCatchBlock(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,_s_FuncInfo const *,void *,int,ulong)]
; [0000017F BYTES: COLLAPSED FUNCTION ___BuildCatchObjectHelper]
; [00000092 BYTES: COLLAPSED FUNCTION ___BuildCatchObject]
; [0000006E BYTES: COLLAPSED FUNCTION CatchIt(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,_s_HandlerType const *,_s_CatchableType const *,_s_TryBlockMapEntry const *,int,EHRegistrationNode *,uchar)]
; [000000F4 BYTES: COLLAPSED FUNCTION FindHandlerForForeignException(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,int,int,EHRegistrationNode *)]
; [00000347 BYTES: COLLAPSED FUNCTION FindHandler(EHExceptionRecord *,EHRegistrationNode *,_CONTEXT *,void *,_s_FuncInfo const *,uchar,int,EHRegistrationNode *)]


; Attributes: bp-based frame

; int __stdcall sub_10008245(struct std::exception *)
sub_10008245 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]     ; struct std::exception *
mov     esi, ecx
call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
mov     dword ptr [esi], offset off_10014A14
mov     eax, esi
pop     esi
pop     ebp
retn    4
sub_10008245 endp

; [000000E6 BYTES: COLLAPSED FUNCTION ___InternalCxxFrameHandler]
; [00000072 BYTES: COLLAPSED FUNCTION __encode_pointer]
; [00000009 BYTES: COLLAPSED FUNCTION __encoded_null]
; [00000072 BYTES: COLLAPSED FUNCTION __decode_pointer]
; [00000009 BYTES: COLLAPSED FUNCTION __crtTlsAlloc(x)]
; [00000034 BYTES: COLLAPSED FUNCTION ___set_flsgetvalue]
; [0000003D BYTES: COLLAPSED FUNCTION __mtterm]
; [000000E7 BYTES: COLLAPSED FUNCTION __initptd]
; [00000079 BYTES: COLLAPSED FUNCTION __getptd_noexit]
; [0000001A BYTES: COLLAPSED FUNCTION __getptd]
; [0000012F BYTES: COLLAPSED FUNCTION _freefls(x)]
; [0000006E BYTES: COLLAPSED FUNCTION __freeptd]
; [0000018D BYTES: COLLAPSED FUNCTION __mtinit]
; [00000039 BYTES: COLLAPSED FUNCTION terminate(void)]
; [00000013 BYTES: COLLAPSED FUNCTION unexpected(void)]
; [00000038 BYTES: COLLAPSED FUNCTION _inconsistency(void)]
; [00000011 BYTES: COLLAPSED FUNCTION __initp_eh_hooks]
align 10h
; [0000004C BYTES: COLLAPSED FUNCTION _CallSettingFrame(x,x,x)]
; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [00000070 BYTES: COLLAPSED FUNCTION type_info::_Type_info_dtor(type_info *)]
align 10h
; [00000088 BYTES: COLLAPSED FUNCTION _strcmp]
align 10h
; [00000365 BYTES: COLLAPSED FUNCTION _memcpy]
align 10h
; [00000365 BYTES: COLLAPSED FUNCTION _memcpy_0]
; [00000117 BYTES: COLLAPSED FUNCTION _abort]
; [00000021 BYTES: COLLAPSED FUNCTION __set_abort_behavior]
; [000001AB BYTES: COLLAPSED FUNCTION __NMSG_WRITE]
; [00000039 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER]


; Attributes: bp-based frame

sub_10009641 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_1001B1CC, eax
pop     ebp
retn
sub_10009641 endp

; [00000030 BYTES: COLLAPSED FUNCTION __heap_init]
; [00000074 BYTES: COLLAPSED FUNCTION __heap_term]
; [0000004B BYTES: COLLAPSED FUNCTION __mtinitlocks]
; [00000057 BYTES: COLLAPSED FUNCTION __mtdeletelocks]
; [00000017 BYTES: COLLAPSED FUNCTION __unlock]
; [000000C3 BYTES: COLLAPSED FUNCTION __mtinitlocknum]
; [00000033 BYTES: COLLAPSED FUNCTION __lock]
; [00000030 BYTES: COLLAPSED FUNCTION ___sbh_find_block]
; [00000316 BYTES: COLLAPSED FUNCTION ___sbh_free_block]
; [000000B0 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_region]
; [00000108 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_group]
; [000002E1 BYTES: COLLAPSED FUNCTION ___sbh_resize_block]
; [000002E5 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block]
align 4
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
align 10h
; [0000018C BYTES: COLLAPSED FUNCTION SEH_1000EE10]
; [00000057 BYTES: COLLAPSED FUNCTION _fastzero_I]
; [0000008F BYTES: COLLAPSED FUNCTION __VEC_memzero]
; [00000050 BYTES: COLLAPSED FUNCTION _has_osfxsr_set]
; [00000062 BYTES: COLLAPSED FUNCTION __get_sse2_info]



sub_1000A6F4 proc near
call    __get_sse2_info
mov     dword_1001C738, eax
xor     eax, eax
retn
sub_1000A6F4 endp



; Attributes: bp-based frame

sub_1000A701 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_1001B32C, eax
pop     ebp
retn
sub_1000A701 endp

; [00000028 BYTES: COLLAPSED FUNCTION __callnewh]
; [00000040 BYTES: COLLAPSED FUNCTION _calloc]
align 10h
; [00000095 BYTES: COLLAPSED FUNCTION __aulldvrm]
; [00000045 BYTES: COLLAPSED FUNCTION __malloc_crt]
; [0000004C BYTES: COLLAPSED FUNCTION __calloc_crt]
; [0000004E BYTES: COLLAPSED FUNCTION __realloc_crt]
; [00000052 BYTES: COLLAPSED FUNCTION __recalloc_crt]
; [000000A3 BYTES: COLLAPSED FUNCTION __msize]
; [00000030 BYTES: COLLAPSED FUNCTION __crt_waiting_on_module_handle]
; [00000029 BYTES: COLLAPSED FUNCTION __amsg_exit]
; [0000002B BYTES: COLLAPSED FUNCTION ___crtCorExitProcess]
; [00000017 BYTES: COLLAPSED FUNCTION ___crtExitProcess]
db 0CCh
; [00000009 BYTES: COLLAPSED FUNCTION __lockexit]
; [00000009 BYTES: COLLAPSED FUNCTION __unlockexit]
; [0000001D BYTES: COLLAPSED FUNCTION __initterm]
; [00000024 BYTES: COLLAPSED FUNCTION __initterm_e]
; [00000085 BYTES: COLLAPSED FUNCTION __cinit]
; [0000012C BYTES: COLLAPSED FUNCTION _doexit]
; [00000016 BYTES: COLLAPSED FUNCTION __exit]
; [0000000F BYTES: COLLAPSED FUNCTION __cexit]
; [0000004E BYTES: COLLAPSED FUNCTION __init_pointers]
; [0000005A BYTES: COLLAPSED FUNCTION ___check_float_string]
; [00000036 BYTES: COLLAPSED FUNCTION __hextodec]
; [00000018 BYTES: COLLAPSED FUNCTION __un_inc]
; [00000032 BYTES: COLLAPSED FUNCTION __whiteout]
; [00001221 BYTES: COLLAPSED FUNCTION __winput_s_l]
; [00000254 BYTES: COLLAPSED FUNCTION __ioinit]
; [0000004E BYTES: COLLAPSED FUNCTION __ioterm]
; [000000DE BYTES: COLLAPSED FUNCTION __setenvp]
; [0000019A BYTES: COLLAPSED FUNCTION _parse_cmdline]
; [000000BB BYTES: COLLAPSED FUNCTION __setargv]
; [00000137 BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsA]



sub_1000C703 proc near
mov     edi, edi
push    esi
mov     eax, offset unk_10016C40
mov     esi, offset unk_10016C40
push    edi
mov     edi, eax
cmp     eax, esi
jnb     short loc_1000C726

loc_1000C717:
mov     eax, [edi]
test    eax, eax
jz      short loc_1000C71F
call    eax

loc_1000C71F:
add     edi, 4
cmp     edi, esi
jb      short loc_1000C717

loc_1000C726:
pop     edi
pop     esi
retn
sub_1000C703 endp




; void __cdecl sub_1000C729()
sub_1000C729 proc near
mov     edi, edi
push    esi
mov     eax, offset unk_10016C48
mov     esi, offset unk_10016C48
push    edi
mov     edi, eax
cmp     eax, esi
jnb     short loc_1000C74C

loc_1000C73D:
mov     eax, [edi]
test    eax, eax
jz      short loc_1000C745
call    eax

loc_1000C745:
add     edi, 4
cmp     edi, esi
jb      short loc_1000C73D

loc_1000C74C:
pop     edi
pop     esi
retn
sub_1000C729 endp

; [00000160 BYTES: COLLAPSED FUNCTION __XcptFilter]
; [00000020 BYTES: COLLAPSED FUNCTION ___CppXcptFilter]
; [00000096 BYTES: COLLAPSED FUNCTION ___security_init_cookie]
; [00000085 BYTES: COLLAPSED FUNCTION __lseeki64_nolock]
; [00000119 BYTES: COLLAPSED FUNCTION __lseeki64]
; [00000733 BYTES: COLLAPSED FUNCTION __write_nolock]
; [000000DC BYTES: COLLAPSED FUNCTION __write]
; [00000049 BYTES: COLLAPSED FUNCTION __getbuf]
; [00000064 BYTES: COLLAPSED FUNCTION __isatty]



sub_1000D3BF proc near
mov     eax, offset off_10019EB8
retn
sub_1000D3BF endp

; [000000B1 BYTES: COLLAPSED FUNCTION ___initstdio]
; [00000020 BYTES: COLLAPSED FUNCTION ___endstdio]
; [00000041 BYTES: COLLAPSED FUNCTION __lock_file]
; [00000032 BYTES: COLLAPSED FUNCTION __lock_file2]
; [0000003C BYTES: COLLAPSED FUNCTION __unlock_file]
; [0000002F BYTES: COLLAPSED FUNCTION __unlock_file2]
; [00000032 BYTES: COLLAPSED FUNCTION __fileno]



sub_1000D5A6 proc near
and     dword_1001B5F8, 0
retn
sub_1000D5A6 endp

; [0000002F BYTES: COLLAPSED FUNCTION _CPtoLCID]
; [00000064 BYTES: COLLAPSED FUNCTION setSBCS(threadmbcinfostruct *)]
; [00000193 BYTES: COLLAPSED FUNCTION setSBUpLow(threadmbcinfostruct *)]
; [000000A4 BYTES: COLLAPSED FUNCTION ___updatetmbcinfo]
; [0000007C BYTES: COLLAPSED FUNCTION getSystemCP(int)]
; [000001E5 BYTES: COLLAPSED FUNCTION __setmbcp_nolock]
; [0000016A BYTES: COLLAPSED FUNCTION __setmbcp]
jmp     short loc_1000DC6A
; [0000002E BYTES: COLLAPSED CHUNK OF FUNCTION __setmbcp]
; [0000001E BYTES: COLLAPSED FUNCTION ___initmbctable]
; [00000149 BYTES: COLLAPSED FUNCTION ___freetlocinfo]
; [0000008F BYTES: COLLAPSED FUNCTION ___addlocaleref]
; [00000099 BYTES: COLLAPSED FUNCTION ___removelocaleref]
; [0000003E BYTES: COLLAPSED FUNCTION __updatetlocinfoEx_nolock]
; [00000076 BYTES: COLLAPSED FUNCTION ___updatetlocinfo]
; [00000187 BYTES: COLLAPSED FUNCTION __fputwc_nolock]
; [00000021 BYTES: COLLAPSED FUNCTION __initp_misc_cfltcvt_tab]
; [00000016 BYTES: COLLAPSED FUNCTION __get_printf_count_output]
; [00000117 BYTES: COLLAPSED FUNCTION __mbtowc_l]
; [0000001A BYTES: COLLAPSED FUNCTION _mbtowc]
; [00000038 BYTES: COLLAPSED FUNCTION __isleadbyte_l]
; [00000013 BYTES: COLLAPSED FUNCTION _isleadbyte]
; [00000012 BYTES: COLLAPSED FUNCTION unknown_libname_6]
align 4
; [00000020 BYTES: COLLAPSED FUNCTION __global_unwind2]
; [00000045 BYTES: COLLAPSED FUNCTION __unwind_handler]
; [00000084 BYTES: COLLAPSED FUNCTION __local_unwind2]
; [00000023 BYTES: COLLAPSED FUNCTION __abnormal_termination]
; [00000009 BYTES: COLLAPSED FUNCTION __NLG_Notify1]
; [0000001F BYTES: COLLAPSED FUNCTION __NLG_Notify]
; [00000003 BYTES: COLLAPSED FUNCTION __NLG_Call]
align 4
; [00000090 BYTES: COLLAPSED FUNCTION __local_unwind4]
; [00000046 BYTES: COLLAPSED FUNCTION __unwind_handler4]
; [0000001C BYTES: COLLAPSED FUNCTION _seh_longjmp_unwind4(x)]
; [00000017 BYTES: COLLAPSED FUNCTION _EH4_CallFilterFunc(x,x)]
; [00000019 BYTES: COLLAPSED FUNCTION _EH4_TransferToHandler(x,x)]
; [0000001A BYTES: COLLAPSED FUNCTION _EH4_GlobalUnwind(x)]
; [00000017 BYTES: COLLAPSED FUNCTION _EH4_LocalUnwind(x,x,x,x)]
; [00000087 BYTES: COLLAPSED FUNCTION _fastcopy_I]
; [000000E3 BYTES: COLLAPSED FUNCTION __VEC_memcpy]
; [0000001E BYTES: COLLAPSED FUNCTION __initp_misc_winsig]
; [00000037 BYTES: COLLAPSED FUNCTION _siglookup]



sub_1000E74E proc near
push    dword_1001B504
call    __decode_pointer
pop     ecx
retn
sub_1000E74E endp

; [000001B0 BYTES: COLLAPSED FUNCTION _raise]


; Attributes: bp-based frame

sub_1000E90B proc near

lpProcName= dword ptr -24h
var_14= byte ptr -14h
var_C= byte ptr -0Ch
var_8= byte ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h

mov     edi, edi
push    ebp
mov     ebp, esp
sub     esp, 14h
push    ebx
push    esi
push    edi
call    __encoded_null
and     [ebp+var_4], 0
cmp     dword_1001B510, 0
mov     ebx, eax
jnz     loc_1000E9BC
push    offset LibFileName ; "USER32.DLL"
call    ds:LoadLibraryA
mov     edi, eax
test    edi, edi
jz      loc_1000EA6D
mov     esi, ds:GetProcAddress
push    offset aMessageboxa ; "MessageBoxA"
push    edi             ; hModule
call    esi ; GetProcAddress
test    eax, eax
jz      loc_1000EA6D
push    eax
call    __encode_pointer
mov     [esp+24h+lpProcName], offset aGetactivewindo ; "GetActiveWindow"
push    edi             ; hModule
mov     dword_1001B510, eax
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
mov     [esp+24h+lpProcName], offset aGetlastactivep ; "GetLastActivePopup"
push    edi             ; hModule
mov     dword_1001B514, eax
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
mov     [esp+24h+lpProcName], offset aGetuserobjecti ; "GetUserObjectInformationA"
push    edi             ; hModule
mov     dword_1001B518, eax
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
pop     ecx
mov     dword_1001B520, eax
test    eax, eax
jz      short loc_1000E9BC
push    offset aGetprocesswind ; "GetProcessWindowStation"
push    edi             ; hModule
call    esi ; GetProcAddress
push    eax
call    __encode_pointer
pop     ecx
mov     dword_1001B51C, eax

loc_1000E9BC:
mov     eax, dword_1001B51C
cmp     eax, ebx
jz      short loc_1000EA14
cmp     dword_1001B520, ebx
jz      short loc_1000EA14
push    eax
call    __decode_pointer
push    dword_1001B520
mov     esi, eax
call    __decode_pointer
pop     ecx
pop     ecx
mov     edi, eax
test    esi, esi
jz      short loc_1000EA14
test    edi, edi
jz      short loc_1000EA14
call    esi
test    eax, eax
jz      short loc_1000EA0B
lea     ecx, [ebp+var_8]
push    ecx
push    0Ch
lea     ecx, [ebp+var_14]
push    ecx
push    1
push    eax
call    edi
test    eax, eax
jz      short loc_1000EA0B
test    [ebp+var_C], 1
jnz     short loc_1000EA14

loc_1000EA0B:
or      [ebp+arg_8], 200000h
jmp     short loc_1000EA4D

loc_1000EA14:
mov     eax, dword_1001B514
cmp     eax, ebx
jz      short loc_1000EA4D
push    eax
call    __decode_pointer
pop     ecx
test    eax, eax
jz      short loc_1000EA4D
call    eax
mov     [ebp+var_4], eax
test    eax, eax
jz      short loc_1000EA4D
mov     eax, dword_1001B518
cmp     eax, ebx
jz      short loc_1000EA4D
push    eax
call    __decode_pointer
pop     ecx
test    eax, eax
jz      short loc_1000EA4D
push    [ebp+var_4]
call    eax
mov     [ebp+var_4], eax

loc_1000EA4D:
push    dword_1001B510
call    __decode_pointer
pop     ecx
test    eax, eax
jz      short loc_1000EA6D
push    [ebp+arg_8]
push    [ebp+arg_4]
push    [ebp+arg_0]
push    [ebp+var_4]
call    eax
jmp     short loc_1000EA6F

loc_1000EA6D:
xor     eax, eax

loc_1000EA6F:
pop     edi
pop     esi
pop     ebx
leave
retn
sub_1000E90B endp

; [00000074 BYTES: COLLAPSED FUNCTION _strcat_s]
; [000000B5 BYTES: COLLAPSED FUNCTION _strncpy_s]
; [0000004B BYTES: COLLAPSED FUNCTION __set_error_mode]
; [00000051 BYTES: COLLAPSED FUNCTION __isdigit_l]
; [0000002E BYTES: COLLAPSED FUNCTION _isdigit]
; [00000056 BYTES: COLLAPSED FUNCTION __isxdigit_l]
; [00000030 BYTES: COLLAPSED FUNCTION _isxdigit]
; [00000020 BYTES: COLLAPSED FUNCTION __freea]


; Attributes: bp-based frame

sub_1000ED0D proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_1001B524, eax
pop     ebp
retn
sub_1000ED0D endp

; [00000060 BYTES: COLLAPSED FUNCTION ___crtInitCritSecAndSpinCount]
align 10h
; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
align 10h
; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection]
align 10h
; [000000BD BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
; [0000011E BYTES: COLLAPSED FUNCTION __calloc_impl]
; [0000021B BYTES: COLLAPSED FUNCTION _realloc]
; [0000007B BYTES: COLLAPSED FUNCTION __recalloc]


; Attributes: bp-based frame

sub_1000F281 proc near

arg_0= dword ptr  8

mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_1001B528, eax
pop     ebp
retn
sub_1000F281 endp

; [000001AB BYTES: COLLAPSED FUNCTION __fgetwc_nolock]
; [000001BA BYTES: COLLAPSED FUNCTION __ungetwc_nolock]
; [0000008A BYTES: COLLAPSED FUNCTION __iswctype_l]
; [00000076 BYTES: COLLAPSED FUNCTION _iswctype]
; [0000016C BYTES: COLLAPSED FUNCTION __wctomb_s_l]
; [0000001D BYTES: COLLAPSED FUNCTION _wctomb_s]
; [00000242 BYTES: COLLAPSED FUNCTION __wcstombs_l_helper]
; [000000BA BYTES: COLLAPSED FUNCTION __wcstombs_s_l]
; [00000020 BYTES: COLLAPSED FUNCTION _wcstombs_s]
align 10h
; [00000034 BYTES: COLLAPSED FUNCTION __allmul]
; [00000053 BYTES: COLLAPSED FUNCTION x_ismbbtype_l(localeinfo_struct *,uint,int,int)]
; [00000018 BYTES: COLLAPSED FUNCTION __ismbblead]
; [00000086 BYTES: COLLAPSED FUNCTION __free_osfhnd]
; [00000077 BYTES: COLLAPSED FUNCTION __get_osfhandle]
; [000000A0 BYTES: COLLAPSED FUNCTION ___lock_fhandle]
; [00000027 BYTES: COLLAPSED FUNCTION __unlock_fhandle]
; [000000C5 BYTES: COLLAPSED FUNCTION __putwch_nolock]
; [0000009F BYTES: COLLAPSED FUNCTION __fcloseall]
; [00000068 BYTES: COLLAPSED FUNCTION __flush]
; [00000048 BYTES: COLLAPSED FUNCTION __fflush_nolock]
; [000000DA BYTES: COLLAPSED FUNCTION _flsall]



sub_100100F1 proc near
push    1
call    _flsall
pop     ecx
retn
sub_100100F1 endp

; [000003A5 BYTES: COLLAPSED FUNCTION __crtLCMapStringA_stat(localeinfo_struct *,ulong,ulong,char const *,int,char *,int,int,int)]
; [00000045 BYTES: COLLAPSED FUNCTION ___crtLCMapStringA]
; [000001BA BYTES: COLLAPSED FUNCTION __crtGetStringTypeA_stat(localeinfo_struct *,ulong,char const *,int,ushort *,int,int,int)]
; [00000042 BYTES: COLLAPSED FUNCTION ___crtGetStringTypeA]
; [00000195 BYTES: COLLAPSED FUNCTION ___free_lc_time]
; [00000045 BYTES: COLLAPSED FUNCTION ___free_lconv_num]
; [0000008E BYTES: COLLAPSED FUNCTION ___free_lconv_mon]
align 10h
; [00000046 BYTES: COLLAPSED FUNCTION _strcspn]
align 10h
; [00000040 BYTES: COLLAPSED FUNCTION _strpbrk]
; [00000174 BYTES: COLLAPSED FUNCTION __flswbuf]
; [00000009 BYTES: COLLAPSED FUNCTION __fptrap]
; [0000022F BYTES: COLLAPSED FUNCTION strtoxl(localeinfo_struct *,char const *,char const * *,int,int)]
; [0000002B BYTES: COLLAPSED FUNCTION _strtol]
; [00000016 BYTES: COLLAPSED FUNCTION _atol]
; [000000B8 BYTES: COLLAPSED FUNCTION __isctype_l]
align 10h
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_16]
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_8]
; [00000139 BYTES: COLLAPSED FUNCTION __filwbuf]
; [000000F1 BYTES: COLLAPSED FUNCTION __ungetc_nolock]
; [00000072 BYTES: COLLAPSED FUNCTION _ungetc]
; [0000012B BYTES: COLLAPSED FUNCTION __filbuf]
; [0000003E BYTES: COLLAPSED FUNCTION ___crtGetStringTypeW]
; [0000001F BYTES: COLLAPSED FUNCTION ___initconout]
; [0000002D BYTES: COLLAPSED FUNCTION ___termcon]
; [00000077 BYTES: COLLAPSED FUNCTION __fclose_nolock]
; [0000007C BYTES: COLLAPSED FUNCTION _fclose]
; [000000E1 BYTES: COLLAPSED FUNCTION __commit]
; [00000049 BYTES: COLLAPSED FUNCTION ___ansicp]
; [000001B4 BYTES: COLLAPSED FUNCTION ___convertcp]
; [000005C2 BYTES: COLLAPSED FUNCTION __read_nolock]
; [000000FD BYTES: COLLAPSED FUNCTION __read]
; [0000009C BYTES: COLLAPSED FUNCTION __close_nolock]
; [000000CD BYTES: COLLAPSED FUNCTION __close]
; [00000031 BYTES: COLLAPSED FUNCTION __freebuf]
align 10h
; [00000061 BYTES: COLLAPSED FUNCTION ___ascii_strnicmp]
align 10h
; [00000005 BYTES: COLLAPSED FUNCTION found_bx]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strchr]
; [000000B8 BYTES: COLLAPSED FUNCTION ___from_strstr_to_strchr]
; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind]
; START OF FUNCTION CHUNK FOR sub_10001128

loc_10012084:
; __unwind { // loc_1001208C
;   cleanup() // owned by 1000113F
mov     ecx, [ebp+var_10]
jmp     sub_10001104

loc_1001208C:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016C58
jmp     ___CxxFrameHandler3
; } // starts at 10012084
; END OF FUNCTION CHUNK FOR sub_10001128
; START OF FUNCTION CHUNK FOR sub_1000101C
;   ADDITIONAL PARENT FUNCTION sub_1000104E
;   ADDITIONAL PARENT FUNCTION Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)

loc_100120A7:
; __unwind { // loc_100120AF
;   cleanup() // owned by 10001036
;   cleanup() // owned by 100015A8
mov     ecx, [ebp+var_10]
jmp     sub_10004915

loc_100120AF:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016CD8
jmp     ___CxxFrameHandler3
; } // starts at 100120A7
; END OF FUNCTION CHUNK FOR sub_1000101C
; [00000023 BYTES: COLLAPSED CHUNK OF FUNCTION sub_100015C0]
; START OF FUNCTION CHUNK FOR sub_10001643

loc_100120ED:           ; void *
; __unwind { // loc_100120F7
;   cleanup() // owned by 10001671
push    [ebp+var_10]
call    ??3@YAXPAX@Z    ; operator delete(void *)
pop     ecx
retn

loc_100120F7:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016D30
jmp     ___CxxFrameHandler3
; } // starts at 100120ED
; END OF FUNCTION CHUNK FOR sub_10001643
; START OF FUNCTION CHUNK FOR sub_1000182B

loc_10012112:
; __unwind { // loc_10012112
mov     edx, [esp-4+N]
lea     eax, [edx+0Ch]
mov     ecx, [edx-20h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016D94
jmp     ___CxxFrameHandler3
; } // starts at 10012112
; END OF FUNCTION CHUNK FOR sub_1000182B
; START OF FUNCTION CHUNK FOR sub_10001C29

loc_1001212D:
; __unwind { // loc_10012140
;   cleanup() // owned by 10001C48
mov     ecx, [ebp+var_58]
jmp     sub_10004915

loc_10012135:
;   cleanup() // owned by 10001C5C
;   cleanup() // owned by 10001C60
;   cleanup() // owned by 10001CF9
;   cleanup() // owned by 10001D12
mov     ecx, [ebp+var_58]
add     ecx, 0Ch
jmp     loc_10001935

loc_10012140:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-60h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-8]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016E24
jmp     ___CxxFrameHandler3
; } // starts at 1001212D
; END OF FUNCTION CHUNK FOR sub_10001C29
; START OF FUNCTION CHUNK FOR sub_10001D44

loc_10012165:
; __unwind { // loc_10012178
;   cleanup() // owned by 10001D5B
mov     ecx, [ebp+var_10]
jmp     sub_10004915

loc_1001216D:
mov     ecx, [ebp+var_10]
add     ecx, 0Ch
jmp     loc_10001935

loc_10012178:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016E58
jmp     ___CxxFrameHandler3
; } // starts at 10012165
; END OF FUNCTION CHUNK FOR sub_10001D44
; START OF FUNCTION CHUNK FOR sub_10001D98

loc_10012193:
; __unwind { // loc_1001219B
;   cleanup() // owned by 10001DAF
mov     ecx, [ebp+var_18]
jmp     sub_10001104

loc_1001219B:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016E94
jmp     ___CxxFrameHandler3
; } // starts at 10012193
; END OF FUNCTION CHUNK FOR sub_10001D98
; START OF FUNCTION CHUNK FOR sub_10001E27

loc_100121B6:
; __unwind { // loc_100121C9
;   cleanup() // owned by 10001E3D
mov     ecx, [ebp+var_14]
jmp     sub_10004915

loc_100121BE:
;   cleanup() // owned by 10001E4F
;   cleanup() // owned by 10001E53
;   cleanup() // owned by 10001E61
;   cleanup() // owned by 10001E7A
mov     ecx, [ebp+var_14]
add     ecx, 0Ch
jmp     loc_10001935

loc_100121C9:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016F24
jmp     ___CxxFrameHandler3
; } // starts at 100121B6
; END OF FUNCTION CHUNK FOR sub_10001E27
; START OF FUNCTION CHUNK FOR sub_10001F23

loc_100121E4:
; __unwind { // loc_100121FD
;   cleanup() // owned by 10001F31
;   cleanup() // owned by 10001F42
mov     eax, [ebp+var_24]
and     eax, 1
jz      locret_100121FC
and     [ebp+var_24], 0FFFFFFFEh
mov     ecx, [ebp+var_1C]
jmp     loc_10001935

locret_100121FC:
retn

loc_100121FD:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-28h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016F50
jmp     ___CxxFrameHandler3
; } // starts at 100121E4
; END OF FUNCTION CHUNK FOR sub_10001F23
; START OF FUNCTION CHUNK FOR Initialize

loc_10012218:
; __unwind { // loc_10012218
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10016FA8
jmp     ___CxxFrameHandler3
; } // starts at 10012218
; END OF FUNCTION CHUNK FOR Initialize
; START OF FUNCTION CHUNK FOR UnInitialize

loc_10012233:
; __unwind { // loc_10012233
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017000
jmp     ___CxxFrameHandler3
; } // starts at 10012233
; END OF FUNCTION CHUNK FOR UnInitialize
; START OF FUNCTION CHUNK FOR InstallCallback

loc_1001224E:
; __unwind { // loc_1001224E
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017058
jmp     ___CxxFrameHandler3
; } // starts at 1001224E
; END OF FUNCTION CHUNK FOR InstallCallback
; START OF FUNCTION CHUNK FOR UninstallCallback

loc_10012269:
; __unwind { // loc_10012269
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100170B0
jmp     ___CxxFrameHandler3
; } // starts at 10012269
; END OF FUNCTION CHUNK FOR UninstallCallback
; START OF FUNCTION CHUNK FOR RequestShowUI

loc_10012284:
; __unwind { // loc_10012284
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017108
jmp     ___CxxFrameHandler3
; } // starts at 10012284
; END OF FUNCTION CHUNK FOR RequestShowUI
; START OF FUNCTION CHUNK FOR GetServiceHandle

loc_1001229F:
; __unwind { // loc_1001229F
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017160
jmp     ___CxxFrameHandler3
; } // starts at 1001229F
; END OF FUNCTION CHUNK FOR GetServiceHandle
; START OF FUNCTION CHUNK FOR Init

loc_100122BA:
; __unwind { // loc_100122BA
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100171B8
jmp     ___CxxFrameHandler3
; } // starts at 100122BA
; END OF FUNCTION CHUNK FOR Init
; START OF FUNCTION CHUNK FOR StartConfigUI

loc_100122D5:
; __unwind { // loc_100122D5
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017210
jmp     ___CxxFrameHandler3
; } // starts at 100122D5
; END OF FUNCTION CHUNK FOR StartConfigUI
; START OF FUNCTION CHUNK FOR GetDefaultConfig

loc_100122F0:
; __unwind { // loc_100122F0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017268
jmp     ___CxxFrameHandler3
; } // starts at 100122F0
; END OF FUNCTION CHUNK FOR GetDefaultConfig
; START OF FUNCTION CHUNK FOR GetDriverInfo

loc_1001230B:
; __unwind { // loc_1001230B
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100172C0
jmp     ___CxxFrameHandler3
; } // starts at 1001230B
; END OF FUNCTION CHUNK FOR GetDriverInfo
; START OF FUNCTION CHUNK FOR GetDriverProperties

loc_10012326:
; __unwind { // loc_10012326
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017318
jmp     ___CxxFrameHandler3
; } // starts at 10012326
; END OF FUNCTION CHUNK FOR GetDriverProperties
; START OF FUNCTION CHUNK FOR GetDriverProperties2

loc_10012341:
; __unwind { // loc_10012341
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017370
jmp     ___CxxFrameHandler3
; } // starts at 10012341
; END OF FUNCTION CHUNK FOR GetDriverProperties2
; START OF FUNCTION CHUNK FOR SetDriverProperties2

loc_1001235C:
; __unwind { // loc_1001235C
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100173C8
jmp     ___CxxFrameHandler3
; } // starts at 1001235C
; END OF FUNCTION CHUNK FOR SetDriverProperties2
; START OF FUNCTION CHUNK FOR SetSSAData

loc_10012377:
; __unwind { // loc_10012377
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017420
jmp     ___CxxFrameHandler3
; } // starts at 10012377
; END OF FUNCTION CHUNK FOR SetSSAData
; START OF FUNCTION CHUNK FOR GetSSAData

loc_10012392:
; __unwind { // loc_10012392
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017478
jmp     ___CxxFrameHandler3
; } // starts at 10012392
; END OF FUNCTION CHUNK FOR GetSSAData
; START OF FUNCTION CHUNK FOR SCAEnableECU

loc_100123AD:
; __unwind { // loc_100123AD
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100174D0
jmp     ___CxxFrameHandler3
; } // starts at 100123AD
; END OF FUNCTION CHUNK FOR SCAEnableECU
; START OF FUNCTION CHUNK FOR GetSalesOrganization

loc_100123C8:
; __unwind { // loc_100123C8
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017528
jmp     ___CxxFrameHandler3
; } // starts at 100123C8
; END OF FUNCTION CHUNK FOR GetSalesOrganization
; START OF FUNCTION CHUNK FOR CheckSecurityAccessPermissions

loc_100123E3:
; __unwind { // loc_100123E3
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-18h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017580
jmp     ___CxxFrameHandler3
; } // starts at 100123E3
; END OF FUNCTION CHUNK FOR CheckSecurityAccessPermissions
; START OF FUNCTION CHUNK FOR sub_10002CAC

loc_100123FE:
; __unwind { // loc_1001240E
lea     ecx, [ebp+0C04h+var_C14]
jmp     loc_10002B6B

loc_10012406:
;   cleanup() // owned by 10002D0F
;   cleanup() // owned by 10002D2F
lea     ecx, [ebp+0C04h+var_C14]
jmp     loc_10002B6B

loc_1001240E:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx+0C0Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100175B4
jmp     ___CxxFrameHandler3
; } // starts at 100123FE
; END OF FUNCTION CHUNK FOR sub_10002CAC
; START OF FUNCTION CHUNK FOR sub_100031FE

loc_10012436:           ; this
; __unwind { // loc_1001243E
;   cleanup() // owned by 10003257
lea     ecx, [ebp+var_1C]
jmp     ??1CSecurity@@UAE@XZ ; CSecurity::~CSecurity(void)

loc_1001243E:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-24h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100175E0
jmp     ___CxxFrameHandler3
; } // starts at 10012436
; END OF FUNCTION CHUNK FOR sub_100031FE
; START OF FUNCTION CHUNK FOR sub_1000343F
;   ADDITIONAL PARENT FUNCTION sub_100034E0

loc_10012459:
; __unwind { // loc_10012464
;   cleanup() // owned by 10003450
;   cleanup() // owned by 100034FB
mov     ecx, [ebp+var_10]
add     ecx, 28h ; '('
jmp     sub_10001128

loc_10012464:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001760C
jmp     ___CxxFrameHandler3
; } // starts at 10012459
; END OF FUNCTION CHUNK FOR sub_1000343F
; START OF FUNCTION CHUNK FOR sub_1000350F

loc_1001247F:
; __unwind { // loc_100124AF
lea     ecx, [ebp+var_2D]
jmp     nullsub_1

loc_10012487:
;   cleanup() // owned by 1000352D
;   cleanup() // owned by 1000353B
;   cleanup() // owned by 100035C3
;   cleanup() // owned by 1000363F
lea     ecx, [ebp+var_2C]
jmp     loc_10001935

loc_1001248F:
lea     ecx, [ebp+var_70]
jmp     loc_10001935

loc_10012497:
lea     ecx, [ebp+var_54]
jmp     loc_10001935

loc_1001249F:
;   cleanup() // owned by 1000357B
;   cleanup() // owned by 10003590
;   cleanup() // owned by 100035B5
;   cleanup() // owned by 100035F6
;   cleanup() // owned by 10003631
lea     ecx, [ebp+var_54]
jmp     loc_10001935

loc_100124A7:
;   cleanup() // owned by 1000360B
lea     ecx, [ebp+var_70]
jmp     loc_10001935

loc_100124AF:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-74h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017630
jmp     ___CxxFrameHandler3
; } // starts at 1001247F
; END OF FUNCTION CHUNK FOR sub_1000350F
; START OF FUNCTION CHUNK FOR sub_10003664
;   ADDITIONAL PARENT FUNCTION sub_10003730

loc_100124D4:
; __unwind { // loc_100124F5
;   cleanup() // owned by 10003670
;   cleanup() // owned by 10003696
;   cleanup() // owned by 100036D3
;   cleanup() // owned by 1000373C
;   cleanup() // owned by 10003762
;   cleanup() // owned by 1000379F
mov     eax, [ebp+var_3C]
and     eax, 1
jz      locret_100124EC
and     [ebp+var_3C], 0FFFFFFFEh
mov     ecx, [ebp+var_34]
jmp     loc_10001935

locret_100124EC:
retn

loc_100124ED:
;   cleanup() // owned by 100036C6
;   cleanup() // owned by 10003792
lea     ecx, [ebp+var_38]
jmp     loc_10002B6B

loc_100124F5:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-40h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001769C
jmp     ___CxxFrameHandler3
; } // starts at 100124D4
; END OF FUNCTION CHUNK FOR sub_10003664
; START OF FUNCTION CHUNK FOR sub_100037FC

loc_1001251A:
; __unwind { // loc_10012532
;   cleanup() // owned by 1000381C
;   cleanup() // owned by 10003855
;   cleanup() // owned by 1000389D
lea     ecx, [ebp+var_2C]
jmp     loc_10001935

loc_10012522:
lea     ecx, [ebp+var_48]
jmp     loc_10001935

loc_1001252A:
;   cleanup() // owned by 10003845
;   cleanup() // owned by 1000388D
lea     ecx, [ebp+var_48]
jmp     loc_10001935

loc_10012532:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-4Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100176D8
jmp     ___CxxFrameHandler3
; } // starts at 1001251A
; END OF FUNCTION CHUNK FOR sub_100037FC
; START OF FUNCTION CHUNK FOR sub_10003941
;   ADDITIONAL PARENT FUNCTION sub_10003C49

loc_10012557:
; __unwind { // loc_10012562
mov     ecx, [ebp+var_10]
add     ecx, 18h
jmp     sub_1000343F

loc_10012562:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017704
jmp     ___CxxFrameHandler3
; } // starts at 10012557
; END OF FUNCTION CHUNK FOR sub_10003941
; START OF FUNCTION CHUNK FOR sub_1000348D
;   ADDITIONAL PARENT FUNCTION sub_10003CC8

loc_1001257D:
; __unwind { // loc_1001259E
;   cleanup() // owned by 100034AB
;   cleanup() // owned by 10003CE6
lea     ecx, [ebp+var_2C]
jmp     loc_10001935

loc_10012585:
;   cleanup() // owned by 100034C8
;   cleanup() // owned by 10003CFF
mov     eax, [ebp+var_10]
and     eax, 1
jz      locret_1001259D
and     [ebp+var_10], 0FFFFFFFEh
mov     ecx, [ebp+arg_0]
jmp     loc_10001935

locret_1001259D:
retn

loc_1001259E:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-30h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017738
jmp     ___CxxFrameHandler3
; } // starts at 1001257D
; END OF FUNCTION CHUNK FOR sub_1000348D
; START OF FUNCTION CHUNK FOR sub_10003D17

loc_100125B9:
; __unwind { // loc_100125DA
;   cleanup() // owned by 10003DDA
lea     ecx, [ebp+var_18]
jmp     ??1SchedulerPolicy@Concurrency@@QAE@XZ ; Concurrency::SchedulerPolicy::~SchedulerPolicy(void)

loc_100125C1:
;   cleanup() // owned by 10003E5F
mov     eax, [ebp+var_14]
and     eax, 1
jz      locret_100125D9
and     [ebp+var_14], 0FFFFFFFEh
mov     ecx, [ebp+arg_0]
jmp     loc_10001935

locret_100125D9:
retn

loc_100125DA:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-44h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_1001776C
jmp     ___CxxFrameHandler3
; } // starts at 100125B9
; END OF FUNCTION CHUNK FOR sub_10003D17
; START OF FUNCTION CHUNK FOR sub_10003E73

loc_100125F5:
; __unwind { // loc_10012615
lea     ecx, [ebp+var_4C]
jmp     loc_10001935

loc_100125FD:
;   cleanup() // owned by 10003EA0
;   cleanup() // owned by 10003EB2
;   cleanup() // owned by 10003F2A
lea     ecx, [ebp+var_2C]
jmp     loc_10001935

loc_10012605:
;   cleanup() // owned by 10003EF5
;   cleanup() // owned by 10003F1B
lea     ecx, [ebp+var_68]
jmp     loc_10001935

loc_1001260D:
;   cleanup() // owned by 10003F0B
lea     ecx, [ebp+var_4C]
jmp     loc_10001935

loc_10012615:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-6Ch]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     ecx, [edx-4]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017790
jmp     ___CxxFrameHandler3
; } // starts at 100125F5
; END OF FUNCTION CHUNK FOR sub_10003E73
; [0000001B BYTES: COLLAPSED CHUNK OF FUNCTION std::string::_Copy(uint,uint)]
; START OF FUNCTION CHUNK FOR sub_1000423E
;   ADDITIONAL PARENT FUNCTION sub_10004616

loc_10012655:
; __unwind { // loc_1001265D
;   cleanup() // owned by 10004257
;   cleanup() // owned by 10004630
mov     ecx, [ebp+var_10]
jmp     sub_10004915

loc_1001265D:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-14h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_10017870
jmp     ___CxxFrameHandler3
; } // starts at 10012655
; END OF FUNCTION CHUNK FOR sub_1000423E
; START OF FUNCTION CHUNK FOR sub_1000435F
;   ADDITIONAL PARENT FUNCTION sub_100044AB

loc_10012678:
; __unwind { // loc_10012680
;   cleanup() // owned by 10004378
;   cleanup() // owned by 100044C4
lea     ecx, [ebp+var_28]
jmp     loc_10004234

loc_10012680:
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0Ch]
mov     ecx, [edx-54h]
xor     ecx, eax        ; StackCookie
call    @__security_check_cookie@4 ; __security_check_cookie(x)
mov     eax, offset stru_100178AC
jmp     ___CxxFrameHandler3
; } // starts at 10012678
; END OF FUNCTION CHUNK FOR sub_1000435F
; [0000001B BYTES: COLLAPSED CHUNK OF FUNCTION CallUnexpected(_s_ESTypeList const *)]



sub_100126B6 proc near
mov     ecx, offset unk_1001AAC4
call    sub_10001D98
push    offset sub_100126E2 ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_100126B6 endp




sub_100126CC proc near
mov     ecx, offset unk_1001AAE0
call    sub_10003C49
push    offset sub_100126EC ; void (__cdecl *)()
call    _atexit
pop     ecx
retn
sub_100126CC endp




; void __cdecl sub_100126E2()
sub_100126E2 proc near
mov     ecx, offset unk_1001AAC4
jmp     sub_10001128
sub_100126E2 endp




; void __cdecl sub_100126EC()
sub_100126EC proc near
mov     ecx, offset unk_1001AAE0
jmp     sub_10003941
sub_100126EC endp




; void __cdecl sub_100126F6()
sub_100126F6 proc near
mov     dword_1001AB40, offset off_100131AC
mov     ecx, offset dword_1001AB40
jmp     sub_10004915
sub_100126F6 endp

align 100h
dd 200h dup(?)
_text ends

; Section 2. (virtual address 00013000)
; Virtual size                  : 00005960 (  22880.)
; Section size in file          : 00005A00 (  23040.)
; Offset to raw data for section: 00011C00
; Flags 40000040: Data Readable
; Alignment     : default
;
; Imports from ADVAPI32.dll
;

; Segment type: Externs
; _idata
; LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
extrn RegQueryValueExW:dword
; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
extrn RegCloseKey:dword
; LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
extrn RegOpenKeyExW:dword

;
; Imports from KERNEL32.dll
;
; void (__stdcall *EnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn EnterCriticalSection:dword
; BOOL (__stdcall *TryEnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn TryEnterCriticalSection:dword
; void (__stdcall *LeaveCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn LeaveCriticalSection:dword
; DWORD (__stdcall *SetFilePointer)(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
extrn SetFilePointer:dword
; HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
extrn CreateFileW:dword
; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
extrn CloseHandle:dword
; BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
extrn WriteFile:dword
; void (__stdcall *GetLocalTime)(LPSYSTEMTIME lpSystemTime)
extrn GetLocalTime:dword
; void (__stdcall *DeleteCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
extrn DeleteCriticalSection:dword
; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
extrn MultiByteToWideChar:dword
; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
extrn FreeLibrary:dword
; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
extrn GetProcAddress:dword
; void (__stdcall *Sleep)(DWORD dwMilliseconds)
extrn Sleep:dword
; HMODULE (__stdcall *LoadLibraryW)(LPCWSTR lpLibFileName)
extrn LoadLibraryW:dword
; DWORD (__stdcall *GetLastError)()
extrn GetLastError:dword
; DWORD (__stdcall *GetEnvironmentVariableW)(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
extrn GetEnvironmentVariableW:dword
; BOOL (__stdcall *InitializeCriticalSectionAndSpinCount)(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount)
extrn InitializeCriticalSectionAndSpinCount:dword
; BOOL (__stdcall *HeapDestroy)(HANDLE hHeap)
extrn HeapDestroy:dword
; BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
extrn ReadFile:dword
; void (__stdcall *RtlUnwind)(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
extrn __imp_RtlUnwind:dword
; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
extrn HeapFree:dword
; void (__stdcall *RaiseException)(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments)
extrn RaiseException:dword
; DWORD (__stdcall *GetCurrentThreadId)()
extrn GetCurrentThreadId:dword
; LPSTR (__stdcall *GetCommandLineA)()
extrn GetCommandLineA:dword
; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
extrn TerminateProcess:dword
; HANDLE (__stdcall *GetCurrentProcess)()
extrn GetCurrentProcess:dword
; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
extrn UnhandledExceptionFilter:dword
; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
extrn SetUnhandledExceptionFilter:dword
; BOOL (__stdcall *IsDebuggerPresent)()
extrn IsDebuggerPresent:dword
; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
extrn HeapAlloc:dword
; HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName)
extrn GetModuleHandleW:dword
; LPVOID (__stdcall *TlsGetValue)(DWORD dwTlsIndex)
extrn TlsGetValue:dword
; DWORD (__stdcall *TlsAlloc)()
extrn TlsAlloc:dword
; BOOL (__stdcall *TlsSetValue)(DWORD dwTlsIndex, LPVOID lpTlsValue)
extrn TlsSetValue:dword
; BOOL (__stdcall *TlsFree)(DWORD dwTlsIndex)
extrn TlsFree:dword
; LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend)
extrn InterlockedIncrement:dword
; void (__stdcall *SetLastError)(DWORD dwErrCode)
extrn SetLastError:dword
; LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend)
extrn InterlockedDecrement:dword
; HANDLE (__stdcall *GetStdHandle)(DWORD nStdHandle)
extrn GetStdHandle:dword
; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
extrn GetModuleFileNameA:dword
; HANDLE (__stdcall *HeapCreate)(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
extrn HeapCreate:dword
; BOOL (__stdcall *VirtualFree)(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
extrn VirtualFree:dword
; LPVOID (__stdcall *VirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
extrn VirtualAlloc:dword
; LPVOID (__stdcall *HeapReAlloc)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
extrn HeapReAlloc:dword
; SIZE_T (__stdcall *HeapSize)(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem)
extrn HeapSize:dword
; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
extrn ExitProcess:dword
; UINT (__stdcall *SetHandleCount)(UINT uNumber)
extrn SetHandleCount:dword
; DWORD (__stdcall *GetFileType)(HANDLE hFile)
extrn GetFileType:dword
; void (__stdcall *GetStartupInfoA)(LPSTARTUPINFOA lpStartupInfo)
extrn GetStartupInfoA:dword
; BOOL (__stdcall *FreeEnvironmentStringsA)(LPCH penv)
extrn FreeEnvironmentStringsA:dword
; LPCH (__stdcall *GetEnvironmentStrings)()
extrn GetEnvironmentStrings:dword
; BOOL (__stdcall *FreeEnvironmentStringsW)(LPWCH penv)
extrn FreeEnvironmentStringsW:dword
; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
extrn WideCharToMultiByte:dword
; LPWCH (__stdcall *GetEnvironmentStringsW)()
extrn GetEnvironmentStringsW:dword
; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
extrn QueryPerformanceCounter:dword
; DWORD (__stdcall *GetTickCount)()
extrn GetTickCount:dword
; DWORD (__stdcall *GetCurrentProcessId)()
extrn GetCurrentProcessId:dword
; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
extrn GetSystemTimeAsFileTime:dword
; UINT (__stdcall *GetConsoleCP)()
extrn GetConsoleCP:dword
; BOOL (__stdcall *GetConsoleMode)(HANDLE hConsoleHandle, LPDWORD lpMode)
extrn GetConsoleMode:dword
; BOOL (__stdcall *GetCPInfo)(UINT CodePage, LPCPINFO lpCPInfo)
extrn GetCPInfo:dword
; UINT (__stdcall *GetACP)()
extrn GetACP:dword
; UINT (__stdcall *GetOEMCP)()
extrn GetOEMCP:dword
; BOOL (__stdcall *IsValidCodePage)(UINT CodePage)
extrn IsValidCodePage:dword
; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
extrn LoadLibraryA:dword
; int (__stdcall *GetLocaleInfoA)(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
extrn GetLocaleInfoA:dword
; BOOL (__stdcall *SetStdHandle)(DWORD nStdHandle, HANDLE hHandle)
extrn SetStdHandle:dword
; BOOL (__stdcall *WriteConsoleA)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
extrn WriteConsoleA:dword
; UINT (__stdcall *GetConsoleOutputCP)()
extrn GetConsoleOutputCP:dword
; BOOL (__stdcall *WriteConsoleW)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
extrn WriteConsoleW:dword
; int (__stdcall *LCMapStringA)(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest)
extrn LCMapStringA:dword
; int (__stdcall *LCMapStringW)(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest)
extrn LCMapStringW:dword
; BOOL (__stdcall *GetStringTypeA)(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeA:dword
; BOOL (__stdcall *GetStringTypeW)(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType)
extrn GetStringTypeW:dword
; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
extrn CreateFileA:dword
; BOOL (__stdcall *FlushFileBuffers)(HANDLE hFile)
extrn FlushFileBuffers:dword

;
; Imports from dllsecurity.dll
;
; __declspec(dllimport) public: __thiscall CSecurity::CSecurity(void)
extrn __imp_??0CSecurity@@QAE@XZ:dword
; __declspec(dllimport) public: long __thiscall CSecurity::SetSeedAndGetKey(unsigned short, unsigned short, unsigned short *)
extrn __imp_?SetSeedAndGetKey@CSecurity@@QAEJGGPAG@Z:dword

;
; Imports from ole32.dll
;
; LPVOID (__stdcall *CoTaskMemAlloc)(SIZE_T cb)
extrn CoTaskMemAlloc:dword



; Segment type: Pure data
; Segment permissions: Read
_rdata segment para public 'DATA' use32
assume cs:_rdata
;org 10013158h
unk_10013158 db    0
db    0
db    0
db    0
dd offset sub_100126B6
dd offset sub_100126CC
; const _PVFV First
First dd 0
; const _PIFV dword_10013168
dword_10013168 dd 0
dd offset ___onexitinit
dd offset sub_1000A6F4
dd offset ___initstdio
dd offset ___initmbctable
; const _PIFV Last
Last dd 0
unk_10013180 db    0
db    0
db    0
db    0
dd offset ___termcon
dd offset ___endstdio
; const _PVFV dword_1001318C
dword_1001318C dd 0
unk_10013190 db    0
db    0
db    0
db    0
; const _PVFV dword_10013194
dword_10013194 dd 0
aBadAllocation db 'bad allocation',0
align 4
dd offset unk_100163B8
off_100131AC dd offset loc_10001072
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
dd offset unk_10016438
off_100131B8 dd offset unknown_libname_1 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_10016480
off_100131CC dd offset loc_1000117E
dd offset sub_1000115D
dd offset sub_10001168
dd offset sub_10001173
dd offset unk_100164CC
off_100131E0 dd offset unknown_libname_2 ; Microsoft VisualC 2-14/net runtime
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
; const wchar_t aSS
aSS:
text "UTF-16LE", '%s%s',0
align 4
; const wchar_t asc_1001320C
asc_1001320C:
text "UTF-16LE", 0Dh,0Ah,0
align 8
; const wchar_t aFromSAtSFileSL
aFromSAtSFileSL:
text "UTF-16LE", 'FROM: "%s" AT: %s',0Dh
text "UTF-16LE", 0Ah
text "UTF-16LE", 'FILE: %s LINE: %d',0Dh
text "UTF-16LE", 0Ah
text "UTF-16LE", '%s %s',0Dh,0Ah,0
; const wchar_t aInfo
aInfo:
text "UTF-16LE", 'INFO:',0
aError:
text "UTF-16LE", 'ERROR:',0
align 10h
aDebug:
text "UTF-16LE", 'DEBUG:',0
align 10h
aMessage_0:
text "UTF-16LE", 'MESSAGE:',0
align 4
; const wchar_t a02d02d02d02d02
a02d02d02d02d02:
text "UTF-16LE", '%02d:%02d:%02d %02d/%'
text "UTF-16LE", '02d/%02d',0
dd offset unk_10016514
off_100132F4 dd offset sub_10001744
dd offset sub_1000120C
dd offset sub_10001299
dd offset sub_1000169D
dd offset sub_100011EB
dd offset sub_10001380
dd offset sub_100013C5
dd offset sub_100012CD
; const wchar_t String
String:
text "UTF-16LE", '_APPLICATION_NAME_',0
align 4
; const wchar_t aExceptionInCon
aExceptionInCon:
text "UTF-16LE", 'Exception in construc'
text "UTF-16LE", 'tor',0
align 10h
; const wchar_t aUnknownLine
aUnknownLine:
text "UTF-16LE", 'unknown line',0
align 4
; const wchar_t aLine
aLine:
text "UTF-16LE", 'Line: ',0
align 4
; const wchar_t aUnknownFile
aUnknownFile:
text "UTF-16LE", 'unknown file',0
align 4
; const wchar_t aFile
aFile:
text "UTF-16LE", 'File: ',0
align 4
; const wchar_t asc_100133C8
asc_100133C8:
text "UTF-16LE", ' ',0
; const wchar_t aEmptyMessage
aEmptyMessage:
text "UTF-16LE", 'empty message',0
; const wchar_t aMessage
aMessage:
text "UTF-16LE", 'Message: ',0
dd offset unk_10016560
off_10013400 dd offset loc_10001D7C
dd offset sub_10001D30
dd offset sub_10001D36
aPleaseUseWhatW db 'Please use "what_w" member function'
db ' instead',0
aCouldNotCreate:
text "UTF-16LE", 'could not create crit'
text "UTF-16LE", 'ical section',0
align 10h
aCommonIncludeC:
text "UTF-16LE", '..\..\..\..\common\in'
text "UTF-16LE", 'clude\critsection\Bas'
text "UTF-16LE", 'icCriticalSection.h',0
; const WCHAR ValueName
ValueName:
text "UTF-16LE", 'FunctionLibrary',0
align 10h
; const WCHAR SubKey
SubKey:
text "UTF-16LE", 'SOFTWARE\PassThruSupp'
text "UTF-16LE", 'ort.04.04\Jastec',0
dd offset SubKey        ; "SOFTWARE\\PassThruSupport.04.04\\Jastec"
dd offset ValueName     ; "FunctionLibrary"
dd offset unk_100165AC
; Exported entry   4. ??_7CSecurity@@6B@
public ??_7CSecurity@@6B@
; const CSecurity::`vftable'
??_7CSecurity@@6B@ dd offset sub_10001EAF
align 10h
aAnExceptionWas:
text "UTF-16LE", '***** !!! An exceptio'
text "UTF-16LE", 'n was thrown !!! ****'
text "UTF-16LE", '*',0
aEndFunctionIni:
text "UTF-16LE", 'End function "Initial'
text "UTF-16LE", 'ize"',0
aScan100Cpp:
text "UTF-16LE", '.\Scan100.cpp',0
aBeginFunctionI:
text "UTF-16LE", 'Begin function "Initi'
text "UTF-16LE", 'alize"',0
aEndFunctionUni:
text "UTF-16LE", 'End function "UnIniti'
text "UTF-16LE", 'alize"',0
aBeginFunctionU:
text "UTF-16LE", 'Begin function "UnIni'
text "UTF-16LE", 'tialize"',0
aEndFunctionIns:
text "UTF-16LE", 'End function "Install'
text "UTF-16LE", 'Callback"',0
align 8
aBeginFunctionI_0:
text "UTF-16LE", 'Begin function "Insta'
text "UTF-16LE", 'llCallback"',0
align 10h
aEndFunctionUni_0:
text "UTF-16LE", 'End function "Uninsta'
text "UTF-16LE", 'llCallback"',0
align 8
aBeginFunctionU_0:
text "UTF-16LE", 'Begin function "Unins'
text "UTF-16LE", 'tallCallback"',0
align 10h
aEndFunctionReq:
text "UTF-16LE", 'End function "Request'
text "UTF-16LE", 'ShowUI"',0
align 4
aBeginFunctionR:
text "UTF-16LE", 'Begin function "Reque'
text "UTF-16LE", 'stShowUI"',0
align 10h
aEndFunctionGet:
text "UTF-16LE", 'End function "GetServ'
text "UTF-16LE", 'iceHandle"',0
aBeginFunctionG:
text "UTF-16LE", 'Begin function "GetSe'
text "UTF-16LE", 'rviceHandle"',0
aEndFunctionIni_0:
text "UTF-16LE", 'End function "Init"',0
aBeginFunctionI_1:
text "UTF-16LE", 'Begin function "Init"'
text "UTF-16LE", 0
aEndFunctionSta:
text "UTF-16LE", 'End function "StartCo'
text "UTF-16LE", 'nfigUI"',0
align 4
aBeginFunctionS:
text "UTF-16LE", 'Begin function "Start'
text "UTF-16LE", 'ConfigUI"',0
align 8
aEndFunctionGet_0:
text "UTF-16LE", 'End function "GetDefa'
text "UTF-16LE", 'ultConfig"',0
aBeginFunctionG_0:
text "UTF-16LE", 'Begin function "GetDe'
text "UTF-16LE", 'faultConfig"',0
aEndFunctionGet_1:
text "UTF-16LE", 'End function "GetDriv'
text "UTF-16LE", 'erInfo"',0
align 4
aBeginFunctionG_1:
text "UTF-16LE", 'Begin function "GetDr'
text "UTF-16LE", 'iverInfo"',0
align 4
aEndFunctionGet_2:
text "UTF-16LE", 'End function "GetDriv'
text "UTF-16LE", 'erProperties"',0
align 10h
aBeginFunctionG_2:
text "UTF-16LE", 'Begin function "GetDr'
text "UTF-16LE", 'iverProperties"',0
align 10h
aEndFunctionGet_3:
text "UTF-16LE", 'End function "GetDriv'
text "UTF-16LE", 'erProperties2"',0
aBeginFunctionG_3:
text "UTF-16LE", 'Begin function "GetDr'
text "UTF-16LE", 'iverProperties2"',0
align 8
aEndFunctionSet:
text "UTF-16LE", 'End function "SetDriv'
text "UTF-16LE", 'erProperties2"',0
aBeginFunctionS_0:
text "UTF-16LE", 'Begin function "SetDr'
text "UTF-16LE", 'iverProperties2"',0
aEndFunctionSet_0:
text "UTF-16LE", 'End function "SetSSAD'
text "UTF-16LE", 'ata"',0
aBeginFunctionS_1:
text "UTF-16LE", 'Begin function "SetSS'
text "UTF-16LE", 'AData"',0
aEndFunctionGet_4:
text "UTF-16LE", 'End function "GetSSAD'
text "UTF-16LE", 'ata"',0
aBeginFunctionG_4:
text "UTF-16LE", 'Begin function "GetSS'
text "UTF-16LE", 'AData"',0
aEndFunctionSca:
text "UTF-16LE", 'End function "SCAEnab'
text "UTF-16LE", 'leECU"',0
aBeginFunctionS_2:
text "UTF-16LE", 'Begin function "SCAEn'
text "UTF-16LE", 'ableECU"',0
aEndFunctionGet_5:
text "UTF-16LE", 'End function "GetSale'
text "UTF-16LE", 'sOrganization"',0
aBeginFunctionG_5:
text "UTF-16LE", 'Begin function "GetSa'
text "UTF-16LE", 'lesOrganization"',0
align 10h
aEndFunctionChe:
text "UTF-16LE", 'End function "CheckSe'
text "UTF-16LE", 'curityAccessPermissio'
text "UTF-16LE", 'ns"',0
align 10h
aBeginFunctionC:
text "UTF-16LE", 'Begin function "Check'
text "UTF-16LE", 'SecurityAccessPermiss'
text "UTF-16LE", 'ions"',0
aCouldNotInitia:
text "UTF-16LE", 'Could not initialize '
text "UTF-16LE", 'pointers',0
aScan100deviceC:
text "UTF-16LE", '.\Scan100Device.cpp',0
align 8
aFunctionPointe:
text "UTF-16LE", 'Function pointers are'
text "UTF-16LE", ' initialized',0
; const CHAR aScan100ScaResp[]
aScan100ScaResp db 'Scan100_SCA_Response',0
align 4
; const CHAR aScan100ScaRequ[]
aScan100ScaRequ db 'Scan100_SCA_Request',0
; const CHAR aScan100SkaRepo[]
aScan100SkaRepo db 'Scan100_SKA_Reponse',0
; const CHAR aScan100SkaRequ[]
aScan100SkaRequ db 'Scan100_SKA_Request',0
; const CHAR aScan100GetLast[]
aScan100GetLast db 'Scan100_Get_Last_Error',0
align 4
; const CHAR aScan100GetVers[]
aScan100GetVers db 'Scan100_Get_Version',0
; const CHAR aScan100Closepo[]
aScan100Closepo db 'Scan100_ClosePort',0
align 10h
; const CHAR ProcName[]
ProcName db 'Scan100_OpenPort',0
align 8
; const wchar_t aScan100ErrorXU
aScan100ErrorXU:
text "UTF-16LE", 'Scan-100 Error: <%x -'
text "UTF-16LE", ' Unknown Error>',0
align 8
; const wchar_t aScan100ErrorSX_1
aScan100ErrorSX_1:
text "UTF-16LE", 'Scan-100 Error: %s <%'
text "UTF-16LE", 'x - Unknown Error>',0
aScan100ErrorXS:
text "UTF-16LE", 'Scan-100 Error: <%x -'
text "UTF-16LE", ' %s>',0
; const wchar_t aScan100ErrorSX_0
aScan100ErrorSX_0:
text "UTF-16LE", 'Scan-100 Error: %s <%'
text "UTF-16LE", 'x - %s>',0
align 4
; const wchar_t aScan100ErrorSX
aScan100ErrorSX:
text "UTF-16LE", 'Scan-100 Error: <%s ('
text "UTF-16LE", '%x)>',0
; const wchar_t Format
Format:
text "UTF-16LE", 'Scan-100 Error: %s <%'
text "UTF-16LE", 's (%x)>',0
align 4
aFunctionCallFa:
text "UTF-16LE", 'Function call failed',0
align 4
aCouldNotOpenPo:
text "UTF-16LE", 'Could not open port',0
aOpenPortFuncti:
text "UTF-16LE", 'Open port function fa'
text "UTF-16LE", 'iled',0
aPortWasSuccess:
text "UTF-16LE", 'Port was successfully'
text "UTF-16LE", ' opened',0
align 4
aTryToOpenPort:
text "UTF-16LE", 'Try to open port',0
align 10h
aClosePort:
text "UTF-16LE", 'Close Port',0
align 4
aInvalidInputPo:
text "UTF-16LE", 'Invalid input pointer'
text "UTF-16LE", 0
aSkarequest:
text "UTF-16LE", 'SKARequest',0
align 4
aSkaRequest:
text "UTF-16LE", 'SKA Request',0
aSkaresponse:
text "UTF-16LE", 'SKAResponse',0
aScarequest:
text "UTF-16LE", 'SCARequest',0
align 4
aScaresponse:
text "UTF-16LE", 'SCAResponse',0
aTestconnection:
text "UTF-16LE", 'TestConnection - Open'
text "UTF-16LE", 'Port',0
; const wchar_t aCouldNotLoadLi
aCouldNotLoadLi:
text "UTF-16LE", 'Could not load librar'
text "UTF-16LE", 'y: ',0
align 4
; const wchar_t aLibraryLoaded
aLibraryLoaded:
text "UTF-16LE", 'Library loaded: ',0
align 4
aCouldNotGetVer:
text "UTF-16LE", 'Could not get version'
text "UTF-16LE", 0
; const wchar_t aUnknown
aUnknown:
text "UTF-16LE", 'Unknown',0
aCouldNotGetDat:
text "UTF-16LE", 'Could not get date',0
align 4
; const wchar_t aDate
aDate:
text "UTF-16LE", 'Date:',0
; const wchar_t aVersion
aVersion:
text "UTF-16LE", 'Version:',0
align 4
dd offset unk_10016974
off_100144C0 dd offset loc_10003AF5
dd offset loc_10003B31
dd offset loc_10003B31
dd offset sub_10003AA5
dd offset sub_10003A0A
dd offset unk_10016960
off_100144D8 dd offset sub_10003AE1
dd offset sub_10003B09
dd offset sub_10003B09
dd offset sub_10003A12
dd offset sub_10003A48
dd offset sub_10003A50
dd offset unk_1001694C
off_100144F4 dd offset loc_10003B3B
dd offset loc_10003AFF
dd offset loc_10003AFF
dd offset sub_10003C0D
dd offset unk_10016938
off_10014508 dd offset loc_10003B27
dd offset sub_10003B13
dd offset sub_10003B13
dd offset sub_10003A40
dd offset sub_10003A40
dd offset unk_10016924
off_10014520 dd offset loc_10003B1D
dd offset sub_10003AEB
dd offset sub_10003AEB
dd offset sub_10003B7C
dd offset sub_10003A1A
dd offset sub_10003A1A
dd offset sub_10003A29
dd offset sub_10003A31
dd offset unk_100165F4
off_10014544 dd offset sub_10003A0A
dd offset sub_10003A05
dd offset sub_10003A05
dd offset sub_10003A12
dd offset sub_10003A12
dd offset sub_10003A0A
dd offset sub_10003A12
dd offset sub_10003A12
dd offset sub_10003A12
aInputPointerIs:
text "UTF-16LE", 'Input pointer is NULL'
text "UTF-16LE", 0
aScan100implCpp:
text "UTF-16LE", '.\Scan100Impl.cpp',0
aDeviceInitiali:
text "UTF-16LE", 'Device initialized',0
align 10h
; const wchar_t aComHd
aComHd:
text "UTF-16LE", 'COM%hd',0
align 10h
dd offset unk_10016988
off_100145F4 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_1001699C
off_10014618 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_100169B0
off_10014630 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_100169C4
off_10014644 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset unk_100169D8
off_10014660 dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
dd offset __purecall
; const wchar_t aComD
aComD:
text "UTF-16LE", 'COM%d',0
; const wchar_t aTestHasBeenCom_0
aTestHasBeenCom_0:
text "UTF-16LE", 'Test has been complet'
text "UTF-16LE", 'ed. Status - FAILED ',0
align 8
; const wchar_t aTestHasBeenCom
aTestHasBeenCom:
text "UTF-16LE", 'Test has been complet'
text "UTF-16LE", 'ed. Status - OK ',0
align 8
; const wchar_t a827f7cb1A5e94d
a827f7cb1A5e94d:
text "UTF-16LE", '827F7CB1-A5E9-4DE2-B0'
text "UTF-16LE", 'E1-E571DD1D14F9',0
align 4
dd offset a827f7cb1A5e94d ; "827F7CB1-A5E9-4DE2-B0E1-E571DD1D14F9"
aNotEnoughMemor:
text "UTF-16LE", 'Not enough memory',0
align 10h
aCouldNotGetReq:
text "UTF-16LE", 'Could not get request'
text "UTF-16LE", 'ed environment variab'
text "UTF-16LE", 'le',0
align 10h
aRequestedEnvir:
text "UTF-16LE", 'Requested environment'
text "UTF-16LE", ' variable does not ex'
text "UTF-16LE", 'ist',0
align 10h
aInvalidEnviron:
text "UTF-16LE", 'Invalid environment v'
text "UTF-16LE", 'ariable name ( empty '
text "UTF-16LE", 'name )',0
align 8
aCommonIncludeH:
text "UTF-16LE", '..\..\..\..\common\in'
text "UTF-16LE", 'clude\helper\commonfu'
text "UTF-16LE", 'nc.h',0
align 4
; const wchar_t aScan100Log
aScan100Log:
text "UTF-16LE", 'scan100.log',0
; const wchar_t asc_10014940
asc_10014940:
text "UTF-16LE", '\',0
aScan100Scan100:
text "UTF-16LE", 'SCAN100 ( Scan100.DLL'
text "UTF-16LE", ' )',0
dd offset unk_100169EC
off_10014978 dd offset sub_100042A0
dd offset unknown_libname_5 ; Microsoft VisualC 2-14/net runtime
dd offset unk_10016A38
off_10014984 dd offset sub_100042E9
dd offset unknown_libname_5 ; Microsoft VisualC 2-14/net runtime
dd offset unk_10016A88
off_10014990 dd offset sub_10004338
dd offset unknown_libname_5 ; Microsoft VisualC 2-14/net runtime
; const char aStringTooLong[]
aStringTooLong db 'string too long',0
; const char aInvalidStringP[]
aInvalidStringP db 'invalid string position',0
dd offset unk_10016AD8
off_100149C4 dd offset sub_10004938
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
aUnknownExcepti db 'Unknown exception',0
align 10h
dd offset unk_10016AEC
off_100149E4 dd offset sub_10004E68
unk_100149E8 db  63h ; c
db  73h ; s
db  6Dh ; m
db 0E0h
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db  20h
db    5
db  93h
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_10014A08 dd 0
off_10014A0C dd offset ___DestructExceptionObject
dd offset unk_10016B34
off_10014A14 dd offset sub_100076B8
dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
; const char aBadException[]
aBadException db 'bad exception',0
align 4
; const CHAR aEncodepointer[]
aEncodepointer db 'EncodePointer',0
align 4
; const WCHAR ModuleName
ModuleName:
text "UTF-16LE", 'KERNEL32.DLL',0
align 4
; const CHAR aDecodepointer[]
aDecodepointer db 'DecodePointer',0
align 4
; const CHAR aFlsfree[]
aFlsfree db 'FlsFree',0
; const CHAR aFlssetvalue[]
aFlssetvalue db 'FlsSetValue',0
; const CHAR aFlsgetvalue[]
aFlsgetvalue db 'FlsGetValue',0
; const CHAR aFlsalloc[]
aFlsalloc db 'FlsAlloc',0
align 4
; const struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo _EXCEPTION_POINTERS <offset dword_1001AB80,\
                     offset dword_1001ABD8>
aRuntimeError db 'runtime error ',0
align 4
asc_10014AAC db 0Dh,0Ah,0
align 10h
aTlossError db 'TLOSS error',0Dh,0Ah,0
align 10h
aSingError db 'SING error',0Dh,0Ah,0
align 10h
aDomainError db 'DOMAIN error',0Dh,0Ah,0
align 10h
aR6034AnApplica db 'R6034',0Dh,0Ah
db 'An application has made an attempt '
db 'to load the C runtime library incor'
db 'rectly.',0Ah
db 'Please contact the application',27h
db 's support team for more information'
db '.',0Dh,0Ah,0
align 10h
aR6033AttemptTo db 'R6033',0Dh,0Ah
db '- Attempt to use MSIL code from thi'
db 's assembly during native code initi'
db 'alization',0Ah
db 'This indicates a bug in your applic'
db 'ation. It is most likely the result'
db ' of calling an MSIL-compiled (/clr)'
db ' function from a native constructor'
db ' or from DllMain.',0Dh,0Ah,0
align 4
aR6032NotEnough db 'R6032',0Dh,0Ah
db '- not enough space for locale infor'
db 'mation',0Dh,0Ah,0
align 10h
aR6031AttemptTo db 'R6031',0Dh,0Ah
db '- Attempt to initialize the CRT mor'
db 'e than once.',0Ah
db 'This indicates a bug in your applic'
db 'ation.',0Dh,0Ah,0
align 4
aR6030CrtNotIni db 'R6030',0Dh,0Ah
db '- CRT not initialized',0Dh,0Ah,0
align 4
aR6028UnableToI db 'R6028',0Dh,0Ah
db '- unable to initialize heap',0Dh,0Ah
db 0
align 4
aR6027NotEnough db 'R6027',0Dh,0Ah
db '- not enough space for lowio initia'
db 'lization',0Dh,0Ah,0
align 4
aR6026NotEnough db 'R6026',0Dh,0Ah
db '- not enough space for stdio initia'
db 'lization',0Dh,0Ah,0
align 4
aR6025PureVirtu db 'R6025',0Dh,0Ah
db '- pure virtual function call',0Dh,0Ah
db 0
align 4
aR6024NotEnough db 'R6024',0Dh,0Ah
db '- not enough space for _onexit/atex'
db 'it table',0Dh,0Ah,0
align 4
aR6019UnableToO db 'R6019',0Dh,0Ah
db '- unable to open console device',0Dh
db 0Ah,0
align 4
aR6018Unexpecte db 'R6018',0Dh,0Ah
db '- unexpected heap error',0Dh,0Ah,0
align 4
aR6017Unexpecte db 'R6017',0Dh,0Ah
db '- unexpected multithread lock error'
db 0Dh,0Ah,0
align 4
aR6016NotEnough db 'R6016',0Dh,0Ah
db '- not enough space for thread data',0Dh
db 0Ah,0
aThisApplicatio db 0Dh,0Ah
db 'This application has requested the '
db 'Runtime to terminate it in an unusu'
db 'al way.',0Ah
db 'Please contact the application',27h
db 's support team for more information'
db '.',0Dh,0Ah,0
align 10h
aR6009NotEnough db 'R6009',0Dh,0Ah
db '- not enough space for environment',0Dh
db 0Ah,0
aR6008NotEnough db 'R6008',0Dh,0Ah
db '- not enough space for arguments',0Dh
db 0Ah,0
align 4
aR6002FloatingP db 'R6002',0Dh,0Ah
db '- floating point support not loaded'
db 0Dh,0Ah,0
align 4
aMicrosoftVisua db 'Microsoft Visual C++ Runtime Librar'
db 'y',0
align 10h
; const char asc_10015020[]
asc_10015020 db 0Ah
db 0Ah,0
align 4
; const char asc_10015024[]
asc_10015024 db '...',0
; const char aProgramNameUnk[]
aProgramNameUnk db '<program name unknown>',0
align 10h
; const char Source[]
Source db 'Runtime Error!',0Ah
db 0Ah
db 'Program: ',0
align 4
; const CHAR aCorexitprocess[]
aCorexitprocess db 'CorExitProcess',0
align 4
; const WCHAR aMscoreeDll
aMscoreeDll:
text "UTF-16LE", 'mscoree.dll',0
align 8
unk_10015088 db    5
db    0
db    0
db 0C0h
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Dh
db    0
db    0
db 0C0h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  96h
db    0
db    0
db 0C0h
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Dh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Eh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Fh
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  91h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  92h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  93h
db    0
db    0
db 0C0h
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db    0
byte_10015180 db 3Dh
db    0
unk_10015182 db    0
db    0
aNull_0:
text "UTF-16LE", '(null)',0
align 4
aNull db '(null)',0
align 10h
byte_100151A0 db 6
db    0
db    0
db    6
db    0
db    1
db    0
db    0
db  10h
db    0
db    3
db    6
db    0
db    6
db    2
db  10h
db    4
db  45h ; E
db  45h ; E
db  45h ; E
db    5
db    5
db    5
db    5
db    5
db  35h ; 5
db  30h ; 0
db    0
db  50h ; P
db    0
db    0
db    0
db    0
db  28h ; (
db  20h
db  38h ; 8
db  50h ; P
db  58h ; X
db    7
db    8
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  57h ; W
db  50h ; P
db    7
db    0
db    0
db  20h
db  20h
db    8
db    0
db    0
db    0
db    0
db    8
db  60h ; `
db  68h ; h
db  60h ; `
db  60h ; `
db  60h ; `
db  60h ; `
db    0
byte_100151E0 db 0
aXpxxxx db 'xpxxxx',8,7,8,0
align 4
db 7,0
db 8,8,8,0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_10015200 db 6
db  80h
db  80h
db  86h
db  80h
db  81h
db  80h
db    0
db    0
db  10h
db    3
db  86h
db  80h
db  86h
db  82h
db  80h
db  14h
db    5
db    5
db  45h ; E
db  45h ; E
db  45h ; E
db  85h
db  85h
db  85h
db    5
db    0
db    0
db  30h ; 0
db  30h ; 0
db  80h
db  50h ; P
db  80h
db  88h
db    0
db    8
db    0
db  28h ; (
db  27h ; '
db  38h ; 8
db  50h ; P
db  57h ; W
db  80h
db    0
db    7
db    0
db  37h ; 7
db  30h ; 0
db  30h ; 0
db  50h ; P
db  50h ; P
db  88h
db    0
db    0
db    0
db  20h
db  28h ; (
db  80h
db  88h
db  80h
db  80h
db    0
db    0
db    0
db  60h ; `
db  68h ; h
db  60h ; `
db  68h ; h
db  68h ; h
db  68h ; h
db    8
db    8
db    7
db  78h ; x
db  70h ; p
db  70h ; p
db  77h ; w
db  70h ; p
db  70h ; p
db    8
db    8
db    0
db    0
db    8
db    0
db    8
db    0
db    7
db    8
db    0
db    0
db    0
aCompleteObject db ' Complete Object Locator',27h,0
db    0
db    0
aClassHierarchy db ' Class Hierarchy Descriptor',27h,0
db    0
db    0
db    0
aBaseClassArray db ' Base Class Array',27h,0
db    0
aBaseClassDescr db ' Base Class Descriptor at (',0
aTypeDescriptor db ' Type Descriptor',27h,0
db    0
db    0
aLocalStaticThr db '`local static thread guard',27h,0
aManagedVectorC_0 db '`managed vector copy constructor it'
db 'erator',27h,0
db    0
aVectorVbaseCop db '`vector vbase copy constructor iter'
db 'ator',27h,0
db    0
db    0
db    0
aVectorCopyCons db '`vector copy constructor iterator',27h
db 0
db    0
aDynamicAtexitD db '`dynamic atexit destructor for ',27h
db 0
db    0
db    0
db    0
aDynamicInitial db '`dynamic initializer for ',27h,0
db    0
aEhVectorVbaseC_0 db '`eh vector vbase copy constructor i'
db 'terator',27h,0
aEhVectorCopyCo db '`eh vector copy constructor iterato'
db 'r',27h,0
db    0
db    0
aManagedVectorD db '`managed vector destructor iterator'
db 27h,0
db    0
db    0
db    0
aManagedVectorC db '`managed vector constructor iterato'
db 'r',27h,0
db    0
db    0
aPlacementDelet_0 db '`placement delete[] closure',27h,0
db    0
db    0
db    0
aPlacementDelet db '`placement delete closure',27h,0
db    0
aOmniCallsig db '`omni callsig',27h,0
db    0
aDelete_0 db ' delete[]',0
db    0
db    0
aNew_0 db ' new[]',0
db    0
aLocalVftableCo db '`local vftable constructor closure',27h
db 0
aLocalVftable db '`local vftable',27h,0
aRtti db '`RTTI',0
db    0
db    0
unk_100154F4 db  60h ; `
db  45h ; E
db  48h ; H
db    0
aUdtReturning db '`udt returning',27h,0
aCopyConstructo db '`copy constructor closure',27h,0
db    0
aEhVectorVbaseC db '`eh vector vbase constructor iterat'
db 'or',27h,0
db    0
aEhVectorDestru db '`eh vector destructor iterator',27h
db 0
aEhVectorConstr db '`eh vector constructor iterator',27h
db 0
db    0
db    0
db    0
aVirtualDisplac db '`virtual displacement map',27h,0
db    0
aVectorVbaseCon db '`vector vbase constructor iterator',27h
db 0
aVectorDestruct db '`vector destructor iterator',27h,0
db    0
db    0
db    0
aVectorConstruc db '`vector constructor iterator',27h,0
db    0
db    0
aScalarDeleting db '`scalar deleting destructor',27h,0
db    0
db    0
db    0
aDefaultConstru db '`default constructor closure',27h,0
db    0
db    0
aVectorDeleting db '`vector deleting destructor',27h,0
db    0
db    0
db    0
aVbaseDestructo db '`vbase destructor',27h,0
db    0
aString db '`string',27h,0
db    0
db    0
db    0
aLocalStaticGua db '`local static guard',27h,0
db    0
db    0
db    0
aTypeof db '`typeof',27h,0
db    0
db    0
db    0
aVcall db '`vcall',27h,0
aVbtable db '`vbtable',27h,0
db    0
db    0
aVftable db '`vftable',27h,0
db    0
db    0
unk_100156D4 db  5Eh ; ^
db  3Dh ; =
db    0
db    0
unk_100156D8 db  7Ch ; |
db  3Dh ; =
db    0
db    0
unk_100156DC db  26h ; &
db  3Dh ; =
db    0
db    0
unk_100156E0 db  3Ch ; <
db  3Ch ; <
db  3Dh ; =
db    0
unk_100156E4 db  3Eh ; >
db  3Eh ; >
db  3Dh ; =
db    0
unk_100156E8 db  25h ; %
db  3Dh ; =
db    0
db    0
unk_100156EC db  2Fh ; /
db  3Dh ; =
db    0
db    0
unk_100156F0 db  2Dh ; -
db  3Dh ; =
db    0
db    0
unk_100156F4 db  2Bh ; +
db  3Dh ; =
db    0
db    0
unk_100156F8 db  2Ah ; *
db  3Dh ; =
db    0
db    0
unk_100156FC db  7Ch ; |
db  7Ch ; |
db    0
db    0
unk_10015700 db  26h ; &
db  26h ; &
db    0
db    0
unk_10015704 db  7Ch ; |
db    0
db    0
db    0
unk_10015708 db  5Eh ; ^
db    0
db    0
db    0
unk_1001570C db  7Eh ; ~
db    0
db    0
db    0
unk_10015710 db  28h ; (
db  29h ; )
db    0
db    0
unk_10015714 db  2Ch ; ,
db    0
db    0
db    0
unk_10015718 db  3Eh ; >
db  3Dh ; =
db    0
db    0
unk_1001571C db  3Eh ; >
db    0
db    0
db    0
unk_10015720 db  3Ch ; <
db  3Dh ; =
db    0
db    0
unk_10015724 db  3Ch ; <
db    0
db    0
db    0
unk_10015728 db  25h ; %
db    0
db    0
db    0
unk_1001572C db  2Fh ; /
db    0
db    0
db    0
unk_10015730 db  2Dh ; -
db  3Eh ; >
db  2Ah ; *
db    0
unk_10015734 db  26h ; &
db    0
db    0
db    0
unk_10015738 db  2Bh ; +
db    0
db    0
db    0
unk_1001573C db  2Dh ; -
db    0
db    0
db    0
unk_10015740 db  2Dh ; -
db  2Dh ; -
db    0
db    0
unk_10015744 db  2Bh ; +
db  2Bh ; +
db    0
db    0
unk_10015748 db  2Ah ; *
db    0
db    0
db    0
unk_1001574C db  2Dh ; -
db  3Eh ; >
db    0
db    0
aOperator db 'operator',0
db    0
db    0
db    0
unk_1001575C db  5Bh ; [
db  5Dh ; ]
db    0
db    0
unk_10015760 db  21h ; !
db  3Dh ; =
db    0
db    0
unk_10015764 db  3Dh ; =
db  3Dh ; =
db    0
db    0
unk_10015768 db  21h ; !
db    0
db    0
db    0
unk_1001576C db  3Ch ; <
db  3Ch ; <
db    0
db    0
unk_10015770 db  3Eh ; >
db  3Eh ; >
db    0
db    0
aDelete db ' delete',0
aNew db ' new',0
db    0
db    0
db    0
aUnaligned db '__unaligned',0
aRestrict db '__restrict',0
db    0
aPtr64 db '__ptr64',0
aClrcall db '__clrcall',0
db    0
db    0
aFastcall db '__fastcall',0
db    0
aThiscall db '__thiscall',0
db    0
aStdcall db '__stdcall',0
db    0
db    0
aPascal db '__pascal',0
db    0
db    0
db    0
aCdecl db '__cdecl',0
aBased db '__based(',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset aBased        ; "__based("
dd offset aCdecl        ; "__cdecl"
dd offset aPascal       ; "__pascal"
dd offset aStdcall      ; "__stdcall"
dd offset aThiscall     ; "__thiscall"
dd offset aFastcall     ; "__fastcall"
dd offset aClrcall      ; "__clrcall"
dd offset aPtr64        ; "__ptr64"
dd offset aRestrict     ; "__restrict"
dd offset aUnaligned    ; "__unaligned"
dd offset unk_10015182
dd offset aTypeDescriptor ; " Type Descriptor'"
dd offset aBaseClassDescr ; " Base Class Descriptor at ("
dd offset aBaseClassArray ; " Base Class Array'"
dd offset aClassHierarchy ; " Class Hierarchy Descriptor'"
dd offset aCompleteObject ; " Complete Object Locator'"
dd offset aNew          ; " new"
dd offset aDelete       ; " delete"
dd offset byte_10015180
dd offset unk_10015770
dd offset unk_1001576C
dd offset unk_10015768
dd offset unk_10015764
dd offset unk_10015760
dd offset unk_1001575C
dd offset aOperator     ; "operator"
dd offset unk_1001574C
dd offset unk_10015748
dd offset unk_10015744
dd offset unk_10015740
dd offset unk_1001573C
dd offset unk_10015738
dd offset unk_10015734
dd offset unk_10015730
dd offset unk_1001572C
dd offset unk_10015728
dd offset unk_10015724
dd offset unk_10015720
dd offset unk_1001571C
dd offset unk_10015718
dd offset unk_10015714
dd offset unk_10015710
dd offset unk_1001570C
dd offset unk_10015708
dd offset unk_10015704
dd offset unk_10015700
dd offset unk_100156FC
dd offset unk_100156F8
dd offset unk_100156F4
dd offset unk_100156F0
dd offset unk_100156EC
dd offset unk_100156E8
dd offset unk_100156E4
dd offset unk_100156E0
dd offset unk_100156DC
dd offset unk_100156D8
dd offset unk_100156D4
dd offset aVftable      ; "`vftable'"
dd offset aVbtable      ; "`vbtable'"
dd offset aVcall        ; "`vcall'"
dd offset aTypeof       ; "`typeof'"
dd offset aLocalStaticGua ; "`local static guard'"
dd offset aString       ; "`string'"
dd offset aVbaseDestructo ; "`vbase destructor'"
dd offset aVectorDeleting ; "`vector deleting destructor'"
dd offset aDefaultConstru ; "`default constructor closure'"
dd offset aScalarDeleting ; "`scalar deleting destructor'"
dd offset aVectorConstruc ; "`vector constructor iterator'"
dd offset aVectorDestruct ; "`vector destructor iterator'"
dd offset aVectorVbaseCon ; "`vector vbase constructor iterator'"
dd offset aVirtualDisplac ; "`virtual displacement map'"
dd offset aEhVectorConstr ; "`eh vector constructor iterator'"
dd offset aEhVectorDestru ; "`eh vector destructor iterator'"
dd offset aEhVectorVbaseC ; "`eh vector vbase constructor iterator'"
dd offset aCopyConstructo ; "`copy constructor closure'"
dd offset aUdtReturning ; "`udt returning'"
dd offset unk_100154F4
dd offset aRtti         ; "`RTTI"
dd offset aLocalVftable ; "`local vftable'"
dd offset aLocalVftableCo ; "`local vftable constructor closure'"
dd offset aNew_0        ; " new[]"
dd offset aDelete_0     ; " delete[]"
dd offset aOmniCallsig  ; "`omni callsig'"
dd offset aPlacementDelet ; "`placement delete closure'"
dd offset aPlacementDelet_0 ; "`placement delete[] closure'"
dd offset aManagedVectorC ; "`managed vector constructor iterator'"
dd offset aManagedVectorD ; "`managed vector destructor iterator'"
dd offset aEhVectorCopyCo ; "`eh vector copy constructor iterator'"
dd offset aEhVectorVbaseC_0 ; "`eh vector vbase copy constructor itera"...
dd offset aDynamicInitial ; "`dynamic initializer for '"
dd offset aDynamicAtexitD ; "`dynamic atexit destructor for '"
dd offset aVectorCopyCons ; "`vector copy constructor iterator'"
dd offset aVectorVbaseCop ; "`vector vbase copy constructor iterator"...
dd offset aManagedVectorC_0 ; "`managed vector copy constructor iterat"...
dd offset aLocalStaticThr ; "`local static thread guard'"
dd offset unk_10015182
; const CHAR aGetprocesswind[]
aGetprocesswind db 'GetProcessWindowStation',0
; const CHAR aGetuserobjecti[]
aGetuserobjecti db 'GetUserObjectInformationA',0
align 4
; const CHAR aGetlastactivep[]
aGetlastactivep db 'GetLastActivePopup',0
align 10h
; const CHAR aGetactivewindo[]
aGetactivewindo db 'GetActiveWindow',0
; const CHAR aMessageboxa[]
aMessageboxa db 'MessageBoxA',0
; const CHAR LibFileName[]
LibFileName db 'USER32.DLL',0
align 4
; const WCHAR SrcStr
SrcStr dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
asc_10015AF0:
text "UTF-16LE", '         (((((       '
text "UTF-16LE", '           H'
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db  81h
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db  82h
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db    2
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10015CF2 db  20h
db    0
aHH:
text "UTF-16LE", '        h((((        '
text "UTF-16LE", '          H'
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  84h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db  81h
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db  82h
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  20h
db    0
db  48h ; H
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  14h
db    0
db  14h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  14h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db  10h
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db  10h
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db  10h
db    0
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    2
db    1
db    1
db    1
db    0
db    0
db    0
db    0
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
unk_10015F78 db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
unk_100160F8 db    0
db    1
db    2
db    3
db    4
db    5
db    6
db    7
db    8
db    9
db  0Ah
db  0Bh
db  0Ch
db  0Dh
db  0Eh
db  0Fh
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  18h
db  19h
db  1Ah
db  1Bh
db  1Ch
db  1Dh
db  1Eh
db  1Fh
db  20h
db  21h ; !
db  22h ; "
db  23h ; #
db  24h ; $
db  25h ; %
db  26h ; &
db  27h ; '
db  28h ; (
db  29h ; )
db  2Ah ; *
db  2Bh ; +
db  2Ch ; ,
db  2Dh ; -
db  2Eh ; .
db  2Fh ; /
db  30h ; 0
db  31h ; 1
db  32h ; 2
db  33h ; 3
db  34h ; 4
db  35h ; 5
db  36h ; 6
db  37h ; 7
db  38h ; 8
db  39h ; 9
db  3Ah ; :
db  3Bh ; ;
db  3Ch ; <
db  3Dh ; =
db  3Eh ; >
db  3Fh ; ?
db  40h ; @
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  5Bh ; [
db  5Ch ; \
db  5Dh ; ]
db  5Eh ; ^
db  5Fh ; _
db  60h ; `
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db  7Bh ; {
db  7Ch ; |
db  7Dh ; }
db  7Eh ; ~
db  7Fh ; 
db  80h
db  81h
db  82h
db  83h
db  84h
db  85h
db  86h
db  87h
db  88h
db  89h
db  8Ah
db  8Bh
db  8Ch
db  8Dh
db  8Eh
db  8Fh
db  90h
db  91h
db  92h
db  93h
db  94h
db  95h
db  96h
db  97h
db  98h
db  99h
db  9Ah
db  9Bh
db  9Ch
db  9Dh
db  9Eh
db  9Fh
db 0A0h
db 0A1h
db 0A2h
db 0A3h
db 0A4h
db 0A5h
db 0A6h
db 0A7h
db 0A8h
db 0A9h
db 0AAh
db 0ABh
db 0ACh
db 0ADh
db 0AEh
db 0AFh
db 0B0h
db 0B1h
db 0B2h
db 0B3h
db 0B4h
db 0B5h
db 0B6h
db 0B7h
db 0B8h
db 0B9h
db 0BAh
db 0BBh
db 0BCh
db 0BDh
db 0BEh
db 0BFh
db 0C0h
db 0C1h
db 0C2h
db 0C3h
db 0C4h
db 0C5h
db 0C6h
db 0C7h
db 0C8h
db 0C9h
db 0CAh
db 0CBh
db 0CCh
db 0CDh
db 0CEh
db 0CFh
db 0D0h
db 0D1h
db 0D2h
db 0D3h
db 0D4h
db 0D5h
db 0D6h
db 0D7h
db 0D8h
db 0D9h
db 0DAh
db 0DBh
db 0DCh
db 0DDh
db 0DEh
db 0DFh
db 0E0h
db 0E1h
db 0E2h
db 0E3h
db 0E4h
db 0E5h
db 0E6h
db 0E7h
db 0E8h
db 0E9h
db 0EAh
db 0EBh
db 0ECh
db 0EDh
db 0EEh
db 0EFh
db 0F0h
db 0F1h
db 0F2h
db 0F3h
db 0F4h
db 0F5h
db 0F6h
db 0F7h
db 0F8h
db 0F9h
db 0FAh
db 0FBh
db 0FCh
db 0FDh
db 0FEh
db 0FFh
aHhMmSs db 'HH:mm:ss',0
db    0
db    0
db    0
aDdddMmmmDdYyyy db 'dddd, MMMM dd, yyyy',0
aMmDdYy db 'MM/dd/yy',0
db    0
db    0
db    0
unk_10016224 db  50h ; P
db  4Dh ; M
db    0
db    0
unk_10016228 db  41h ; A
db  4Dh ; M
db    0
db    0
aDecember db 'December',0
db    0
db    0
db    0
aNovember db 'November',0
db    0
db    0
db    0
aOctober db 'October',0
aSeptember db 'September',0
db    0
db    0
aAugust db 'August',0
db    0
aJuly db 'July',0
db    0
db    0
db    0
aJune db 'June',0
db    0
db    0
db    0
aApril db 'April',0
db    0
db    0
aMarch db 'March',0
db    0
db    0
aFebruary db 'February',0
db    0
db    0
db    0
aJanuary db 'January',0
unk_10016294 db  44h ; D
db  65h ; e
db  63h ; c
db    0
unk_10016298 db  4Eh ; N
db  6Fh ; o
db  76h ; v
db    0
unk_1001629C db  4Fh ; O
db  63h ; c
db  74h ; t
db    0
unk_100162A0 db  53h ; S
db  65h ; e
db  70h ; p
db    0
unk_100162A4 db  41h ; A
db  75h ; u
db  67h ; g
db    0
unk_100162A8 db  4Ah ; J
db  75h ; u
db  6Ch ; l
db    0
unk_100162AC db  4Ah ; J
db  75h ; u
db  6Eh ; n
db    0
unk_100162B0 db  4Dh ; M
db  61h ; a
db  79h ; y
db    0
unk_100162B4 db  41h ; A
db  70h ; p
db  72h ; r
db    0
unk_100162B8 db  4Dh ; M
db  61h ; a
db  72h ; r
db    0
unk_100162BC db  46h ; F
db  65h ; e
db  62h ; b
db    0
unk_100162C0 db  4Ah ; J
db  61h ; a
db  6Eh ; n
db    0
aSaturday db 'Saturday',0
db    0
db    0
db    0
aFriday db 'Friday',0
db    0
aThursday db 'Thursday',0
db    0
db    0
db    0
aWednesday db 'Wednesday',0
db    0
db    0
aTuesday db 'Tuesday',0
aMonday db 'Monday',0
db    0
aSunday db 'Sunday',0
db    0
unk_10016308 db  53h ; S
db  61h ; a
db  74h ; t
db    0
unk_1001630C db  46h ; F
db  72h ; r
db  69h ; i
db    0
unk_10016310 db  54h ; T
db  68h ; h
db  75h ; u
db    0
unk_10016314 db  57h ; W
db  65h ; e
db  64h ; d
db    0
unk_10016318 db  54h ; T
db  75h ; u
db  65h ; e
db    0
unk_1001631C db  4Dh ; M
db  6Fh ; o
db  6Eh ; n
db    0
unk_10016320 db  53h ; S
db  75h ; u
db  6Eh ; n
db    0
; const CHAR FileName[]
FileName db 'CONOUT$',0
aSunmontuewedth db 'SunMonTueWedThuFriSat',0
align 4
aJanfebmaraprma db 'JanFebMarAprMayJunJulAugSepOctNovDe'
db 'c',0
align 10h
__load_config_used dd 48h ; Size
dd 0                    ; Time stamp
dw 2 dup(0)             ; Version: 0.0
dd 0                    ; GlobalFlagsClear
dd 0                    ; GlobalFlagsSet
dd 0                    ; CriticalSectionDefaultTimeout
dd 0                    ; DeCommitFreeBlockThreshold
dd 0                    ; DeCommitTotalFreeThreshold
dd 0                    ; LockPrefixTable
dd 0                    ; MaximumAllocationSize
dd 0                    ; VirtualMemoryThreshold
dd 0                    ; ProcessHeapFlags
dd 0                    ; ProcessAffinityMask
dw 0                    ; CSDVersion
dw 0                    ; Reserved1
dd 0                    ; EditList
dd offset ___security_cookie ; SecurityCookie
dd offset ___safe_se_handler_table ; SEHandlerTable
dd 2Fh                  ; SEHandlerCount
unk_100163B8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019004
dd offset unk_100163CC
unk_100163CC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_100163DC
off_100163DC dd offset off_100163E8
dd offset off_10016404
align 8
off_100163E8 dd offset off_10019004
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100163CC
off_10016404 dd offset off_10019020
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016420
unk_10016420 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_10016430
off_10016430 dd offset off_10016404
align 8
unk_10016438 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1001903C
dd offset unk_1001644C
unk_1001644C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_1001645C
off_1001645C dd offset off_10016464
db    0
db    0
db    0
db    0
off_10016464 dd offset off_1001903C
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_1001644C
unk_10016480 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019068
dd offset unk_10016494
unk_10016494 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_100164A4
off_100164A4 dd offset off_100164B0
dd offset off_10016464
align 10h
off_100164B0 dd offset off_10019068
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016494
unk_100164CC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019098
dd offset unk_100164E0
unk_100164E0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_100164F0
off_100164F0 dd offset off_100164F8
align 8
off_100164F8 dd offset off_10019098
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100164E0
unk_10016514 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100190BC
dd offset unk_10016528
unk_10016528 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016538
off_10016538 dd offset off_10016544
dd offset off_100164F8
db    0
db    0
db    0
db    0
off_10016544 dd offset off_100190BC
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016528
unk_10016560 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100190E0
dd offset unk_10016574
unk_10016574 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016584
off_10016584 dd offset off_10016590
dd offset off_10016404
align 10h
off_10016590 dd offset off_100190E0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016574
unk_100165AC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019108
dd offset unk_100165C0
unk_100165C0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_100165D0
off_100165D0 dd offset off_100165D8
align 8
off_100165D8 dd offset off_10019108
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100165C0
unk_100165F4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019934
dd offset unk_10016608
unk_10016608 db    0
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
dd offset off_10016618
off_10016618 dd offset off_10016650
dd offset off_1001666C
dd offset off_100166D8
dd offset off_100166F4
dd offset off_10016748
dd offset off_10016764
dd offset off_100167B8
dd offset off_100167D4
dd offset off_10016828
dd offset off_10016844
dd offset off_10016898
dd offset off_100168B4
dd offset off_10016908
align 10h
off_10016650 dd offset off_10019934
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016608
off_1001666C dd offset off_10019950
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016688
unk_10016688 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016698
off_10016698 dd offset off_1001666C
dd offset off_100166A4
db    0
db    0
db    0
db    0
off_100166A4 dd offset off_10019968
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100166C0
unk_100166C0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_100166D0
off_100166D0 dd offset off_100166A4
align 8
off_100166D8 dd offset off_10019968
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_100166C0
off_100166F4 dd offset off_10019980
db    1
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016710
unk_10016710 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016720
off_10016720 dd offset off_1001672C
dd offset off_100166A4
db    0
db    0
db    0
db    0
off_1001672C dd offset off_10019980
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016710
off_10016748 dd offset off_10019968
align 10h
db    4
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_100166C0
off_10016764 dd offset off_10019998
db    1
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016780
unk_10016780 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016790
off_10016790 dd offset off_1001679C
dd offset off_100166A4
db    0
db    0
db    0
db    0
off_1001679C dd offset off_10019998
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016780
off_100167B8 dd offset off_10019968
align 10h
db    8
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_100166C0
off_100167D4 dd offset off_100199B0
db    1
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100167F0
unk_100167F0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016800
off_10016800 dd offset off_1001680C
dd offset off_100166A4
db    0
db    0
db    0
db    0
off_1001680C dd offset off_100199B0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100167F0
off_10016828 dd offset off_10019968
align 10h
db  0Ch
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_100166C0
off_10016844 dd offset off_100199CC
db    1
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016860
unk_10016860 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016870
off_10016870 dd offset off_1001687C
dd offset off_100166A4
db    0
db    0
db    0
db    0
off_1001687C dd offset off_100199CC
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016860
off_10016898 dd offset off_10019968
align 10h
db  10h
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_100166C0
off_100168B4 dd offset off_100199E0
db    1
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100168D0
unk_100168D0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_100168E0
off_100168E0 dd offset off_100168EC
dd offset off_100166A4
db    0
db    0
db    0
db    0
off_100168EC dd offset off_100199E0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_100168D0
off_10016908 dd offset off_10019968
align 10h
db  14h
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  42h ; B
db    0
db    0
db    0
dd offset unk_100166C0
unk_10016924 db    0
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019934
dd offset unk_10016608
unk_10016938 db    0
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019934
dd offset unk_10016608
unk_1001694C db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019934
dd offset unk_10016608
unk_10016960 db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019934
dd offset unk_10016608
unk_10016974 db    0
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019934
dd offset unk_10016608
unk_10016988 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019980
dd offset unk_10016710
unk_1001699C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019998
dd offset unk_10016780
unk_100169B0 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100199B0
dd offset unk_100167F0
unk_100169C4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100199CC
dd offset unk_10016860
unk_100169D8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_100199E0
dd offset unk_100168D0
unk_100169EC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019A18
dd offset unk_10016A00
unk_10016A00 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016A10
off_10016A10 dd offset off_10016A1C
dd offset off_10016404
db    0
db    0
db    0
db    0
off_10016A1C dd offset off_10019A18
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016A00
unk_10016A38 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019A38
dd offset unk_10016A4C
unk_10016A4C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_10016A5C
off_10016A5C dd offset off_10016A6C
dd offset off_10016A1C
dd offset off_10016404
db    0
db    0
db    0
db    0
off_10016A6C dd offset off_10019A38
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016A4C
unk_10016A88 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019A58
dd offset unk_10016A9C
unk_10016A9C db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
dd offset off_10016AAC
off_10016AAC dd offset off_10016ABC
dd offset off_10016A1C
dd offset off_10016404
db    0
db    0
db    0
db    0
off_10016ABC dd offset off_10019A58
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016A9C
unk_10016AD8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019020
dd offset unk_10016420
unk_10016AEC db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019A80
dd offset unk_10016B00
unk_10016B00 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
dd offset off_10016B10
off_10016B10 dd offset off_10016B18
align 8
off_10016B18 dd offset off_10019A80
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016B00
unk_10016B34 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_10019C34
dd offset unk_10016B48
unk_10016B48 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
dd offset off_10016B58
off_10016B58 dd offset off_10016B64
dd offset off_10016404
db    0
db    0
db    0
db    0
off_10016B64 dd offset off_10019C34
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h ; @
db    0
db    0
db    0
dd offset unk_10016B48
___safe_se_handler_table dd rva ?CatchGuardHandler@@YA?AW4_EXCEPTION_DISPOSITION@@PAUEHExceptionRecord@@PAUCatchGuardRN@@PAX2@Z ; CatchGuardHandler(EHExceptionRecord *,CatchGuardRN *,void *,void *)
dd rva ?TranslatorGuardHandler@@YA?AW4_EXCEPTION_DISPOSITION@@PAUEHExceptionRecord@@PAUTranslatorGuardRN@@PAX2@Z ; TranslatorGuardHandler(EHExceptionRecord *,TranslatorGuardRN *,void *,void *)
dd rva SEH_1000EE10
dd rva __unwind_handler
dd rva __unwind_handler4
dd rva loc_1001208C
dd rva loc_100120AF
dd rva loc_100120D2
dd rva loc_100120F7
dd rva loc_10012112
dd rva loc_10012140
dd rva loc_10012178
dd rva loc_1001219B
dd rva loc_100121C9
dd rva loc_100121FD
dd rva loc_10012218
dd rva loc_10012233
dd rva loc_1001224E
dd rva loc_10012269
dd rva loc_10012284
dd rva loc_1001229F
dd rva loc_100122BA
dd rva loc_100122D5
dd rva loc_100122F0
dd rva loc_1001230B
dd rva loc_10012326
dd rva loc_10012341
dd rva loc_1001235C
dd rva loc_10012377
dd rva loc_10012392
dd rva loc_100123AD
dd rva loc_100123C8
dd rva loc_100123E3
dd rva loc_1001240E
dd rva loc_1001243E
dd rva loc_10012464
dd rva loc_100124AF
dd rva loc_100124F5
dd rva loc_10012532
dd rva loc_10012562
dd rva loc_1001259E
dd rva loc_100125DA
dd rva loc_10012615
dd rva loc_1001263A
dd rva loc_1001265D
dd rva loc_10012680
dd rva loc_1001269B
align 10h
unk_10016C40 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10016C48 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
stru_10016C50 UnwindMapEntry <-1, offset loc_10012084>
stru_10016C58 FuncInfo <19930522h, 0, 1, \
          offset stru_10016C50, 0, 0, 0,\
          0, 0, 0>
; const _ThrowInfo pThrowInfo
pThrowInfo _ThrowInfo <0, offset sub_1000104E, 0, \
            offset unk_10016C8C>
unk_10016C8C db    2
db    0
db    0
db    0
dd offset unk_10016C98
dd offset unk_10016CB4
unk_10016C98 db    0
db    0
db    0
db    0
dd offset off_10019004
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset ??0ThreadScheduler@details@Concurrency@@QAE@ABVSchedulerPolicy@2@@Z ; Concurrency::details::ThreadScheduler::ThreadScheduler(Concurrency::SchedulerPolicy const &)
unk_10016CB4 db    0
db    0
db    0
db    0
dd offset off_10019020
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
stru_10016CD0 UnwindMapEntry <-1, offset loc_100120A7>
stru_10016CD8 FuncInfo <19930522h, 0, 1, \
          offset stru_10016CD0, 0, 0, 0,\
          0, 0, 0>
stru_10016CFC UnwindMapEntry <-1, offset loc_100120CA>
stru_10016D04 FuncInfo <19930522h, 0, 1, \
          offset stru_10016CFC, 0, 0, 0,\
          0, 0, 0>
stru_10016D28 UnwindMapEntry <-1, offset loc_100120ED>
stru_10016D30 FuncInfo <19930522h, 0, 1, \
          offset stru_10016D28, 0, 0, 0,\
          0, 0, 0>
stru_10016D54 HandlerType <0, 0, 0, \
             offset loc_10001890>
stru_10016D64 HandlerType <0, 0, 0, \
             offset loc_1000190B>
stru_10016D74 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_10016D94 FuncInfo <19930522h, 0, 4, \
          offset stru_10016D74, 2, \
          offset stru_10016DB8, 0, 0, 0,\
          0>
stru_10016DB8 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_10016D64>
TryBlockMapEntry <0, 0, 3, 1, \
                  offset stru_10016D54>
stru_10016DE0 HandlerType <0, 0, 0, \
             offset loc_10001D02>
stru_10016DF0 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_10016DE0>
stru_10016E04 UnwindMapEntry <-1, offset loc_1001212D>
UnwindMapEntry <0, offset loc_10012135>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_10016E24 FuncInfo <19930522h, 0, 4, \
          offset stru_10016E04, 1, \
          offset stru_10016DF0, 0, 0, 0,\
          0>
stru_10016E48 UnwindMapEntry <-1, offset loc_10012165>
UnwindMapEntry <0, offset loc_1001216D>
stru_10016E58 FuncInfo <19930522h, 0, 2, \
          offset stru_10016E48, 0, 0, 0,\
          0, 0, 0>
; const _ThrowInfo stru_10016E7C
stru_10016E7C _ThrowInfo <0, offset sub_10001D44, 0, \
            offset unk_10016EB8>
stru_10016E8C UnwindMapEntry <-1, offset loc_10012193>
stru_10016E94 FuncInfo <19930522h, 0, 1, \
          offset stru_10016E8C, 0, 0, 0,\
          0, 0, 0>
unk_10016EB8 db    2
db    0
db    0
db    0
dd offset unk_10016EC4
dd offset unk_10016CB4
unk_10016EC4 db    0
db    0
db    0
db    0
dd offset off_100190E0
align 10h
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_10001E27
stru_10016EE0 HandlerType <0, 0, 0, \
             offset loc_10001E6A>
stru_10016EF0 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_10016EE0>
stru_10016F04 UnwindMapEntry <-1, offset loc_100121B6>
UnwindMapEntry <0, offset loc_100121BE>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_10016F24 FuncInfo <19930522h, 0, 4, \
          offset stru_10016F04, 1, \
          offset stru_10016EF0, 0, 0, 0,\
          0>
stru_10016F48 UnwindMapEntry <-1, offset loc_100121E4>
stru_10016F50 FuncInfo <19930522h, 0, 1, \
          offset stru_10016F48, 0, 0, 0,\
          0, 0, 0>
stru_10016F74 HandlerType <0, 0, 0, \
             offset loc_10002049>
stru_10016F84 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10016F94 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10016F74>
stru_10016FA8 FuncInfo <19930522h, 0, 2, \
          offset stru_10016F84, 1, \
          offset stru_10016F94, 0, 0, 0,\
          0>
stru_10016FCC HandlerType <0, 0, 0, \
             offset loc_100020E1>
stru_10016FDC UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10016FEC TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10016FCC>
stru_10017000 FuncInfo <19930522h, 0, 2, \
          offset stru_10016FDC, 1, \
          offset stru_10016FEC, 0, 0, 0,\
          0>
stru_10017024 HandlerType <0, 0, 0, \
             offset loc_1000217C>
stru_10017034 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10017044 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10017024>
stru_10017058 FuncInfo <19930522h, 0, 2, \
          offset stru_10017034, 1, \
          offset stru_10017044, 0, 0, 0,\
          0>
stru_1001707C HandlerType <0, 0, 0, \
             offset loc_10002214>
stru_1001708C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_1001709C TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_1001707C>
stru_100170B0 FuncInfo <19930522h, 0, 2, \
          offset stru_1001708C, 1, \
          offset stru_1001709C, 0, 0, 0,\
          0>
stru_100170D4 HandlerType <0, 0, 0, \
             offset loc_100022AC>
stru_100170E4 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100170F4 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_100170D4>
stru_10017108 FuncInfo <19930522h, 0, 2, \
          offset stru_100170E4, 1, \
          offset stru_100170F4, 0, 0, 0,\
          0>
stru_1001712C HandlerType <0, 0, 0, \
             offset loc_1000234A>
stru_1001713C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_1001714C TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_1001712C>
stru_10017160 FuncInfo <19930522h, 0, 2, \
          offset stru_1001713C, 1, \
          offset stru_1001714C, 0, 0, 0,\
          0>
stru_10017184 HandlerType <0, 0, 0, \
             offset loc_100023F0>
stru_10017194 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100171A4 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10017184>
stru_100171B8 FuncInfo <19930522h, 0, 2, \
          offset stru_10017194, 1, \
          offset stru_100171A4, 0, 0, 0,\
          0>
stru_100171DC HandlerType <0, 0, 0, \
             offset loc_10002491>
stru_100171EC UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100171FC TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_100171DC>
stru_10017210 FuncInfo <19930522h, 0, 2, \
          offset stru_100171EC, 1, \
          offset stru_100171FC, 0, 0, 0,\
          0>
stru_10017234 HandlerType <0, 0, 0, \
             offset loc_10002532>
stru_10017244 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10017254 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10017234>
stru_10017268 FuncInfo <19930522h, 0, 2, \
          offset stru_10017244, 1, \
          offset stru_10017254, 0, 0, 0,\
          0>
stru_1001728C HandlerType <0, 0, 0, \
             offset loc_100025D0>
stru_1001729C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100172AC TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_1001728C>
stru_100172C0 FuncInfo <19930522h, 0, 2, \
          offset stru_1001729C, 1, \
          offset stru_100172AC, 0, 0, 0,\
          0>
stru_100172E4 HandlerType <0, 0, 0, \
             offset loc_10002674>
stru_100172F4 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10017304 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_100172E4>
stru_10017318 FuncInfo <19930522h, 0, 2, \
          offset stru_100172F4, 1, \
          offset stru_10017304, 0, 0, 0,\
          0>
stru_1001733C HandlerType <0, 0, 0, \
             offset loc_1000271B>
stru_1001734C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_1001735C TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_1001733C>
stru_10017370 FuncInfo <19930522h, 0, 2, \
          offset stru_1001734C, 1, \
          offset stru_1001735C, 0, 0, 0,\
          0>
stru_10017394 HandlerType <0, 0, 0, \
             offset loc_100027C2>
stru_100173A4 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100173B4 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10017394>
stru_100173C8 FuncInfo <19930522h, 0, 2, \
          offset stru_100173A4, 1, \
          offset stru_100173B4, 0, 0, 0,\
          0>
stru_100173EC HandlerType <0, 0, 0, \
             offset loc_10002863>
stru_100173FC UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_1001740C TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_100173EC>
stru_10017420 FuncInfo <19930522h, 0, 2, \
          offset stru_100173FC, 1, \
          offset stru_1001740C, 0, 0, 0,\
          0>
stru_10017444 HandlerType <0, 0, 0, \
             offset loc_10002904>
stru_10017454 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10017464 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10017444>
stru_10017478 FuncInfo <19930522h, 0, 2, \
          offset stru_10017454, 1, \
          offset stru_10017464, 0, 0, 0,\
          0>
stru_1001749C HandlerType <0, 0, 0, \
             offset loc_100029A5>
stru_100174AC UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_100174BC TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_1001749C>
stru_100174D0 FuncInfo <19930522h, 0, 2, \
          offset stru_100174AC, 1, \
          offset stru_100174BC, 0, 0, 0,\
          0>
stru_100174F4 HandlerType <0, 0, 0, \
             offset loc_10002A46>
stru_10017504 UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10017514 TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_100174F4>
stru_10017528 FuncInfo <19930522h, 0, 2, \
          offset stru_10017504, 1, \
          offset stru_10017514, 0, 0, 0,\
          0>
stru_1001754C HandlerType <0, 0, 0, \
             offset loc_10002AEA>
stru_1001755C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_1001756C TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_1001754C>
stru_10017580 FuncInfo <19930522h, 0, 2, \
          offset stru_1001755C, 1, \
          offset stru_1001756C, 0, 0, 0,\
          0>
stru_100175A4 UnwindMapEntry <-1, offset loc_100123FE>
UnwindMapEntry <-1, offset loc_10012406>
stru_100175B4 FuncInfo <19930522h, 0, 2, \
          offset stru_100175A4, 0, 0, 0,\
          0, 0, 0>
stru_100175D8 UnwindMapEntry <-1, offset loc_10012436>
stru_100175E0 FuncInfo <19930522h, 0, 1, \
          offset stru_100175D8, 0, 0, 0,\
          0, 0, 0>
stru_10017604 UnwindMapEntry <-1, offset loc_10012459>
stru_1001760C FuncInfo <19930522h, 0, 1, \
          offset stru_10017604, 0, 0, 0,\
          0, 0, 0>
stru_10017630 FuncInfo <19930522h, 0, 7, \
          offset stru_10017654, 0, 0, 0,\
          0, 0, 0>
stru_10017654 UnwindMapEntry <-1, offset loc_1001247F>
UnwindMapEntry <0, offset loc_10012487>
UnwindMapEntry <-1, offset loc_10012487>
UnwindMapEntry <2, offset loc_1001248F>
UnwindMapEntry <3, offset loc_10012497>
UnwindMapEntry <2, offset loc_1001249F>
UnwindMapEntry <5, offset loc_100124A7>
stru_1001768C UnwindMapEntry <-1, offset loc_100124D4>
UnwindMapEntry <0, offset loc_100124ED>
stru_1001769C FuncInfo <19930522h, 0, 2, \
          offset stru_1001768C, 0, 0, 0,\
          0, 0, 0>
stru_100176C0 UnwindMapEntry <-1, offset loc_1001251A>
UnwindMapEntry <0, offset loc_10012522>
UnwindMapEntry <0, offset loc_1001252A>
stru_100176D8 FuncInfo <19930522h, 0, 3, \
          offset stru_100176C0, 0, 0, 0,\
          0, 0, 0>
stru_100176FC UnwindMapEntry <-1, offset loc_10012557>
stru_10017704 FuncInfo <19930522h, 0, 1, \
          offset stru_100176FC, 0, 0, 0,\
          0, 0, 0>
stru_10017728 UnwindMapEntry <-1, offset loc_10012585>
UnwindMapEntry <0, offset loc_1001257D>
stru_10017738 FuncInfo <19930522h, 0, 2, \
          offset stru_10017728, 0, 0, 0,\
          0, 0, 0>
stru_1001775C UnwindMapEntry <-1, offset loc_100125C1>
UnwindMapEntry <0, offset loc_100125B9>
stru_1001776C FuncInfo <19930522h, 0, 2, \
          offset stru_1001775C, 0, 0, 0,\
          0, 0, 0>
stru_10017790 FuncInfo <19930522h, 0, 5, \
          offset stru_100177B4, 0, 0, 0,\
          0, 0, 0>
stru_100177B4 UnwindMapEntry <-1, offset loc_100125F5>
UnwindMapEntry <0, offset loc_100125FD>
UnwindMapEntry <-1, offset loc_100125FD>
UnwindMapEntry <2, offset loc_10012605>
UnwindMapEntry <3, offset loc_1001260D>
stru_100177DC HandlerType <40h, 0, 0, \
             offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0>
stru_100177EC HandlerType <40h, 0, 0, \
             offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1>
stru_100177FC UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
UnwindMapEntry <1, 0>
UnwindMapEntry <1, 0>
stru_1001781C FuncInfo <19930522h, 0, 4, \
          offset stru_100177FC, 2, \
          offset stru_10017840, 0, 0, 0,\
          1>
stru_10017840 TryBlockMapEntry <2, 2, 3, 1, \
                  offset stru_100177EC>
TryBlockMapEntry <0, 0, 3, 1, \
                  offset stru_100177DC>
stru_10017868 UnwindMapEntry <-1, offset loc_10012655>
stru_10017870 FuncInfo <19930522h, 0, 1, \
          offset stru_10017868, 0, 0, 0,\
          0, 0, 1>
; const _ThrowInfo stru_10017894
stru_10017894 _ThrowInfo <0, offset sub_100042DE, 0, \
            offset unk_100178D0>
stru_100178A4 UnwindMapEntry <-1, offset loc_10012678>
stru_100178AC FuncInfo <19930522h, 0, 1, \
          offset stru_100178A4, 0, 0, 0,\
          0, 0, 1>
unk_100178D0 db    3
db    0
db    0
db    0
dd offset unk_100178E0
dd offset unk_100178FC
dd offset unk_10016CB4
unk_100178E0 db    0
db    0
db    0
db    0
dd offset off_10019A38
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_10004650
unk_100178FC db    0
db    0
db    0
db    0
dd offset off_10019A18
align 8
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_10004616
; const _ThrowInfo stru_10017918
stru_10017918 _ThrowInfo <0, offset sub_1000432D, 0, \
            offset unk_10017928>
unk_10017928 db    3
db    0
db    0
db    0
dd offset unk_10017938
dd offset unk_100178FC
dd offset unk_10016CB4
unk_10017938 db    0
db    0
db    0
db    0
dd offset off_10019A58
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
dd offset sub_1000466D
align 8
stru_10017958 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10005028>>
align 8
stru_10017978 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10005512>>
align 8
stru_10017998 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, \
                 offset loc_10005552, \
                 offset loc_1000557B>>
align 8
stru_100179B8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100055D8>>
align 8
stru_100179D8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_10005915, \
                 offset loc_10005926>>
align 8
stru_100179F8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100075BC>>
align 8
stru_10017A18 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10007847>, <\
                 0, offset loc_10007809,\
                 offset loc_10007813>>
stru_10017A40 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_100078F0, \
                 offset loc_100078F9>>
stru_10017A5C HandlerType <40h, 0, 0, \
             offset __catch$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z$0>
stru_10017A6C UnwindMapEntry <-1, 0>
UnwindMapEntry <-1, 0>
stru_10017A7C TryBlockMapEntry <0, 0, 1, 1, \
                  offset stru_10017A5C>
stru_10017A90 FuncInfo <19930522h, 0, 2, \
          offset stru_10017A6C, 1, \
          offset stru_10017A7C, 0, 0, 0,\
          1>
db    0
db    0
db    0
db    0
stru_10017AB8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFB4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10007B0F>, <\
                 0, offset loc_10007A7F,\
                 offset loc_10007A88>>
stru_10017AE0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_10007CF6, \
                 offset loc_10007CFA>>
align 10h
stru_10017B00 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_10007D8F, \
                 offset loc_10007D93>>
; const _ThrowInfo stru_10017B1C
stru_10017B1C _ThrowInfo <0, offset sub_100076AD, 0, \
            offset unk_10017B2C>
unk_10017B2C db    2
db    0
db    0
db    0
dd offset unk_10017B38
dd offset unk_10016CB4
unk_10017B38 db    0
db    0
db    0
db    0
dd offset off_10019C34
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
dd offset sub_10008245
align 8
stru_10017B58 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000857E>, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000858D>>
stru_10017B80 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10008740>, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000874C>>
stru_10017BA8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_10008973, \
                 offset loc_10008977>>
align 8
stru_10017BC8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_100089C3, \
                 offset loc_100089C7>>
align 8
stru_10017BE8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10008BA9>>
align 8
stru_10017C08 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10009867>>
align 8
stru_10017C28 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000A65F, \
                 offset loc_1000A67B>>
align 8
stru_10017C48 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000A9D8>>
align 8
stru_10017C68 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFC8h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000AC71>>
align 8
stru_10017C88 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFF8Ch, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000C234, \
                 offset loc_1000C238>>
align 8
stru_10017CA8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000CAF9>>
align 8
stru_10017CC8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000D308>>
align 8
stru_10017CE8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000D86C>>
align 8
stru_10017D08 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000DC3A>>
align 8
stru_10017D28 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000DFAA>>
align 8
stru_10017D48 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFC0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000E8C9>>
align 8
stru_10017D68 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000ED3D, \
                 offset loc_1000ED54>>
align 8
stru_10017D88 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD8h, 0, <\
                 0FFFFFFFEh, \
                 offset loc_1000EE9B, \
                 offset loc_1000EEAF>>
align 8
stru_10017DA8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000EFC4>>
align 8
stru_10017DC8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000F129>>
align 8
stru_10017DE8 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000FDCE>>
align 8
stru_10017E08 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1000FF5E>>
align 8
stru_10017E28 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFCCh, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100100E8>, <\
                 0, 0, \
                 offset loc_100100B4>>
stru_10017E50 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_1001114E>>
align 10h
stru_10017E70 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD4h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100113F5>>
align 10h
stru_10017E90 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_100114D7>>
align 10h
stru_10017EB0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10011D93>>
align 10h
stru_10017ED0 _EH4_SCOPETABLE <0FFFFFFFEh, 0, \
                 0FFFFFFD0h, 0, <\
                 0FFFFFFFEh, 0, \
                 offset loc_10011EFC>>
__IMPORT_DESCRIPTOR_dllsecurity dd rva off_10018094 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aDllsecurityDll  ; DLL Name
dd rva __imp_??0CSecurity@@QAE@XZ ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd rva off_10017F60 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aKernel32Dll     ; DLL Name
dd rva EnterCriticalSection ; Import Address Table
__IMPORT_DESCRIPTOR_ADVAPI32 dd rva off_10017F50 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aAdvapi32Dll     ; DLL Name
dd rva RegQueryValueExW ; Import Address Table
__IMPORT_DESCRIPTOR_ole32 dd rva off_100180A0 ; Import Name Table
dd 0                    ; Time stamp
dd 0                    ; Forwarder Chain
dd rva aOle32Dll        ; DLL Name
dd rva CoTaskMemAlloc   ; Import Address Table
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
;
; Import names for ADVAPI32.dll
;
off_10017F50 dd rva word_10018264
dd rva word_10018256
dd rva word_10018278
dd 0
;
; Import names for KERNEL32.dll
;
off_10017F60 dd rva word_10018114
dd rva word_1001812C
dd rva word_10018146
dd rva word_1001815E
dd rva word_10018170
dd rva word_1001817E
dd rva word_1001818C
dd rva word_10018198
dd rva word_100180FC
dd rva word_100181D0
dd rva word_100181E6
dd rva word_100181F4
dd rva word_10018206
dd rva word_1001820E
dd rva word_1001821E
dd rva word_1001822E
dd rva word_100181A8
dd rva word_10018440
dd rva word_100186C0
dd rva word_100182B2
dd rva word_100182BE
dd rva word_100182CA
dd rva word_100182DC
dd rva word_100182F2
dd rva word_10018304
dd rva word_10018318
dd rva word_1001832C
dd rva word_10018348
dd rva word_10018366
dd rva word_1001837A
dd rva word_10018386
dd rva word_1001839A
dd rva word_100183A8
dd rva word_100183B4
dd rva word_100183C2
dd rva word_100183CC
dd rva word_100183E4
dd rva word_100183F4
dd rva word_1001840C
dd rva word_1001841C
dd rva word_10018432
dd rva word_1001844E
dd rva word_1001845C
dd rva word_1001846C
dd rva word_1001847A
dd rva word_10018486
dd rva word_10018494
dd rva word_100184A6
dd rva word_100184B4
dd rva word_100184C6
dd rva word_100184E0
dd rva word_100184F8
dd rva word_10018512
dd rva word_10018528
dd rva word_10018542
dd rva word_1001855C
dd rva word_1001856C
dd rva word_10018582
dd rva word_1001859C
dd rva word_100185AC
dd rva word_100185BE
dd rva word_100185CA
dd rva word_100185D4
dd rva word_100185E0
dd rva word_100185F2
dd rva word_10018602
dd rva word_10018614
dd rva word_10018624
dd rva word_10018634
dd rva word_1001864A
dd rva word_1001865A
dd rva word_1001866A
dd rva word_1001867A
dd rva word_1001868C
dd rva word_1001869E
dd rva word_100186AC
dd 0
;
; Import names for dllsecurity.dll
;
off_10018094 dd rva word_100180D4
dd rva word_100180A8
dd 0
;
; Import names for ole32.dll
;
off_100180A0 dd rva word_10018296
dd 0
word_100180A8 dw 5
db '?SetSeedAndGetKey@CSecurity@@QAEJGG'
db 'PAG@Z',0
align 4
word_100180D4 dw 1
db '??0CSecurity@@QAE@XZ',0
align 4
aDllsecurityDll db 'dllsecurity.dll',0
word_100180FC dw 0BEh
db 'DeleteCriticalSection',0
word_10018114 dw 0D9h
db 'EnterCriticalSection',0
align 4
word_1001812C dw 439h
db 'TryEnterCriticalSection',0
word_10018146 dw 2EFh
db 'LeaveCriticalSection',0
align 2
word_1001815E dw 3DFh
db 'SetFilePointer',0
align 10h
word_10018170 dw 7Fh
db 'CreateFileW',0
word_1001817E dw 43h
db 'CloseHandle',0
word_1001818C dw 48Dh
db 'WriteFile',0
word_10018198 dw 1E7h
db 'GetLocalTime',0
align 4
word_100181A8 dw 2B5h
db 'InitializeCriticalSectionAndSpinCou'
db 'nt',0
word_100181D0 dw 31Ah
db 'MultiByteToWideChar',0
word_100181E6 dw 14Ch
db 'FreeLibrary',0
word_100181F4 dw 220h
db 'GetProcAddress',0
align 2
word_10018206 dw 421h
db 'Sleep',0
word_1001820E dw 2F4h
db 'LoadLibraryW',0
align 2
word_1001821E dw 1E6h
db 'GetLastError',0
align 2
word_1001822E dw 1C3h
db 'GetEnvironmentVariableW',0
aKernel32Dll db 'KERNEL32.dll',0
align 2
word_10018256 dw 22Ah
db 'RegCloseKey',0
word_10018264 dw 268h
db 'RegQueryValueExW',0
align 4
word_10018278 dw 25Bh
db 'RegOpenKeyExW',0
aAdvapi32Dll db 'ADVAPI32.dll',0
align 2
word_10018296 dw 66h
db 'CoTaskMemAlloc',0
align 4
aOle32Dll db 'ole32.dll',0
word_100182B2 dw 392h
db 'RtlUnwind',0
word_100182BE dw 2A1h
db 'HeapFree',0
align 2
word_100182CA dw 35Ah
db 'RaiseException',0
align 4
word_100182DC dw 1ADh
db 'GetCurrentThreadId',0
align 2
word_100182F2 dw 16Fh
db 'GetCommandLineA',0
word_10018304 dw 42Dh
db 'TerminateProcess',0
align 4
word_10018318 dw 1A9h
db 'GetCurrentProcess',0
word_1001832C dw 43Eh
db 'UnhandledExceptionFilter',0
align 4
word_10018348 dw 415h
db 'SetUnhandledExceptionFilter',0
word_10018366 dw 2D1h
db 'IsDebuggerPresent',0
word_1001837A dw 29Dh
db 'HeapAlloc',0
word_10018386 dw 1F9h
db 'GetModuleHandleW',0
align 2
word_1001839A dw 434h
db 'TlsGetValue',0
word_100183A8 dw 432h
db 'TlsAlloc',0
align 4
word_100183B4 dw 435h
db 'TlsSetValue',0
word_100183C2 dw 433h
db 'TlsFree',0
word_100183CC dw 2C0h
db 'InterlockedIncrement',0
align 4
word_100183E4 dw 3ECh
db 'SetLastError',0
align 4
word_100183F4 dw 2BCh
db 'InterlockedDecrement',0
align 4
word_1001840C dw 23Bh
db 'GetStdHandle',0
align 4
word_1001841C dw 1F4h
db 'GetModuleFileNameA',0
align 2
word_10018432 dw 29Fh
db 'HeapCreate',0
align 10h
word_10018440 dw 2A0h
db 'HeapDestroy',0
word_1001844E dw 457h
db 'VirtualFree',0
word_1001845C dw 454h
db 'VirtualAlloc',0
align 4
word_1001846C dw 2A4h
db 'HeapReAlloc',0
word_1001847A dw 2A6h
db 'HeapSize',0
align 2
word_10018486 dw 104h
db 'ExitProcess',0
word_10018494 dw 3E8h
db 'SetHandleCount',0
align 2
word_100184A6 dw 1D7h
db 'GetFileType',0
word_100184B4 dw 239h
db 'GetStartupInfoA',0
word_100184C6 dw 14Ah
db 'FreeEnvironmentStringsA',0
word_100184E0 dw 1BFh
db 'GetEnvironmentStrings',0
word_100184F8 dw 14Bh
db 'FreeEnvironmentStringsW',0
word_10018512 dw 47Ah
db 'WideCharToMultiByte',0
word_10018528 dw 1C1h
db 'GetEnvironmentStringsW',0
align 2
word_10018542 dw 354h
db 'QueryPerformanceCounter',0
word_1001855C dw 266h
db 'GetTickCount',0
align 4
word_1001856C dw 1AAh
db 'GetCurrentProcessId',0
word_10018582 dw 24Fh
db 'GetSystemTimeAsFileTime',0
word_1001859C dw 183h
db 'GetConsoleCP',0
align 4
word_100185AC dw 195h
db 'GetConsoleMode',0
align 2
word_100185BE dw 15Bh
db 'GetCPInfo',0
word_100185CA dw 152h
db 'GetACP',0
align 4
word_100185D4 dw 213h
db 'GetOEMCP',0
align 10h
word_100185E0 dw 2DBh
db 'IsValidCodePage',0
word_100185F2 dw 2F1h
db 'LoadLibraryA',0
align 2
word_10018602 dw 1E8h
db 'GetLocaleInfoA',0
align 4
word_10018614 dw 3FCh
db 'SetStdHandle',0
align 4
word_10018624 dw 482h
db 'WriteConsoleA',0
word_10018634 dw 199h
db 'GetConsoleOutputCP',0
align 2
word_1001864A dw 48Ch
db 'WriteConsoleW',0
word_1001865A dw 2E1h
db 'LCMapStringA',0
align 2
word_1001866A dw 2E3h
db 'LCMapStringW',0
align 2
word_1001867A dw 23Dh
db 'GetStringTypeA',0
align 4
word_1001868C dw 240h
db 'GetStringTypeW',0
align 2
word_1001869E dw 78h
db 'CreateFileA',0
word_100186AC dw 141h
db 'FlushFileBuffers',0
align 10h
word_100186C0 dw 368h
db 'ReadFile',0
align 10h
;
; Export directory for scan100.dll
;
dd 0                    ; Characteristics
dd 4BA0B677h            ; TimeDateStamp: Wed Mar 17 11:01:11 2010
dw 0                    ; MajorVersion
dw 0                    ; MinorVersion
dd rva aScan100Dll      ; Name
dd 1                    ; Base
dd 16h                  ; NumberOfFunctions
dd 16h                  ; NumberOfNames
dd rva off_100186F8     ; AddressOfFunctions
dd rva off_10018750     ; AddressOfNames
dd rva word_100187A8    ; AddressOfNameOrdinals
;
; Export Address Table for scan100.dll
;
off_100186F8 dd rva ??0CSecurity@@QAE@ABV0@@Z, rva ??1CSecurity@@UAE@XZ ; CSecurity::CSecurity(CSecurity const &) CSecurity::~CSecurity(void)
dd rva ??4CSecurity@@QAEAAV0@ABV0@@Z, rva ??_7CSecurity@@6B@ ; CSecurity::operator=(CSecurity const &) const CSecurity::`vftable'
dd rva CheckSecurityAccessPermissions, rva GetDefaultConfig
dd rva GetDriverInfo, rva GetDriverProperties
dd rva GetDriverProperties2, rva GetSSAData
dd rva GetSalesOrganization, rva GetServiceHandle
dd rva Init, rva Initialize, rva InstallCallback
dd rva RequestShowUI, rva SCAEnableECU, rva SetDriverProperties2
dd rva SetSSAData, rva StartConfigUI, rva UnInitialize
dd rva UninstallCallback
;
; Export Names Table for scan100.dll
;
off_10018750 dd rva a0csecurityQaeA, rva a1csecurityUaeX ; "??0CSecurity@@QAE@ABV0@@Z" "??1CSecurity@@UAE@XZ"
dd rva a4csecurityQaea, rva a7csecurity6b ; "??4CSecurity@@QAEAAV0@ABV0@@Z" "??_7CSecurity@@6B@"
dd rva aChecksecuritya, rva aGetdefaultconf ; "CheckSecurityAccessPermissions" "GetDefaultConfig"
dd rva aGetdriverinfo, rva aGetdriverprope ; "GetDriverInfo" "GetDriverProperties"
dd rva aGetdriverprope_0, rva aGetssadata ; "GetDriverProperties2" "GetSSAData"
dd rva aGetsalesorgani, rva aGetservicehand ; "GetSalesOrganization" "GetServiceHandle"
dd rva aInit, rva aInitialize, rva aInstallcallbac ; "Init" "Initialize" "InstallCallback"
dd rva aRequestshowui, rva aScaenableecu ; "RequestShowUI" "SCAEnableECU"
dd rva aSetdriverprope, rva aSetssadata ; "SetDriverProperties2" "SetSSAData"
dd rva aStartconfigui, rva aUninitialize ; "StartConfigUI" "UnInitialize"
dd rva aUninstallcallb  ; "UninstallCallback"
;
; Export Ordinals Table for scan100.dll
;
word_100187A8 dw 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh
dw 0Ch, 0Dh, 0Eh, 0Fh, 10h, 11h, 12h, 13h
dw 14h, 15h
aScan100Dll db 'scan100.dll',0
a0csecurityQaeA db '??0CSecurity@@QAE@ABV0@@Z',0
a1csecurityUaeX db '??1CSecurity@@UAE@XZ',0
a4csecurityQaea db '??4CSecurity@@QAEAAV0@ABV0@@Z',0
a7csecurity6b db '??_7CSecurity@@6B@',0
aChecksecuritya db 'CheckSecurityAccessPermissions',0
aGetdefaultconf db 'GetDefaultConfig',0
aGetdriverinfo db 'GetDriverInfo',0
aGetdriverprope db 'GetDriverProperties',0
aGetdriverprope_0 db 'GetDriverProperties2',0
aGetssadata db 'GetSSAData',0
aGetsalesorgani db 'GetSalesOrganization',0
aGetservicehand db 'GetServiceHandle',0
aInit db 'Init',0
aInitialize db 'Initialize',0
aInstallcallbac db 'InstallCallback',0
aRequestshowui db 'RequestShowUI',0
aScaenableecu db 'SCAEnableECU',0
aSetdriverprope db 'SetDriverProperties2',0
aSetssadata db 'SetSSAData',0
aStartconfigui db 'StartConfigUI',0
aUninitialize db 'UnInitialize',0
aUninstallcallb db 'UninstallCallback',0
align 800h
_rdata ends

; Section 3. (virtual address 00019000)
; Virtual size                  : 0000375C (  14172.)
; Section size in file          : 00001C00 (   7168.)
; Offset to raw data for section: 00017600
; Flags C0000040: Data Readable Writable
; Alignment     : default

; Segment type: Pure data
; Segment permissions: Read/Write
_data segment para public 'DATA' use32
assume cs:_data
;org 10019000h
dd offset aBadAllocation ; "bad allocation"
off_10019004 dd offset off_100149E4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  62h ; b
db  61h ; a
db  64h ; d
db  5Fh ; _
db  61h ; a
db  6Ch ; l
db  6Ch ; l
db  6Fh ; o
db  63h ; c
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
off_10019020 dd offset off_100149E4
align 8
aAvexceptionStd db '.?AVexception@std@@',0
off_1001903C dd offset off_100149E4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  49h ; I
db  43h ; C
db  72h ; r
db  69h ; i
db  74h ; t
db  69h ; i
db  63h ; c
db  61h ; a
db  6Ch ; l
db  53h ; S
db  65h ; e
db  63h ; c
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  40h ; @
db  74h ; t
db  69h ; i
db  73h ; s
db  32h ; 2
db  77h ; w
db  65h ; e
db  62h ; b
db  40h ; @
db  67h ; g
db  6Dh ; m
db  40h ; @
db  40h ; @
db    0
db    0
db    0
off_10019068 dd offset off_100149E4
align 10h
aAvcbasiccritic db '.?AVCBasicCriticalSection@tis2web@g'
db 'm@@',0
align 4
off_10019098 dd offset off_100149E4
align 10h
aAviloggerTis2w db '.?AVILogger@tis2web@gm@@',0
align 4
off_100190BC dd offset off_100149E4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  43h ; C
db  4Ch ; L
db  6Fh ; o
db  67h ; g
db  67h ; g
db  65h ; e
db  72h ; r
db  40h ; @
db  74h ; t
db  69h ; i
db  73h ; s
db  32h ; 2
db  77h ; w
db  65h ; e
db  62h ; b
db  40h ; @
db  67h ; g
db  6Dh ; m
db  40h ; @
db  40h ; @
db    0
db    0
db    0
db    0
off_100190E0 dd offset off_100149E4
align 8
aAvexceptionTis db '.?AVexception@tis2web@gm@@',0
align 4
dd offset aBadAllocation ; "bad allocation"
off_10019108 dd offset off_100149E4
align 10h
aAvcsecurity db '.?AVCSecurity@@',0
dd offset aBadAllocation ; "bad allocation"
align 8
dd offset aBadAllocation ; "bad allocation"
align 10h
aStatusNoerror:
text "UTF-16LE", 'STATUS_NOERROR',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  4Eh ; N
db    0
db  4Fh ; O
db    0
db  54h ; T
db    0
db  5Fh ; _
db    0
db  53h ; S
db    0
db  55h ; U
db    0
db  50h ; P
db    0
db  50h ; P
db    0
db  4Fh ; O
db    0
db  52h ; R
db    0
db  54h ; T
db    0
db  45h ; E
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  43h ; C
db    0
db  48h ; H
db    0
db  41h ; A
db    0
db  4Eh ; N
db    0
db  4Eh ; N
db    0
db  45h ; E
db    0
db  4Ch ; L
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  50h ; P
db    0
db  52h ; R
db    0
db  4Fh ; O
db    0
db  54h ; T
db    0
db  4Fh ; O
db    0
db  43h ; C
db    0
db  4Fh ; O
db    0
db  4Ch ; L
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  4Eh ; N
db    0
db  55h ; U
db    0
db  4Ch ; L
db    0
db  4Ch ; L
db    0
db  50h ; P
db    0
db  41h ; A
db    0
db  52h ; R
db    0
db  41h ; A
db    0
db  4Dh ; M
db    0
db  45h ; E
db    0
db  54h ; T
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Fh ; O
db    0
db  43h ; C
db    0
db  54h ; T
db    0
db  4Ch ; L
db    0
db  5Fh ; _
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  55h ; U
db    0
db  45h ; E
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  46h ; F
db    0
db  4Ch ; L
db    0
db  41h ; A
db    0
db  47h ; G
db    0
db  53h ; S
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  46h ; F
db    0
db  41h ; A
db    0
db  49h ; I
db    0
db  4Ch ; L
db    0
db  45h ; E
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  44h ; D
db    0
db  45h ; E
db    0
db  56h ; V
db    0
db  49h ; I
db    0
db  43h ; C
db    0
db  45h ; E
db    0
db  5Fh ; _
db    0
db  4Eh ; N
db    0
db  4Fh ; O
db    0
db  54h ; T
db    0
db  5Fh ; _
db    0
db  43h ; C
db    0
db  4Fh ; O
db    0
db  4Eh ; N
db    0
db  4Eh ; N
db    0
db  45h ; E
db    0
db  43h ; C
db    0
db  54h ; T
db    0
db  45h ; E
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  54h ; T
db    0
db  49h ; I
db    0
db  4Dh ; M
db    0
db  45h ; E
db    0
db  4Fh ; O
db    0
db  55h ; U
db    0
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  4Dh ; M
db    0
db  53h ; S
db    0
db  47h ; G
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  54h ; T
db    0
db  49h ; I
db    0
db  4Dh ; M
db    0
db  45h ; E
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  54h ; T
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  45h ; E
db    0
db  58h ; X
db    0
db  43h ; C
db    0
db  45h ; E
db    0
db  45h ; E
db    0
db  44h ; D
db    0
db  45h ; E
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  4Dh ; M
db    0
db  49h ; I
db    0
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  4Dh ; M
db    0
db  53h ; S
db    0
db  47h ; G
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  4Fh ; O
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Fh ; O
db    0
db  43h ; C
db    0
db  54h ; T
db    0
db  4Ch ; L
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  42h ; B
db    0
db  55h ; U
db    0
db  46h ; F
db    0
db  46h ; F
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  45h ; E
db    0
db  4Dh ; M
db    0
db  50h ; P
db    0
db  54h ; T
db    0
db  59h ; Y
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  42h ; B
db    0
db  55h ; U
db    0
db  46h ; F
db    0
db  46h ; F
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  46h ; F
db    0
db  55h ; U
db    0
db  4Ch ; L
db    0
db  4Ch ; L
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  42h ; B
db    0
db  55h ; U
db    0
db  46h ; F
db    0
db  46h ; F
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  4Fh ; O
db    0
db  56h ; V
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  46h ; F
db    0
db  4Ch ; L
db    0
db  4Fh ; O
db    0
db  57h ; W
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  50h ; P
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  56h ; V
db    0
db  41h ; A
db    0
db  4Ch ; L
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  43h ; C
db    0
db  48h ; H
db    0
db  41h ; A
db    0
db  4Eh ; N
db    0
db  4Eh ; N
db    0
db  45h ; E
db    0
db  4Ch ; L
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  4Eh ; N
db    0
db  5Fh ; _
db    0
db  55h ; U
db    0
db  53h ; S
db    0
db  45h ; E
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h ; E
db    0
db  52h ; R
db    0
db  52h ; R
db    0
db  5Fh ; _
db    0
db  4Dh ; M
db    0
db  53h ; S
db    0
db  47h ; G
db    0
db  5Fh ; _
db    0
db  50h ; P
db    0
db  52h ; R
db    0
db  4Fh ; O
db    0
db  54h ; T
db    0
db  4Fh ; O
db    0
db  43h ; C
db    0
db  4Fh ; O
db    0
db  4Ch ; L
db    0
db  5Fh ; _
db    0
db  49h ; I
db    0
db  44h ; D
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset aBadAllocation ; "bad allocation"
off_10019934 dd offset off_100149E4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  43h ; C
db  53h ; S
db  63h ; c
db  61h ; a
db  6Eh ; n
db  31h ; 1
db  30h ; 0
db  30h ; 0
db  49h ; I
db  6Dh ; m
db  70h ; p
db  6Ch ; l
db  40h ; @
db  40h ; @
db    0
db    0
off_10019950 dd offset off_100149E4
align 8
aAuiservice db '.?AUIService@@',0
align 4
off_10019968 dd offset off_100149E4
align 10h
aAuiunknown db '.?AUIUnknown@@',0
align 10h
off_10019980 dd offset off_100149E4
align 8
aAuidriver db '.?AUIDriver@@',0
align 4
off_10019998 dd offset off_100149E4
align 10h
aAuidriver2 db '.?AUIDriver2@@',0
align 10h
off_100199B0 dd offset off_100149E4
align 8
aAuidrivertest db '.?AUIDRIVERTEST@@',0
align 4
off_100199CC dd offset off_100149E4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  55h ; U
db  49h ; I
db  53h ; S
db  43h ; C
db  41h ; A
db  40h ; @
db  40h ; @
db    0
db    0
off_100199E0 dd offset off_100149E4
align 8
aAuisecurityacc db '.?AUISecurityAccessPermissions@@',0
align 4
dd offset aBadAllocation ; "bad allocation"
dd offset aBadAllocation ; "bad allocation"
dd offset aBadAllocation ; "bad allocation"
off_10019A18 dd offset off_100149E4
align 10h
aAvlogicErrorSt db '.?AVlogic_error@std@@',0
align 4
off_10019A38 dd offset off_100149E4
align 10h
aAvlengthErrorS db '.?AVlength_error@std@@',0
align 4
off_10019A58 dd offset off_100149E4
align 10h
aAvoutOfRangeSt db '.?AVout_of_range@std@@',0
align 4
dd offset aBadAllocation ; "bad allocation"
dd offset aBadAllocation ; "bad allocation"
off_10019A80 dd offset off_100149E4
align 8
aAvtypeInfo db '.?AVtype_info@@',0
align 10h
; uintptr_t __security_cookie
___security_cookie dd 0BB40E64Eh
dword_10019AA4 dd 44BF19B1h
align 10h
; char *off_10019AB0
off_10019AB0 dd offset aBadAllocation ; "bad allocation"
align 10h
dword_10019AC0 dd 1
dword_10019AC4 dd 16h
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    4
db    0
db    0
db    0
db  18h
db    0
db    0
db    0
db    5
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db    7
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db    8
db    0
db    0
db    0
db  0Ch
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  0Fh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db  12h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  21h ; !
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  35h ; 5
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  41h ; A
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  43h ; C
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  50h ; P
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db  52h ; R
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  53h ; S
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  57h ; W
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  6Ch ; l
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  6Dh ; m
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db  70h ; p
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  72h ; r
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  80h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  81h
db    0
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  82h
db    0
db    0
db    0
db    9
db    0
db    0
db    0
db  83h
db    0
db    0
db    0
db  16h
db    0
db    0
db    0
db  84h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db  91h
db    0
db    0
db    0
db  29h ; )
db    0
db    0
db    0
db  9Eh
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0A1h
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0A4h
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db 0A7h
db    0
db    0
db    0
db  0Dh
db    0
db    0
db    0
db 0B7h
db    0
db    0
db    0
db  11h
db    0
db    0
db    0
db 0CEh
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db 0D7h
db    0
db    0
db    0
db  0Bh
db    0
db    0
db    0
db  18h
db    7
db    0
db    0
db  0Ch
db    0
db    0
db    0
unk_10019C28 db  0Ch
db    0
db    0
db    0
unk_10019C2C db    8
db    0
db    0
db    0
dd offset aBadAllocation ; "bad allocation"
off_10019C34 dd offset off_100149E4
db    0
db    0
db    0
db    0
db  2Eh ; .
db  3Fh ; ?
db  41h ; A
db  56h ; V
db  62h ; b
db  61h ; a
db  64h ; d
db  5Fh ; _
db  65h ; e
db  78h ; x
db  63h ; c
db  65h ; e
db  70h ; p
db  74h ; t
db  69h ; i
db  6Fh ; o
db  6Eh ; n
db  40h ; @
db  73h ; s
db  74h ; t
db  64h ; d
db  40h ; @
db  40h ; @
db    0
dword_10019C54 dd 0FFFFFFFFh
; DWORD dwTlsIndex
dwTlsIndex dd 0FFFFFFFFh
align 10h
dd offset aBadAllocation ; "bad allocation"
align 10h
dword_10019C70 dd 3
align 8
dword_10019C78 dd 2
; char *off_10019C7C
off_10019C7C dd offset aR6002FloatingP ; "R6002\r\n- floating point support not l"...
db    8
db    0
db    0
db    0
dd offset aR6008NotEnough ; "R6008\r\n- not enough space for argumen"...
db    9
db    0
db    0
db    0
dd offset aR6009NotEnough ; "R6009\r\n- not enough space for environ"...
db  0Ah
db    0
db    0
db    0
dd offset aThisApplicatio ; "\r\nThis application has requested the "...
db  10h
db    0
db    0
db    0
dd offset aR6016NotEnough ; "R6016\r\n- not enough space for thread "...
db  11h
db    0
db    0
db    0
dd offset aR6017Unexpecte ; "R6017\r\n- unexpected multithread lock "...
db  12h
db    0
db    0
db    0
dd offset aR6018Unexpecte ; "R6018\r\n- unexpected heap error\r\n"
db  13h
db    0
db    0
db    0
dd offset aR6019UnableToO ; "R6019\r\n- unable to open console devic"...
db  18h
db    0
db    0
db    0
dd offset aR6024NotEnough ; "R6024\r\n- not enough space for _onexit"...
db  19h
db    0
db    0
db    0
dd offset aR6025PureVirtu ; "R6025\r\n- pure virtual function call\r"...
db  1Ah
db    0
db    0
db    0
dd offset aR6026NotEnough ; "R6026\r\n- not enough space for stdio i"...
db  1Bh
db    0
db    0
db    0
dd offset aR6027NotEnough ; "R6027\r\n- not enough space for lowio i"...
db  1Ch
db    0
db    0
db    0
dd offset aR6028UnableToI ; "R6028\r\n- unable to initialize heap\r"...
db  1Eh
db    0
db    0
db    0
dd offset aR6030CrtNotIni ; "R6030\r\n- CRT not initialized\r\n"
db  1Fh
db    0
db    0
db    0
dd offset aR6031AttemptTo ; "R6031\r\n- Attempt to initialize the CR"...
db  20h
db    0
db    0
db    0
dd offset aR6032NotEnough ; "R6032\r\n- not enough space for locale "...
db  21h ; !
db    0
db    0
db    0
dd offset aR6033AttemptTo ; "R6033\r\n- Attempt to use MSIL code fro"...
db  22h ; "
db    0
db    0
db    0
dd offset aR6034AnApplica ; "R6034\r\nAn application has made an att"...
db  78h ; x
db    0
db    0
db    0
dd offset aDomainError  ; "DOMAIN error\r\n"
db  79h ; y
db    0
db    0
db    0
dd offset aSingError    ; "SING error\r\n"
db  7Ah ; z
db    0
db    0
db    0
dd offset aTlossError   ; "TLOSS error\r\n"
db 0FCh
db    0
db    0
db    0
dd offset asc_10014AAC  ; "\r\n"
db 0FFh
db    0
db    0
db    0
dd offset aRuntimeError ; "runtime error "
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; LPCRITICAL_SECTION lpCriticalSection
lpCriticalSection dd 0
dword_10019D3C dd 1
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10019E58 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_10019E60 dd offset __exit
align 8
unk_10019E68 db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  80h
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_10019EA8 dd 3
dword_10019EAC dd 7
db  78h ; x
db    0
db    0
db    0
dword_10019EB4 dd 0Ah
off_10019EB8 dd offset unk_1001B600
db    0
db    0
db    0
db    0
dd offset unk_1001B600
db    1
db    1
db    0
db    0
unk_10019EC8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_10019F28 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001A118 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001A138 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_1001A358 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_1001A460 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h ; a
db  62h ; b
db  63h ; c
db  64h ; d
db  65h ; e
db  66h ; f
db  67h ; g
db  68h ; h
db  69h ; i
db  6Ah ; j
db  6Bh ; k
db  6Ch ; l
db  6Dh ; m
db  6Eh ; n
db  6Fh ; o
db  70h ; p
db  71h ; q
db  72h ; r
db  73h ; s
db  74h ; t
db  75h ; u
db  76h ; v
db  77h ; w
db  78h ; x
db  79h ; y
db  7Ah ; z
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db  42h ; B
db  43h ; C
db  44h ; D
db  45h ; E
db  46h ; F
db  47h ; G
db  48h ; H
db  49h ; I
db  4Ah ; J
db  4Bh ; K
db  4Ch ; L
db  4Dh ; M
db  4Eh ; N
db  4Fh ; O
db  50h ; P
db  51h ; Q
db  52h ; R
db  53h ; S
db  54h ; T
db  55h ; U
db  56h ; V
db  57h ; W
db  58h ; X
db  59h ; Y
db  5Ah ; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; volatile LONG *lpAddend
lpAddend dd offset unk_1001A138
byte_1001A564 db 1
db    2
db    4
db    8
dword_1001A568 dd 3A4h
unk_1001A56C db  60h ; `
db  82h
db  79h ; y
db  82h
db  21h ; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001A578 db 0A6h
db 0DFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0A1h
db 0A5h
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db  9Fh
db 0E0h
db 0FCh
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db  80h
db 0FCh
db    0
db    0
db    0
db    0
db 0A8h
db    3
db    0
db    0
db 0C1h
db 0A3h
db 0DAh
db 0A3h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h
db    3
db    0
db    0
db 0C1h
db 0A3h
db 0DAh
db 0A3h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  41h ; A
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B6h
db    3
db    0
db    0
db 0CFh
db 0A2h
db 0E4h
db 0A2h
db  1Ah
db    0
db 0E5h
db 0A2h
db 0E8h
db 0A2h
db  5Bh ; [
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0FEh
db    0
db    0
db    0
db    0
db    0
db    0
db  40h ; @
db  7Eh ; ~
db 0A1h
db 0FEh
db    0
db    0
db    0
db    0
db  51h ; Q
db    5
db    0
db    0
db  51h ; Q
db 0DAh
db  5Eh ; ^
db 0DAh
db  20h
db    0
db  5Fh ; _
db 0DAh
db  6Ah ; j
db 0DAh
db  32h ; 2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h
db 0D3h
db 0D8h
db 0DEh
db 0E0h
db 0F9h
db    0
db    0
db  31h ; 1
db  7Eh ; ~
db  81h
db 0FEh
db    0
db    0
db    0
db    0
dd offset aHH           ; "        h((((                  H"
dword_1001A65C dd 0FFFFFFFEh
unk_1001A660 db  43h ; C
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001A668 db    1
db    0
db    0
db    0
dword_1001A66C dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1001A67C dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_1001A660
align 10h
dd offset unk_1001A660
align 10h
dd offset unk_1001A660
align 10h
dd offset unk_1001A660
align 10h
dd offset unk_1001A660
align 10h
db    1
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1001A860
align 10h
off_1001A730 dd offset asc_10015AF0 ; "         (((((                  H"
dd offset unk_10015F78
dd offset unk_100160F8
dd offset off_1001A7A0
off_1001A740 dd offset unk_1001A668
db    1
db    0
db    0
db    0
; struct localeinfo_struct off_1001A748
off_1001A748 dd offset unk_1001A668
dd offset unk_1001A138
; char *Str
Str dd offset aNull     ; "(null)"
off_1001A754 dd offset aNull_0 ; "(null)"
off_1001A758 dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
dd offset __fptrap
off_1001A770 dd offset __fptrap
off_1001A774 dd offset __fptrap
off_1001A778 dd offset __fptrap
off_1001A77C dd offset __fptrap
unk_1001A780 db  20h
db    5
db  93h
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1001A790 dd 2
dd offset asc_10015AF0  ; "         (((((                  H"
off_1001A798 dd offset unk_10015CF2
align 10h
off_1001A7A0 dd offset unk_10016320
dd offset unk_1001631C
dd offset unk_10016318
dd offset unk_10016314
dd offset unk_10016310
dd offset unk_1001630C
dd offset unk_10016308
dd offset aSunday       ; "Sunday"
dd offset aMonday       ; "Monday"
dd offset aTuesday      ; "Tuesday"
dd offset aWednesday    ; "Wednesday"
dd offset aThursday     ; "Thursday"
dd offset aFriday       ; "Friday"
dd offset aSaturday     ; "Saturday"
dd offset unk_100162C0
dd offset unk_100162BC
dd offset unk_100162B8
dd offset unk_100162B4
dd offset unk_100162B0
dd offset unk_100162AC
dd offset unk_100162A8
dd offset unk_100162A4
dd offset unk_100162A0
dd offset unk_1001629C
dd offset unk_10016298
dd offset unk_10016294
dd offset aJanuary      ; "January"
dd offset aFebruary     ; "February"
dd offset aMarch        ; "March"
dd offset aApril        ; "April"
dd offset unk_100162B0
dd offset aJune         ; "June"
dd offset aJuly         ; "July"
dd offset aAugust       ; "August"
dd offset aSeptember    ; "September"
dd offset aOctober      ; "October"
dd offset aNovember     ; "November"
dd offset aDecember     ; "December"
dd offset unk_10016228
dd offset unk_10016224
dd offset aMmDdYy       ; "MM/dd/yy"
dd offset aDdddMmmmDdYyyy ; "dddd, MMMM dd, yyyy"
dd offset aHhMmSs       ; "HH:mm:ss"
db    9
db    4
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset off_1001A7A0
unk_1001A85C db  2Eh ; .
db    0
db    0
db    0
off_1001A860 dd offset unk_1001A85C
off_1001A864 dd offset unk_1001B534
off_1001A868 dd offset unk_1001B534
off_1001A86C dd offset unk_1001B534
off_1001A870 dd offset unk_1001B534
off_1001A874 dd offset unk_1001B534
off_1001A878 dd offset unk_1001B534
off_1001A87C dd offset unk_1001B534
off_1001A880 dd offset unk_1001B534
off_1001A884 dd offset unk_1001B534
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
db  7Fh ; 
dd offset off_1001A860
db    1
db    0
db    0
db    0
db  2Eh ; .
db    0
db    0
db    0
db    1
db    0
db    0
db    0
; HANDLE dword_1001A8A0
dword_1001A8A0 dd 0FFFFFFFEh
; HANDLE hObject
hObject dd 0FFFFFFFEh
db  80h
db  70h ; p
db    0
db    0
db    1
db    0
db    0
db    0
db 0F0h
db 0F1h
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
unk_1001A8B8 db  50h ; P
db  53h ; S
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001A8F8 db  50h ; P
db  44h ; D
db  54h ; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dd offset unk_1001A8B8
dd offset unk_1001A8F8
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_1001A958 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    1
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    2
db    3
db    3
db    3
db    3
db    3
db    3
db    3
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  1Eh
db    0
db    0
db    0
db  3Bh ; ;
db    0
db    0
db    0
db  5Ah ; Z
db    0
db    0
db    0
db  78h ; x
db    0
db    0
db    0
db  97h
db    0
db    0
db    0
db 0B5h
db    0
db    0
db    0
db 0D4h
db    0
db    0
db    0
db 0F3h
db    0
db    0
db    0
db  11h
db    1
db    0
db    0
db  30h ; 0
db    1
db    0
db    0
db  4Eh ; N
db    1
db    0
db    0
db  6Dh ; m
db    1
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  1Eh
db    0
db    0
db    0
db  3Ah ; :
db    0
db    0
db    0
db  59h ; Y
db    0
db    0
db    0
db  77h ; w
db    0
db    0
db    0
db  96h
db    0
db    0
db    0
db 0B4h
db    0
db    0
db    0
db 0D3h
db    0
db    0
db    0
db 0F2h
db    0
db    0
db    0
db  10h
db    1
db    0
db    0
db  2Fh ; /
db    1
db    0
db    0
db  4Dh ; M
db    1
db    0
db    0
db  6Ch ; l
db    1
db    0
db    0
dword_1001AAC0 dd 0
unk_1001AAC4 db    0
db    0
db    0
db    0
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection _RTL_CRITICAL_SECTION <0>
unk_1001AAE0 db    0
db    0
db    0
db    0
unk_1001AAE4 db    0
db    0
db    0
db    0
unk_1001AAE8 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1001AAF0 db    0
db    0
db    0
db    0
unk_1001AAF4 db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
; std::bad_alloc dword_1001AB40
dword_1001AB40 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1001AB4C dd 0
dword_1001AB50 dd 0
; char *dword_1001AB54
dword_1001AB54 dd 0
db    0
db    0
db    0
db    0
dword_1001AB5C dd 0
dword_1001AB60 dd 0
dword_1001AB64 dd 0
dword_1001AB68 dd 0
; LPVOID lpTlsValue
lpTlsValue dd 0
dword_1001AB70 dd 0
dword_1001AB74 dd 0
dword_1001AB78 dd 0
align 10h
dword_1001AB80 dd 0
dword_1001AB84 dd 0
db    0
db    0
db    0
db    0
dword_1001AB8C dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
dword_1001ABD0 dd 0
align 8
dword_1001ABD8 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
word_1001AC64 dw ?
align 4
word_1001AC68 dw ?
align 4
word_1001AC6C dw ?
align 10h
word_1001AC70 dw ?
align 4
dword_1001AC74 dd ?
dword_1001AC78 dd ?
dword_1001AC7C dd ?
dword_1001AC80 dd ?
dword_1001AC84 dd ?
dword_1001AC88 dd ?
dword_1001AC8C dd ?
dword_1001AC90 dd ?
word_1001AC94 dw ?
align 4
dword_1001AC98 dd ?
dword_1001AC9C dd ?
word_1001ACA0 dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_1001AEA4 db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *Block
Block dd ?
align 10h
; char Destination[25]
Destination db 19h dup(?)
; CHAR Filename[260]
Filename db 104h dup(?)
byte_1001AFCD db ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
unk_1001B1C4 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001B1CC dd ?
; HANDLE hHeap
hHeap dd ?
align 8
unk_1001B1D8 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *dword_1001B328
dword_1001B328 dd ?
dword_1001B32C dd ?
dword_1001B330 dd ?
align 8
dword_1001B338 dd ?
dword_1001B33C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
; void *dword_1001B344
dword_1001B344 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001B354 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
byte_1001B35C db ?
align 10h
dword_1001B360 dd ?
dword_1001B364 dd ?
; CHAR byte_1001B368[260]
byte_1001B368 db 104h dup(?)
byte_1001B46C db ?
align 10h
dword_1001B470 dd ?
dword_1001B474 dd ?
dword_1001B478 dd ?
word_1001B47C dw ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001B488 dd ?
dword_1001B48C dd ?
dword_1001B490 dd ?
dword_1001B494 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001B4B8 dd ?
dword_1001B4BC dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001B4FC dd ?
dword_1001B500 dd ?
dword_1001B504 dd ?
dword_1001B508 dd ?
align 10h
dword_1001B510 dd ?
dword_1001B514 dd ?
dword_1001B518 dd ?
dword_1001B51C dd ?
dword_1001B520 dd ?
dword_1001B524 dd ?
dword_1001B528 dd ?
dword_1001B52C dd ?
dword_1001B530 dd ?
unk_1001B534 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001B5F8 dd ?
; void *dword_1001B5FC
dword_1001B5FC dd ?
unk_1001B600 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001C600 dd ?
; UINT uNumber
uNumber dd ?
align 20h
dword_1001C620 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_1001C720 dd ?
dword_1001C724 dd ?
dword_1001C728 dd ?
dword_1001C72C dd ?
dword_1001C730 dd ?
dword_1001C734 dd ?
dword_1001C738 dd ?
dword_1001C73C dd ?
; LPVOID lpMem
lpMem dd ?
dword_1001C744 dd ?
dword_1001C748 dd ?
dword_1001C74C dd ?
dword_1001C750 dd ?
dword_1001C754 dd ?
dword_1001C758 dd ?
align 1000h
_data ends


end DllEntryPoint
